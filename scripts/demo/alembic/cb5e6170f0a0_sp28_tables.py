#
# This file is part of Invenio.
# Copyright (C) 2016 CERN.
#
# Invenio is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# Invenio is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Invenio; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307, USA.
#
# In applying this license, CERN does not
# waive the privileges and immunities granted to it by virtue of its status
# as an Intergovernmental Organization or submit itself to any jurisdiction.

"""SP28 tables"""

from alembic import op
import sqlalchemy as sa
import sqlalchemy_utils
from datetime import datetime
from sqlalchemy.dialects import mysql, postgresql
from sqlalchemy_utils.types import JSONType
from weko_groups.models import Group
from weko_workflow.models import TimestampMixin, ActionStatus, FlowDefine, FlowAction, Activity
from weko_groups.models import Membership

# revision identifiers, used by Alembic.
# ! Important : This script WILL NOT be used
revision = 'cb5e6170f0a0'
down_revision = 'd797e4ee2c76'
branch_labels = ()
depends_on = None


def upgrade():
    """Upgrade database from SP0 to SP28."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('accounts_group',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_managed', sa.Boolean(name='managed'), nullable=False),
    sa.Column('privacy_policy', sqlalchemy_utils.types.choice.ChoiceType(Group.PRIVACY_POLICIES), nullable=False),
    sa.Column('subscription_policy', sqlalchemy_utils.types.choice.ChoiceType(Group.SUBSCRIPTION_POLICIES), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('modified', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_accounts_group'))
    )
    op.create_index(op.f('ix_accounts_group_name'), 'accounts_group', ['name'], unique=True)
    op.create_table('admin_lang_settings',
    sa.Column('lang_code', sa.String(length=3), nullable=False),
    sa.Column('lang_name', sa.String(length=30), nullable=False),
    sa.Column('is_registered', sa.Boolean(name='registered'), nullable=True),
    sa.Column('sequence', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(name='active'), nullable=True),
    sa.PrimaryKeyConstraint('lang_code', name=op.f('pk_admin_lang_settings')),
    sa.UniqueConstraint('lang_code', name=op.f('uq_admin_lang_settings_lang_code'))
    )
    op.create_table('admin_settings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=30), nullable=True),
    sa.Column('settings', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_admin_settings')),
    sa.UniqueConstraint('name', name=op.f('uq_admin_settings_name'))
    )
    op.create_table('api_certificate',
    sa.Column('api_code', sa.String(length=3), nullable=False),
    sa.Column('api_name', sa.String(length=25), nullable=False),
    sa.Column('cert_data', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.PrimaryKeyConstraint('api_code', name=op.f('pk_api_certificate')),
    sa.UniqueConstraint('api_code', name=op.f('uq_api_certificate_api_code')),
    sa.UniqueConstraint('api_name', name=op.f('uq_api_certificate_api_name'))
    )
    op.create_table('authors',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('gather_flg', sa.BigInteger(), nullable=True),
    sa.Column('json', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_authors')),
    sa.UniqueConstraint('id', name=op.f('uq_authors_id'))
    )
    op.create_table('authors_prefix_settings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('url', sa.Text(), nullable=True),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_authors_prefix_settings')),
    sa.UniqueConstraint('id', name=op.f('uq_authors_prefix_settings_id'))
    )
    op.create_table('billing_permission',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(name='active'), nullable=False),
    sa.PrimaryKeyConstraint('user_id', name=op.f('pk_billing_permission')),
    sa.UniqueConstraint('user_id', name=op.f('uq_billing_permission_user_id'))
    )
    op.create_table('changelist_indexes',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Boolean(), nullable=False),
    sa.Column('repository_id', sa.BigInteger(), nullable=True),
    sa.Column('change_dump_manifest', sa.Boolean(), nullable=True),
    sa.Column('max_changes_size', sa.Integer(), nullable=False),
    sa.Column('interval_by_date', sa.Integer(), nullable=False),
    sa.Column('change_tracking_state', sa.String(length=255), nullable=True),
    sa.Column('url_path', sa.String(length=255), nullable=True),
    sa.Column('publish_date', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_changelist_indexes')),
    sa.UniqueConstraint('repository_id', name=op.f('uq_changelist_indexes_repository_id'))
    )
    op.create_table('doi_identifier',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('repository', sa.String(length=100), nullable=False),
    sa.Column('jalc_flag', sa.Boolean(), nullable=True),
    sa.Column('jalc_crossref_flag', sa.Boolean(), nullable=True),
    sa.Column('jalc_datacite_flag', sa.Boolean(), nullable=True),
    sa.Column('jalc_doi', sa.String(length=100), nullable=True),
    sa.Column('jalc_crossref_doi', sa.String(length=100), nullable=True),
    sa.Column('jalc_datacite_doi', sa.String(length=100), nullable=True),
    sa.Column('suffix', sa.String(length=100), nullable=True),
    sa.Column('created_userId', sa.String(length=50), nullable=False),
    sa.Column('created_date', sa.DateTime(), nullable=False),
    sa.Column('updated_userId', sa.String(length=50), nullable=False),
    sa.Column('updated_date', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_doi_identifier')),
    sa.UniqueConstraint('id', name=op.f('uq_doi_identifier_id'))
    )
    op.create_table('feedback_email_setting',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('account_author', sa.Text(), nullable=False),
    sa.Column('manual_mail', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.Column('is_sending_feedback', sa.Boolean(name='is_sending_feedback'), nullable=False),
    sa.Column('root_url', sa.String(length=100), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_feedback_email_setting'))
    )
    op.create_table('feedback_mail_failed',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('history_id', sa.Integer(), nullable=False),
    sa.Column('author_id', sa.String(length=50), nullable=True),
    sa.Column('mail', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_feedback_mail_failed'))
    )
    op.create_table('feedback_mail_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=False),
    sa.Column('stats_time', sa.String(length=7), nullable=False),
    sa.Column('count', sa.Integer(), nullable=False),
    sa.Column('error', sa.Integer(), nullable=True),
    sa.Column('is_latest', sa.Boolean(name='lastest'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_feedback_mail_history'))
    )
    op.create_table('feedback_mail_list',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('item_id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('mail_list', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_feedback_mail_list'))
    )
    op.create_table('file_metadata',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('pid', sa.Integer(), nullable=True),
    sa.Column('contents', sa.LargeBinary(), nullable=True),
    sa.Column('json', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_file_metadata'))
    )
    op.create_table('file_metadata_version',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, autoincrement=False, nullable=True),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, autoincrement=False, nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('pid', sa.Integer(), autoincrement=False, nullable=True),
    sa.Column('contents', sa.LargeBinary(), autoincrement=False, nullable=True),
    sa.Column('json', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), autoincrement=False, nullable=True),
    sa.Column('version_id', sa.Integer(), autoincrement=False, nullable=True),
    sa.Column('transaction_id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('end_transaction_id', sa.BigInteger(), nullable=True),
    sa.Column('operation_type', sa.SmallInteger(), nullable=False),
    sa.PrimaryKeyConstraint('id', 'transaction_id', name=op.f('pk_file_metadata_version'))
    )
    op.create_index(op.f('ix_file_metadata_version_end_transaction_id'), 'file_metadata_version', ['end_transaction_id'], unique=False)
    op.create_index(op.f('ix_file_metadata_version_operation_type'), 'file_metadata_version', ['operation_type'], unique=False)
    op.create_index(op.f('ix_file_metadata_version_transaction_id'), 'file_metadata_version', ['transaction_id'], unique=False)
    op.create_table('file_permission',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('record_id', sa.Integer(), nullable=False),
    sa.Column('file_name', sa.String(length=255), nullable=False),
    sa.Column('usage_application_activity_id', sa.String(length=255), nullable=False),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('open_date', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_file_permission'))
    )
    op.create_table('harvest_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('harvest_setting_id', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(length=10), nullable=False),
    sa.Column('errmsg', sa.String(length=255), nullable=True),
    sa.Column('requrl', sa.String(length=255), nullable=True),
    sa.Column('counter', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.Column('setting', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_harvest_logs'))
    )
    op.create_table('index',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('parent', sa.BigInteger(), nullable=False),
    sa.Column('position', sa.Integer(), nullable=False),
    sa.Column('index_name', sa.Text(), nullable=True),
    sa.Column('index_name_english', sa.Text(), nullable=False),
    sa.Column('index_link_name', sa.Text(), nullable=True),
    sa.Column('index_link_name_english', sa.Text(), nullable=False),
    sa.Column('harvest_spec', sa.Text(), nullable=True),
    sa.Column('index_link_enabled', sa.Boolean(name='index_link_enabled'), nullable=False),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('more_check', sa.Boolean(name='more_check'), nullable=False),
    sa.Column('display_no', sa.Integer(), nullable=False),
    sa.Column('harvest_public_state', sa.Boolean(name='harvest_public_state'), nullable=False),
    sa.Column('display_format', sa.Text(), nullable=True),
    sa.Column('image_name', sa.Text(), nullable=False),
    sa.Column('public_state', sa.Boolean(name='public_state'), nullable=False),
    sa.Column('public_date', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), "mysql"), nullable=True),
    sa.Column('recursive_public_state', sa.Boolean(name='recs_public_state'), nullable=True),
    sa.Column('rss_status', sa.Boolean(name='rss_status'), nullable=True),
    sa.Column('coverpage_state', sa.Boolean(name='coverpage_state'), nullable=True),
    sa.Column('recursive_coverpage_check', sa.Boolean(name='recursive_coverpage_check'), nullable=True),
    sa.Column('browsing_role', sa.Text(), nullable=True),
    sa.Column('recursive_browsing_role', sa.Boolean(name='recs_browsing_role'), nullable=True),
    sa.Column('contribute_role', sa.Text(), nullable=True),
    sa.Column('recursive_contribute_role', sa.Boolean(name='recs_contribute_role'), nullable=True),
    sa.Column('browsing_group', sa.Text(), nullable=True),
    sa.Column('recursive_browsing_group', sa.Boolean(name='recs_browsing_group'), nullable=True),
    sa.Column('contribute_group', sa.Text(), nullable=True),
    sa.Column('recursive_contribute_group', sa.Boolean(name='recs_contribute_group'), nullable=True),
    sa.Column('owner_user_id', sa.Integer(), nullable=True),
    sa.Column('item_custom_sort', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_index')),
    sa.UniqueConstraint('id', name=op.f('uq_index_id')),
    sa.UniqueConstraint('parent', 'position', name='uix_position')
    )
    op.create_table('index_style',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('id', sa.String(length=100), nullable=False),
    sa.Column('width', sa.Text(), nullable=False),
    sa.Column('height', sa.Text(), nullable=False),
    sa.Column('index_link_enabled', sa.Boolean(name='index_link_enabled'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_index_style'))
    )
    op.create_table('institution_name',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('institution_name', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_institution_name'))
    )
    op.create_table('item_metadata',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('item_type_id', sa.Integer(), nullable=True),
    sa.Column('json', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_item_metadata'))
    )
    op.create_table('item_metadata_version',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, autoincrement=False, nullable=True),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, autoincrement=False, nullable=True),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), autoincrement=False, nullable=False),
    sa.Column('item_type_id', sa.Integer(), autoincrement=False, nullable=True),
    sa.Column('json', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), autoincrement=False, nullable=True),
    sa.Column('version_id', sa.Integer(), autoincrement=False, nullable=True),
    sa.Column('transaction_id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('end_transaction_id', sa.BigInteger(), nullable=True),
    sa.Column('operation_type', sa.SmallInteger(), nullable=False),
    sa.PrimaryKeyConstraint('id', 'transaction_id', name=op.f('pk_item_metadata_version'))
    )
    op.create_index(op.f('ix_item_metadata_version_end_transaction_id'), 'item_metadata_version', ['end_transaction_id'], unique=False)
    op.create_index(op.f('ix_item_metadata_version_operation_type'), 'item_metadata_version', ['operation_type'], unique=False)
    op.create_index(op.f('ix_item_metadata_version_transaction_id'), 'item_metadata_version', ['transaction_id'], unique=False)
    op.create_table('item_type_mapping',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('item_type_id', sa.Integer(), nullable=True),
    sa.Column('mapping', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_item_type_mapping'))
    )
    op.create_table('item_type_mapping_version',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, autoincrement=False, nullable=True),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, autoincrement=False, nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('item_type_id', sa.Integer(), autoincrement=False, nullable=True),
    sa.Column('mapping', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), autoincrement=False, nullable=True),
    sa.Column('version_id', sa.Integer(), autoincrement=False, nullable=True),
    sa.Column('transaction_id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('end_transaction_id', sa.BigInteger(), nullable=True),
    sa.Column('operation_type', sa.SmallInteger(), nullable=False),
    sa.PrimaryKeyConstraint('id', 'transaction_id', name=op.f('pk_item_type_mapping_version'))
    )
    op.create_index(op.f('ix_item_type_mapping_version_end_transaction_id'), 'item_type_mapping_version', ['end_transaction_id'], unique=False)
    op.create_index(op.f('ix_item_type_mapping_version_operation_type'), 'item_type_mapping_version', ['operation_type'], unique=False)
    op.create_index(op.f('ix_item_type_mapping_version_transaction_id'), 'item_type_mapping_version', ['transaction_id'], unique=False)
    op.create_table('item_type_name',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('has_site_license', sa.Boolean(name='has_site_license'), nullable=False),
    sa.Column('is_active', sa.Boolean(name='active'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_item_type_name'))
    )
    op.create_index('uq_item_type_name_name', 'item_type_name', ['name'], unique=True, postgresql_where=sa.text('is_active'))
    op.create_table('item_type_property',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('schema', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.Column('form', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.Column('forms', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.Column('delflg', sa.Boolean(name='delFlg'), nullable=False),
    sa.Column('sort', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_item_type_property')),
    sa.UniqueConstraint('name', name=op.f('uq_item_type_property_name')),
    sa.UniqueConstraint('sort', name=op.f('uq_item_type_property_sort'))
    )
    op.create_table('item_type_version',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, autoincrement=False, nullable=True),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, autoincrement=False, nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=False, nullable=False),
    sa.Column('name_id', sa.Integer(), autoincrement=False, nullable=True),
    sa.Column('harvesting_type', sa.Boolean(name='harvesting_type'), autoincrement=False, nullable=True),
    sa.Column('schema', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), autoincrement=False, nullable=True),
    sa.Column('form', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), autoincrement=False, nullable=True),
    sa.Column('render', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), autoincrement=False, nullable=True),
    sa.Column('tag', sa.Integer(), autoincrement=False, nullable=True),
    sa.Column('version_id', sa.Integer(), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.Boolean(name='deleted'), autoincrement=False, nullable=True),
    sa.Column('transaction_id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('end_transaction_id', sa.BigInteger(), nullable=True),
    sa.Column('operation_type', sa.SmallInteger(), nullable=False),
    sa.PrimaryKeyConstraint('id', 'transaction_id', name=op.f('pk_item_type_version'))
    )
    op.create_index(op.f('ix_item_type_version_end_transaction_id'), 'item_type_version', ['end_transaction_id'], unique=False)
    op.create_index(op.f('ix_item_type_version_operation_type'), 'item_type_version', ['operation_type'], unique=False)
    op.create_index(op.f('ix_item_type_version_transaction_id'), 'item_type_version', ['transaction_id'], unique=False)
    op.create_table('journal_export_processing',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_journal_export_processing')),
    sa.UniqueConstraint('id', name=op.f('uq_journal_export_processing_id'))
    )
    op.create_table('loganalysis_restricted_crawler_list',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('list_url', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(name='activated'), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_loganalysis_restricted_crawler_list'))
    )
    op.create_table('loganalysis_restricted_ip_address',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('ip_address', sa.String(length=16), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_loganalysis_restricted_ip_address')),
    sa.UniqueConstraint('ip_address', name=op.f('uq_loganalysis_restricted_ip_address_ip_address'))
    )
    op.create_table('mail_config',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('mail_server', sa.String(length=255), nullable=True),
    sa.Column('mail_port', sa.Integer(), nullable=True),
    sa.Column('mail_use_tls', sa.Boolean(name='use_tls'), nullable=True),
    sa.Column('mail_use_ssl', sa.Boolean(name='use_ssl'), nullable=True),
    sa.Column('mail_username', sa.String(length=255), nullable=True),
    sa.Column('mail_password', sa.String(length=255), nullable=True),
    sa.Column('mail_default_sender', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_mail_config'))
    )
    op.create_table('oaiharvester_configs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('baseurl', sa.String(length=255), server_default='', nullable=False),
    sa.Column('metadataprefix', sa.String(length=255), server_default='oai_dc', nullable=False),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('lastrun', sa.DateTime(), nullable=True),
    sa.Column('setspecs', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_oaiharvester_configs'))
    )
    op.create_table('oaiserver_identify',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('outPutSetting', sa.Boolean(), nullable=False),
    sa.Column('emails', sa.String(length=255), nullable=True),
    sa.Column('repositoryName', sa.String(length=255), nullable=True),
    sa.Column('earliestDatastamp', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_oaiserver_identify')),
    sa.UniqueConstraint('outPutSetting', name=op.f('uq_oaiserver_identify_outPutSetting'))
    )
    op.create_index(op.f('ix_oaiserver_identify_emails'), 'oaiserver_identify', ['emails'], unique=False)
    op.create_table('oaiserver_schema',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('schema_name', sa.String(length=255), nullable=False),
    sa.Column('form_data', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.Column('xsd', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=False),
    sa.Column('namespaces', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.Column('schema_location', sa.String(length=255), nullable=True),
    sa.Column('isvalid', sa.Boolean(name='isvalid'), nullable=False),
    sa.Column('is_mapping', sa.Boolean(name='is_mapping'), nullable=False),
    sa.Column('isfixed', sa.Boolean(name='isfixed'), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('target_namespace', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_oaiserver_schema')),
    sa.UniqueConstraint('schema_name', name=op.f('uq_oaiserver_schema_schema_name'))
    )
    op.create_table('oaiserver_schema_version',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, autoincrement=False, nullable=True),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, autoincrement=False, nullable=True),
    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType(), autoincrement=False, nullable=False),
    sa.Column('schema_name', sa.String(length=255), autoincrement=False, nullable=True),
    sa.Column('form_data', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), autoincrement=False, nullable=True),
    sa.Column('xsd', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), autoincrement=False, nullable=True),
    sa.Column('namespaces', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), autoincrement=False, nullable=True),
    sa.Column('schema_location', sa.String(length=255), autoincrement=False, nullable=True),
    sa.Column('isvalid', sa.Boolean(name='isvalid'), autoincrement=False, nullable=True),
    sa.Column('is_mapping', sa.Boolean(name='is_mapping'), autoincrement=False, nullable=True),
    sa.Column('isfixed', sa.Boolean(name='isfixed'), autoincrement=False, nullable=True),
    sa.Column('version_id', sa.Integer(), autoincrement=False, nullable=True),
    sa.Column('target_namespace', sa.String(length=255), autoincrement=False, nullable=True),
    sa.Column('transaction_id', sa.BigInteger(), autoincrement=False, nullable=False),
    sa.Column('end_transaction_id', sa.BigInteger(), nullable=True),
    sa.Column('operation_type', sa.SmallInteger(), nullable=False),
    sa.PrimaryKeyConstraint('id', 'transaction_id', name=op.f('pk_oaiserver_schema_version'))
    )
    op.create_index(op.f('ix_oaiserver_schema_version_end_transaction_id'), 'oaiserver_schema_version', ['end_transaction_id'], unique=False)
    op.create_index(op.f('ix_oaiserver_schema_version_operation_type'), 'oaiserver_schema_version', ['operation_type'], unique=False)
    op.create_index(op.f('ix_oaiserver_schema_version_transaction_id'), 'oaiserver_schema_version', ['transaction_id'], unique=False)
    op.create_table('pdfcoverpage_set',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('avail', sa.Text(), nullable=True),
    sa.Column('header_display_type', sa.Text(), nullable=True),
    sa.Column('header_output_string', sa.Text(), nullable=True),
    sa.Column('header_output_image', sa.Text(), nullable=True),
    sa.Column('header_display_position', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_pdfcoverpage_set'))
    )
    op.create_table('ranking_settings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('is_show', sa.Boolean(name='show'), nullable=False),
    sa.Column('new_item_period', sa.Integer(), nullable=False),
    sa.Column('statistical_period', sa.Integer(), nullable=False),
    sa.Column('display_rank', sa.Integer(), nullable=False),
    sa.Column('rankings', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_ranking_settings'))
    )
    op.create_table('resourcelist_indexes',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Boolean(), nullable=False),
    sa.Column('repository_id', sa.BigInteger(), nullable=True),
    sa.Column('resource_dump_manifest', sa.Boolean(), nullable=False),
    sa.Column('url_path', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_resourcelist_indexes')),
    sa.UniqueConstraint('repository_id', name=op.f('uq_resourcelist_indexes_repository_id'))
    )
    op.create_table('search_management',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('default_dis_num', sa.Integer(), nullable=False),
    sa.Column('default_dis_sort_index', sa.Text(), nullable=True),
    sa.Column('default_dis_sort_keyword', sa.Text(), nullable=True),
    sa.Column('sort_setting', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.Column('search_conditions', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.Column('search_setting_all', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.Column('create_date', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_search_management'))
    )
    op.create_table('session_lifetime',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('lifetime', sa.Integer(), nullable=False),
    sa.Column('create_date', sa.DateTime(), nullable=True),
    sa.Column('is_delete', sa.Boolean(name='delete'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_session_lifetime'))
    )
    op.create_table('site_info',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('copy_right', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('keyword', sa.Text(), nullable=True),
    sa.Column('favicon', sa.Text(), nullable=True),
    sa.Column('favicon_name', sa.Text(), nullable=True),
    sa.Column('site_name', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=False),
    sa.Column('notify', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_site_info'))
    )
    op.create_table('sitelicense_info',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('organization_name', sa.Text(), nullable=False),
    sa.Column('domain_name', sa.Text(), nullable=True),
    sa.Column('mail_address', sa.String(length=255), nullable=True),
    sa.Column('receive_mail_flag', sa.String(length=1), nullable=False),
    sa.PrimaryKeyConstraint('organization_id', name=op.f('pk_sitelicense_info'))
    )
    op.create_table('stats_email_address',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email_address', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_stats_email_address'))
    )
    op.create_table('stats_report_target',
    sa.Column('target_id', sa.String(length=100), nullable=False),
    sa.Column('target_name', sa.String(length=255), nullable=False),
    sa.Column('target_unit', sa.String(length=100), nullable=True),
    sa.PrimaryKeyConstraint('target_id', name=op.f('pk_stats_report_target')),
    sa.UniqueConstraint('target_id', name=op.f('uq_stats_report_target_target_id'))
    )
    op.create_table('stats_report_unit',
    sa.Column('unit_id', sa.String(length=100), nullable=False),
    sa.Column('unit_name', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('unit_id', name=op.f('pk_stats_report_unit')),
    sa.UniqueConstraint('unit_id', name=op.f('uq_stats_report_unit_unit_id'))
    )
    op.create_table('widget_design_page',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=100), nullable=True),
    sa.Column('repository_id', sa.String(length=100), nullable=False),
    sa.Column('url', sa.String(length=100), nullable=False),
    sa.Column('template_name', sa.String(length=100), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('settings', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.Column('is_main_layout', sa.Boolean(create_constraint='is_main_layout'), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_widget_design_page')),
    sa.UniqueConstraint('url', name=op.f('uq_widget_design_page_url'))
    )
    op.create_table('widget_design_setting',
    sa.Column('repository_id', sa.String(length=100), nullable=False),
    sa.Column('settings', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.PrimaryKeyConstraint('repository_id', name=op.f('pk_widget_design_setting'))
    )
    op.create_table('widget_items',
    sa.Column('widget_id', sa.Integer(), nullable=False),
    sa.Column('repository_id', sa.String(length=100), nullable=False),
    sa.Column('widget_type', sa.String(length=100), nullable=False),
    sa.Column('settings', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.Column('is_enabled', sa.Boolean(name='enable'), nullable=True),
    sa.Column('is_deleted', sa.Boolean(name='deleted'), nullable=True),
    sa.PrimaryKeyConstraint('widget_id', name=op.f('pk_widget_items'))
    )
    op.create_table('widget_multi_lang_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('widget_id', sa.Integer(), nullable=False),
    sa.Column('lang_code', sa.String(length=3), nullable=False),
    sa.Column('label', sa.String(length=100), nullable=False),
    sa.Column('description_data', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(name='deleted'), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_widget_multi_lang_data'))
    )
    op.create_table('widget_type',
    sa.Column('type_id', sa.String(length=100), nullable=False),
    sa.Column('type_name', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('type_id', name=op.f('pk_widget_type'))
    )
    op.create_table('workflow_action',
    sa.Column('status', sqlalchemy_utils.types.choice.ChoiceType(TimestampMixin.STATUSPOLICY), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('action_name', sa.String(length=255), nullable=True),
    sa.Column('action_desc', sa.Text(), nullable=True),
    sa.Column('action_endpoint', sa.String(length=24), nullable=True),
    sa.Column('action_version', sa.String(length=64), nullable=True),
    sa.Column('action_makedate', sa.DateTime(), nullable=False),
    sa.Column('action_lastdate', sa.DateTime(), nullable=False),
    sa.Column('action_is_need_agree', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_workflow_action'))
    )
    op.create_table('workflow_action_status',
    sa.Column('status', sqlalchemy_utils.types.choice.ChoiceType(ActionStatus.ACTIONSTATUSPOLICY), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('action_status_id', sqlalchemy_utils.types.choice.ChoiceType(ActionStatus.ACTIONSTATUSPOLICY), nullable=False),
    sa.Column('action_status_name', sa.String(length=32), nullable=True),
    sa.Column('action_status_desc', sa.Text(), nullable=True),
    sa.Column('action_scopes', sa.String(length=64), nullable=True),
    sa.Column('action_displays', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_workflow_action_status'))
    )
    op.create_index(op.f('ix_workflow_action_status_action_status_id'), 'workflow_action_status', ['action_status_id'], unique=True)
    op.create_table('accounts_group_admin',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('admin_type', sa.Unicode(length=255), nullable=True),
    sa.Column('admin_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['accounts_group.id'], name=op.f('fk_accounts_group_admin_group_id_accounts_group')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_accounts_group_admin')),
    sa.UniqueConstraint('group_id', 'admin_type', 'admin_id', name=op.f('uq_accounts_group_admin_group_id'))
    )
    op.create_table('accounts_group_members',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('state', sqlalchemy_utils.types.choice.ChoiceType(Membership.MEMBERSHIP_STATE), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('modified', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['accounts_group.id'], name=op.f('fk_accounts_group_members_group_id_accounts_group')),
    sa.ForeignKeyConstraint(['user_id'], ['accounts_user.id'], name=op.f('fk_accounts_group_members_user_id_accounts_user')),
    sa.PrimaryKeyConstraint('user_id', 'group_id', name=op.f('pk_accounts_group_members'))
    )
    op.create_table('harvest_settings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('repository_name', sa.String(length=20), nullable=False),
    sa.Column('base_url', sa.String(length=255), nullable=False),
    sa.Column('from_date', sa.Date(), nullable=True),
    sa.Column('until_date', sa.Date(), nullable=True),
    sa.Column('set_spec', sa.String(length=255), nullable=True),
    sa.Column('metadata_prefix', sa.String(length=255), nullable=False),
    sa.Column('index_id', sa.BigInteger(), nullable=False),
    sa.Column('update_style', sa.String(length=1), nullable=False),
    sa.Column('auto_distribution', sa.String(length=1), nullable=False),
    sa.Column('task_id', sa.String(length=40), nullable=True),
    sa.Column('item_processed', sa.Integer(), nullable=True),
    sa.Column('resumption_token', sa.String(length=255), nullable=True),
    sa.Column('schedule_enable', sa.Boolean(), nullable=True),
    sa.Column('schedule_frequency', sa.String(length=16), nullable=True),
    sa.Column('schedule_details', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['index_id'], ['index.id'], name=op.f('fk_harvest_settings_index_id_index')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_harvest_settings')),
    sa.UniqueConstraint('repository_name', name=op.f('uq_harvest_settings_repository_name'))
    )
    op.create_table('item_type',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name_id', sa.Integer(), nullable=False),
    sa.Column('harvesting_type', sa.Boolean(name='harvesting_type'), nullable=False),
    sa.Column('schema', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.Column('form', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.Column('render', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.Column('tag', sa.Integer(), nullable=False),
    sa.Column('version_id', sa.Integer(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(name='deleted'), nullable=False),
    sa.ForeignKeyConstraint(['name_id'], ['item_type_name.id'], name='fk_item_type_name_id'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_item_type'))
    )
    op.create_table('journal',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), nullable=False),
    sa.Column('publication_title', sa.Text(), nullable=True),
    sa.Column('print_identifier', sa.Text(), nullable=True),
    sa.Column('online_identifier', sa.Text(), nullable=True),
    sa.Column('date_first_issue_online', sa.Text(), nullable=True),
    sa.Column('num_first_vol_online', sa.Text(), nullable=True),
    sa.Column('num_first_issue_online', sa.Text(), nullable=True),
    sa.Column('date_last_issue_online', sa.Text(), nullable=True),
    sa.Column('num_last_vol_online', sa.Text(), nullable=True),
    sa.Column('num_last_issue_online', sa.Text(), nullable=True),
    sa.Column('title_url', sa.Text(), nullable=True),
    sa.Column('first_author', sa.Text(), nullable=True),
    sa.Column('title_id', sa.BigInteger(), nullable=True),
    sa.Column('embargo_info', sa.Text(), nullable=True),
    sa.Column('coverage_depth', sa.Text(), nullable=True),
    sa.Column('coverage_notes', sa.Text(), nullable=True),
    sa.Column('publisher_name', sa.Text(), nullable=True),
    sa.Column('publication_type', sa.Text(), nullable=True),
    sa.Column('date_monograph_published_print', sa.Text(), nullable=True),
    sa.Column('date_monograph_published_online', sa.Text(), nullable=True),
    sa.Column('monograph_volume', sa.Text(), nullable=True),
    sa.Column('monograph_edition', sa.Text(), nullable=True),
    sa.Column('first_editor', sa.Text(), nullable=True),
    sa.Column('parent_publication_title_id', sa.BigInteger(), nullable=True),
    sa.Column('preceding_publication_title_id', sa.BigInteger(), nullable=True),
    sa.Column('access_type', sa.Text(), nullable=True),
    sa.Column('language', sa.Text(), nullable=True),
    sa.Column('title_alternative', sa.Text(), nullable=True),
    sa.Column('title_transcription', sa.Text(), nullable=True),
    sa.Column('ncid', sa.Text(), nullable=True),
    sa.Column('ndl_callno', sa.Text(), nullable=True),
    sa.Column('ndl_bibid', sa.Text(), nullable=True),
    sa.Column('jstage_code', sa.Text(), nullable=True),
    sa.Column('ichushi_code', sa.Text(), nullable=True),
    sa.Column('deleted', sa.Text(), nullable=True),
    sa.Column('is_output', sa.Boolean(name='is_output'), nullable=True),
    sa.Column('owner_user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['index_id'], ['index.id'], name=op.f('fk_journal_index_id_index'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_journal')),
    sa.UniqueConstraint('id', name=op.f('uq_journal_id'))
    )
    op.create_table('shibboleth_user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('shib_eppn', sa.String(length=128), nullable=False),
    sa.Column('weko_uid', sa.Integer(), nullable=True),
    sa.Column('shib_handle', sa.String(length=255), nullable=True),
    sa.Column('shib_role_authority_name', sa.String(length=255), nullable=True),
    sa.Column('shib_page_name', sa.String(length=255), nullable=True),
    sa.Column('shib_active_flag', sa.String(length=255), nullable=True),
    sa.Column('shib_mail', sa.String(length=255), nullable=True),
    sa.Column('shib_user_name', sa.String(length=255), nullable=True),
    sa.Column('shib_ip_range_flag', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['weko_uid'], ['accounts_user.id'], name='fk_shib_weko_user_id'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_shibboleth_user')),
    sa.UniqueConstraint('shib_eppn', name=op.f('uq_shibboleth_user_shib_eppn'))
    )
    op.create_table('sitelicense_ip_address',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('organization_no', sa.Integer(), nullable=False),
    sa.Column('start_ip_address', sa.String(length=16), nullable=False),
    sa.Column('finish_ip_address', sa.String(length=16), nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['sitelicense_info.organization_id'], name=op.f('fk_sitelicense_ip_address_organization_id_sitelicense_info'), ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('organization_id', 'organization_no', name=op.f('pk_sitelicense_ip_address'))
    )
    op.create_table('userprofiles_userprofile',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=255), nullable=True),
    sa.Column('displayname', sa.String(length=255), nullable=True),
    sa.Column('fullname', sa.String(length=100), nullable=False),
    sa.Column('timezone', sa.String(length=255), nullable=False),
    sa.Column('language', sa.String(length=255), nullable=False),
    sa.Column('university', sa.String(length=100), nullable=True),
    sa.Column('department', sa.String(length=100), nullable=True),
    sa.Column('position', sa.String(length=100), nullable=True),
    sa.Column('otherPosition', sa.String(length=100), nullable=True),
    sa.Column('phoneNumber', sa.String(length=15), nullable=True),
    sa.Column('instituteName', sa.String(length=100), nullable=True),
    sa.Column('institutePosition', sa.String(length=255), nullable=True),
    sa.Column('instituteName2', sa.String(length=100), nullable=True),
    sa.Column('institutePosition2', sa.String(length=255), nullable=True),
    sa.Column('instituteName3', sa.String(length=100), nullable=True),
    sa.Column('institutePosition3', sa.String(length=255), nullable=True),
    sa.Column('instituteName4', sa.String(length=100), nullable=True),
    sa.Column('institutePosition4', sa.String(length=255), nullable=True),
    sa.Column('instituteName5', sa.String(length=100), nullable=True),
    sa.Column('institutePosition5', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['accounts_user.id'], name=op.f('fk_userprofiles_userprofile_user_id_accounts_user')),
    sa.PrimaryKeyConstraint('user_id', name=op.f('pk_userprofiles_userprofile')),
    sa.UniqueConstraint('username', name=op.f('uq_userprofiles_userprofile_username'))
    )
    op.create_table('widget_design_page_multi_lang_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('widget_design_page_id', sa.Integer(), nullable=False),
    sa.Column('lang_code', sa.String(length=3), nullable=False),
    sa.Column('title', sa.String(length=100), nullable=True),
    sa.ForeignKeyConstraint(['widget_design_page_id'], ['widget_design_page.id'], name=op.f('fk_widget_design_page_multi_lang_data_widget_design_page_id_widget_design_page')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_widget_design_page_multi_lang_data'))
    )
    op.create_table('workflow_action_feedbackmail',
    sa.Column('status', sqlalchemy_utils.types.choice.ChoiceType(TimestampMixin.STATUSPOLICY), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('activity_id', sa.String(length=24), nullable=False),
    sa.Column('action_id', sa.Integer(), nullable=True),
    sa.Column('feedback_maillist', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.ForeignKeyConstraint(['action_id'], ['workflow_action.id'], name=op.f('fk_workflow_action_feedbackmail_action_id_workflow_action')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_workflow_action_feedbackmail'))
    )
    op.create_index(op.f('ix_workflow_action_feedbackmail_activity_id'), 'workflow_action_feedbackmail', ['activity_id'], unique=False)
    op.create_table('workflow_action_history',
    sa.Column('status', sqlalchemy_utils.types.choice.ChoiceType(TimestampMixin.STATUSPOLICY), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('activity_id', sa.String(length=24), nullable=False),
    sa.Column('action_id', sa.Integer(), nullable=False),
    sa.Column('action_version', sa.String(length=24), nullable=True),
    sa.Column('action_status', sa.String(length=1), nullable=True),
    sa.Column('action_user', sa.Integer(), nullable=True),
    sa.Column('action_date', sa.DateTime(), nullable=False),
    sa.Column('action_comment', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['action_status'], ['workflow_action_status.action_status_id'], name=op.f('fk_workflow_action_history_action_status_workflow_action_status')),
    sa.ForeignKeyConstraint(['action_user'], ['accounts_user.id'], name=op.f('fk_workflow_action_history_action_user_accounts_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_workflow_action_history'))
    )
    op.create_index(op.f('ix_workflow_action_history_activity_id'), 'workflow_action_history', ['activity_id'], unique=False)
    op.create_table('workflow_action_identifier',
    sa.Column('status', sqlalchemy_utils.types.choice.ChoiceType(TimestampMixin.STATUSPOLICY), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('activity_id', sa.String(length=24), nullable=False),
    sa.Column('action_id', sa.Integer(), nullable=True),
    sa.Column('action_identifier_select', sa.Integer(), nullable=True),
    sa.Column('action_identifier_jalc_doi', sa.String(length=255), nullable=True),
    sa.Column('action_identifier_jalc_cr_doi', sa.String(length=255), nullable=True),
    sa.Column('action_identifier_jalc_dc_doi', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['action_id'], ['workflow_action.id'], name=op.f('fk_workflow_action_identifier_action_id_workflow_action')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_workflow_action_identifier'))
    )
    op.create_index(op.f('ix_workflow_action_identifier_activity_id'), 'workflow_action_identifier', ['activity_id'], unique=False)
    op.create_table('workflow_action_journal',
    sa.Column('status', sqlalchemy_utils.types.choice.ChoiceType(TimestampMixin.STATUSPOLICY), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('activity_id', sa.String(length=24), nullable=False),
    sa.Column('action_id', sa.Integer(), nullable=True),
    sa.Column('action_journal', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.ForeignKeyConstraint(['action_id'], ['workflow_action.id'], name=op.f('fk_workflow_action_journal_action_id_workflow_action')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_workflow_action_journal'))
    )
    op.create_index(op.f('ix_workflow_action_journal_activity_id'), 'workflow_action_journal', ['activity_id'], unique=False)
    op.create_table('workflow_activity_action',
    sa.Column('status', sqlalchemy_utils.types.choice.ChoiceType(TimestampMixin.STATUSPOLICY), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('activity_id', sa.String(length=24), nullable=False),
    sa.Column('action_id', sa.Integer(), nullable=True),
    sa.Column('action_status', sa.String(length=1), nullable=False),
    sa.Column('action_comment', sa.Text(), nullable=True),
    sa.Column('action_handler', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['action_id'], ['workflow_action.id'], name=op.f('fk_workflow_activity_action_action_id_workflow_action')),
    sa.ForeignKeyConstraint(['action_status'], ['workflow_action_status.action_status_id'], name=op.f('fk_workflow_activity_action_action_status_workflow_action_status')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_workflow_activity_action'))
    )
    op.create_index(op.f('ix_workflow_activity_action_activity_id'), 'workflow_activity_action', ['activity_id'], unique=False)
    op.create_table('workflow_flow_define',
    sa.Column('status', sqlalchemy_utils.types.choice.ChoiceType(TimestampMixin.STATUSPOLICY), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('flow_id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('flow_name', sa.String(length=255), nullable=True),
    sa.Column('flow_user', sa.Integer(), nullable=True),
    sa.Column('flow_status', sqlalchemy_utils.types.choice.ChoiceType(FlowDefine.FLOWSTATUSPOLICY), nullable=False),
    sa.ForeignKeyConstraint(['flow_user'], ['accounts_user.id'], name=op.f('fk_workflow_flow_define_flow_user_accounts_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_workflow_flow_define'))
    )
    op.create_index(op.f('ix_workflow_flow_define_flow_id'), 'workflow_flow_define', ['flow_id'], unique=True)
    op.create_index(op.f('ix_workflow_flow_define_flow_name'), 'workflow_flow_define', ['flow_name'], unique=True)
    op.create_table('item_type_edit_history',
    sa.Column('created', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('updated', sa.DateTime().with_variant(mysql.DATETIME(fsp=6), 'mysql'),
        default=datetime.utcnow, nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('item_type_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('notes', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.ForeignKeyConstraint(['item_type_id'], ['item_type.id'], name=op.f('fk_item_type_edit_history_item_type_id_item_type')),
    sa.ForeignKeyConstraint(['user_id'], ['accounts_user.id'], name=op.f('fk_item_type_edit_history_user_id_accounts_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_item_type_edit_history'))
    )
    op.create_table('workflow_flow_action',
    sa.Column('status', sqlalchemy_utils.types.choice.ChoiceType(TimestampMixin.STATUSPOLICY), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('flow_id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('action_id', sa.Integer(), nullable=False),
    sa.Column('action_version', sa.String(length=64), nullable=True),
    sa.Column('action_order', sa.Integer(), nullable=False),
    sa.Column('action_condition', sa.String(length=255), nullable=True),
    sa.Column('action_status', sqlalchemy_utils.types.choice.ChoiceType(FlowAction.TATUSPOLICY), nullable=False),
    sa.Column('action_date', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['action_id'], ['workflow_action.id'], name=op.f('fk_workflow_flow_action_action_id_workflow_action')),
    sa.ForeignKeyConstraint(['flow_id'], ['workflow_flow_define.flow_id'], name=op.f('fk_workflow_flow_action_flow_id_workflow_flow_define')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_workflow_flow_action'))
    )
    op.create_index(op.f('ix_workflow_flow_action_flow_id'), 'workflow_flow_action', ['flow_id'], unique=False)
    op.create_table('workflow_workflow',
    sa.Column('status', sqlalchemy_utils.types.choice.ChoiceType(TimestampMixin.STATUSPOLICY), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('flows_id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
    sa.Column('flows_name', sa.String(length=255), nullable=True),
    sa.Column('itemtype_id', sa.Integer(), nullable=False),
    sa.Column('index_tree_id', sa.BigInteger(), nullable=True),
    sa.Column('flow_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['flow_id'], ['workflow_flow_define.id'], name=op.f('fk_workflow_workflow_flow_id_workflow_flow_define')),
    sa.ForeignKeyConstraint(['itemtype_id'], ['item_type.id'], name=op.f('fk_workflow_workflow_itemtype_id_item_type')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_workflow_workflow'))
    )
    op.create_index(op.f('ix_workflow_workflow_flows_id'), 'workflow_workflow', ['flows_id'], unique=True)
    op.create_table('workflow_activity',
    sa.Column('status', sqlalchemy_utils.types.choice.ChoiceType(TimestampMixin.STATUSPOLICY), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('activity_id', sa.String(length=24), nullable=False),
    sa.Column('activity_name', sa.String(length=255), nullable=True),
    sa.Column('item_id', sqlalchemy_utils.types.uuid.UUIDType(), nullable=True),
    sa.Column('workflow_id', sa.Integer(), nullable=False),
    sa.Column('workflow_status', sa.Integer(), nullable=True),
    sa.Column('flow_id', sa.Integer(), nullable=True),
    sa.Column('action_id', sa.Integer(), nullable=True),
    sa.Column('action_status', sa.String(length=1), nullable=True),
    sa.Column('activity_login_user', sa.Integer(), nullable=True),
    sa.Column('activity_update_user', sa.Integer(), nullable=True),
    sa.Column('activity_status', sqlalchemy_utils.types.choice.ChoiceType(Activity.ACTIVITYSTATUSPOLICY), nullable=True),
    sa.Column('activity_start', sa.DateTime(), nullable=False),
    sa.Column('activity_end', sa.DateTime(), nullable=True),
    sa.Column('activity_community_id', sa.Text(), nullable=True),
    sa.Column('activity_confirm_term_of_use', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['action_id'], ['workflow_action.id'], name=op.f('fk_workflow_activity_action_id_workflow_action')),
    sa.ForeignKeyConstraint(['action_status'], ['workflow_action_status.action_status_id'], name=op.f('fk_workflow_activity_action_status_workflow_action_status')),
    sa.ForeignKeyConstraint(['activity_login_user'], ['accounts_user.id'], name=op.f('fk_workflow_activity_activity_login_user_accounts_user')),
    sa.ForeignKeyConstraint(['activity_update_user'], ['accounts_user.id'], name=op.f('fk_workflow_activity_activity_update_user_accounts_user')),
    sa.ForeignKeyConstraint(['flow_id'], ['workflow_flow_define.id'], name=op.f('fk_workflow_activity_flow_id_workflow_flow_define')),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflow_workflow.id'], name=op.f('fk_workflow_activity_workflow_id_workflow_workflow')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_workflow_activity'))
    )
    op.create_index(op.f('ix_workflow_activity_activity_id'), 'workflow_activity', ['activity_id'], unique=True)
    op.create_index(op.f('ix_workflow_activity_item_id'), 'workflow_activity', ['item_id'], unique=False)
    op.create_table('workflow_flow_action_role',
    sa.Column('status', sqlalchemy_utils.types.choice.ChoiceType(TimestampMixin.STATUSPOLICY), nullable=False),
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('flow_action_id', sa.Integer(), nullable=False),
    sa.Column('action_role', sa.Integer(), nullable=True),
    sa.Column('action_role_exclude', sa.Boolean(name='role_exclude'), server_default='0', nullable=False),
    sa.Column('action_user', sa.Integer(), nullable=True),
    sa.Column('action_user_exclude', sa.Boolean(name='user_exclude'), server_default='0', nullable=False),
    sa.ForeignKeyConstraint(['action_role'], ['accounts_role.id'], name=op.f('fk_workflow_flow_action_role_action_role_accounts_role')),
    sa.ForeignKeyConstraint(['action_user'], ['accounts_user.id'], name=op.f('fk_workflow_flow_action_role_action_user_accounts_user')),
    sa.ForeignKeyConstraint(['flow_action_id'], ['workflow_flow_action.id'], name=op.f('fk_workflow_flow_action_role_flow_action_id_workflow_flow_action')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_workflow_flow_action_role'))
    )
    op.create_index(op.f('ix_workflow_flow_action_role_flow_action_id'), 'workflow_flow_action_role', ['flow_action_id'], unique=False)
    op.add_column('communities_community', sa.Column('community_footer', sa.Text(), nullable=False))
    op.add_column('communities_community', sa.Column('community_header', sa.Text(), nullable=False))
    op.add_column('communities_community', sa.Column('root_node_id', sa.BigInteger(), nullable=False))
    op.create_foreign_key(op.f('fk_communities_community_root_node_id_index'), 'communities_community', 'index', ['root_node_id'], ['id'])
    op.add_column('files_files', sa.Column('json', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True))
    op.add_column('files_location', sa.Column('access_key', sa.String(length=128), nullable=True))
    op.add_column('files_location', sa.Column('max_file_size', sa.BigInteger(), nullable=True))
    op.add_column('files_location', sa.Column('quota_size', sa.BigInteger(), nullable=True))
    op.add_column('files_location', sa.Column('secret_key', sa.String(length=128), nullable=True))
    op.add_column('files_location', sa.Column('size', sa.BigInteger(), nullable=True))
    op.add_column('files_location', sa.Column('type', sa.String(length=20), nullable=True))
    op.add_column('files_object', sa.Column('created_user_id', sa.Integer(), nullable=True))
    op.add_column('files_object', sa.Column('is_show', sa.Boolean(name='is_show'), nullable=False))
    op.add_column('files_object', sa.Column('is_thumbnail', sa.Boolean(name='is_thumbnail'), nullable=False))
    op.add_column('files_object', sa.Column('updated_user_id', sa.Integer(), nullable=True))
    # ### end Alembic commands ###


def downgrade():
    """Downgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('files_object', 'updated_user_id')
    op.drop_column('files_object', 'is_thumbnail')
    op.drop_column('files_object', 'is_show')
    op.drop_column('files_object', 'created_user_id')
    op.drop_column('files_location', 'type')
    op.drop_column('files_location', 'size')
    op.drop_column('files_location', 'secret_key')
    op.drop_column('files_location', 'quota_size')
    op.drop_column('files_location', 'max_file_size')
    op.drop_column('files_location', 'access_key')
    op.drop_column('files_files', 'json')
    op.drop_constraint(op.f('fk_communities_community_root_node_id_index'), 'communities_community', type_='foreignkey')
    op.drop_column('communities_community', 'root_node_id')
    op.drop_column('communities_community', 'community_header')
    op.drop_column('communities_community', 'community_footer')
    op.drop_index(op.f('ix_workflow_flow_action_role_flow_action_id'), table_name='workflow_flow_action_role')
    op.drop_table('workflow_flow_action_role')
    op.drop_index(op.f('ix_workflow_activity_item_id'), table_name='workflow_activity')
    op.drop_index(op.f('ix_workflow_activity_activity_id'), table_name='workflow_activity')
    op.drop_table('workflow_activity')
    op.drop_index(op.f('ix_workflow_workflow_flows_id'), table_name='workflow_workflow')
    op.drop_table('workflow_workflow')
    op.drop_index(op.f('ix_workflow_flow_action_flow_id'), table_name='workflow_flow_action')
    op.drop_table('workflow_flow_action')
    op.drop_table('item_type_edit_history')
    op.drop_index(op.f('ix_workflow_flow_define_flow_name'), table_name='workflow_flow_define')
    op.drop_index(op.f('ix_workflow_flow_define_flow_id'), table_name='workflow_flow_define')
    op.drop_table('workflow_flow_define')
    op.drop_index(op.f('ix_workflow_activity_action_activity_id'), table_name='workflow_activity_action')
    op.drop_table('workflow_activity_action')
    op.drop_index(op.f('ix_workflow_action_journal_activity_id'), table_name='workflow_action_journal')
    op.drop_table('workflow_action_journal')
    op.drop_index(op.f('ix_workflow_action_identifier_activity_id'), table_name='workflow_action_identifier')
    op.drop_table('workflow_action_identifier')
    op.drop_index(op.f('ix_workflow_action_history_activity_id'), table_name='workflow_action_history')
    op.drop_table('workflow_action_history')
    op.drop_index(op.f('ix_workflow_action_feedbackmail_activity_id'), table_name='workflow_action_feedbackmail')
    op.drop_table('workflow_action_feedbackmail')
    op.drop_table('widget_design_page_multi_lang_data')
    op.drop_table('userprofiles_userprofile')
    op.drop_table('sitelicense_ip_address')
    op.drop_table('shibboleth_user')
    op.drop_table('journal')
    op.drop_table('item_type')
    op.drop_table('harvest_settings')
    op.drop_table('accounts_group_members')
    op.drop_table('accounts_group_admin')
    op.drop_index(op.f('ix_workflow_action_status_action_status_id'), table_name='workflow_action_status')
    op.drop_table('workflow_action_status')
    op.drop_table('workflow_action')
    op.drop_table('widget_type')
    op.drop_table('widget_multi_lang_data')
    op.drop_table('widget_items')
    op.drop_table('widget_design_setting')
    op.drop_table('widget_design_page')
    op.drop_table('stats_report_unit')
    op.drop_table('stats_report_target')
    op.drop_table('stats_email_address')
    op.drop_table('sitelicense_info')
    op.drop_table('site_info')
    op.drop_table('session_lifetime')
    op.drop_table('search_management')
    op.drop_table('resourcelist_indexes')
    op.drop_table('ranking_settings')
    op.drop_table('pdfcoverpage_set')
    op.drop_index(op.f('ix_oaiserver_schema_version_transaction_id'), table_name='oaiserver_schema_version')
    op.drop_index(op.f('ix_oaiserver_schema_version_operation_type'), table_name='oaiserver_schema_version')
    op.drop_index(op.f('ix_oaiserver_schema_version_end_transaction_id'), table_name='oaiserver_schema_version')
    op.drop_table('oaiserver_schema_version')
    op.drop_table('oaiserver_schema')
    op.drop_index(op.f('ix_oaiserver_identify_emails'), table_name='oaiserver_identify')
    op.drop_table('oaiserver_identify')
    op.drop_table('oaiharvester_configs')
    op.drop_table('mail_config')
    op.drop_table('loganalysis_restricted_ip_address')
    op.drop_table('loganalysis_restricted_crawler_list')
    op.drop_table('journal_export_processing')
    op.drop_index(op.f('ix_item_type_version_transaction_id'), table_name='item_type_version')
    op.drop_index(op.f('ix_item_type_version_operation_type'), table_name='item_type_version')
    op.drop_index(op.f('ix_item_type_version_end_transaction_id'), table_name='item_type_version')
    op.drop_table('item_type_version')
    op.drop_table('item_type_property')
    op.drop_index('uq_item_type_name_name', table_name='item_type_name')
    op.drop_table('item_type_name')
    op.drop_index(op.f('ix_item_type_mapping_version_transaction_id'), table_name='item_type_mapping_version')
    op.drop_index(op.f('ix_item_type_mapping_version_operation_type'), table_name='item_type_mapping_version')
    op.drop_index(op.f('ix_item_type_mapping_version_end_transaction_id'), table_name='item_type_mapping_version')
    op.drop_table('item_type_mapping_version')
    op.drop_table('item_type_mapping')
    op.drop_index(op.f('ix_item_metadata_version_transaction_id'), table_name='item_metadata_version')
    op.drop_index(op.f('ix_item_metadata_version_operation_type'), table_name='item_metadata_version')
    op.drop_index(op.f('ix_item_metadata_version_end_transaction_id'), table_name='item_metadata_version')
    op.drop_table('item_metadata_version')
    op.drop_table('item_metadata')
    op.drop_table('institution_name')
    op.drop_table('index_style')
    op.drop_table('index')
    op.drop_table('harvest_logs')
    op.drop_table('file_permission')
    op.drop_index(op.f('ix_file_metadata_version_transaction_id'), table_name='file_metadata_version')
    op.drop_index(op.f('ix_file_metadata_version_operation_type'), table_name='file_metadata_version')
    op.drop_index(op.f('ix_file_metadata_version_end_transaction_id'), table_name='file_metadata_version')
    op.drop_table('file_metadata_version')
    op.drop_table('file_metadata')
    op.drop_table('feedback_mail_list')
    op.drop_table('feedback_mail_history')
    op.drop_table('feedback_mail_failed')
    op.drop_table('feedback_email_setting')
    op.drop_table('doi_identifier')
    op.drop_table('changelist_indexes')
    op.drop_table('billing_permission')
    op.drop_table('authors_prefix_settings')
    op.drop_table('authors')
    op.drop_table('api_certificate')
    op.drop_table('admin_settings')
    op.drop_table('admin_lang_settings')
    op.drop_index(op.f('ix_accounts_group_name'), table_name='accounts_group')
    op.drop_table('accounts_group')
    # ### end Alembic commands ###
