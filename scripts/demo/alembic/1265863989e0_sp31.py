#
# This file is part of Invenio.
# Copyright (C) 2016 CERN.
#
# Invenio is free software; you can redistribute it
# and/or modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# Invenio is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Invenio; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
# MA 02111-1307, USA.
#
# In applying this license, CERN does not
# waive the privileges and immunities granted to it by virtue of its status
# as an Intergovernmental Organization or submit itself to any jurisdiction.

"""SP31"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql, postgresql
from sqlalchemy_utils.types import JSONType

# revision identifiers, used by Alembic.
revision = '1265863989e0'
down_revision = 'd797e4ee2c76'
branch_labels = ()
depends_on = None


def upgrade():
    """Upgrade database from SP28 to SP31."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('resync_indexes',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('index_id', sa.BigInteger(), nullable=True),
    sa.Column('repository_name', sa.String(length=50), nullable=False),
    sa.Column('from_date', sa.DateTime(), nullable=True),
    sa.Column('to_date', sa.DateTime(), nullable=True),
    sa.Column('resync_save_dir', sa.String(length=50), nullable=False),
    sa.Column('resync_mode', sa.String(length=20), nullable=False),
    sa.Column('saving_format', sa.String(length=10), nullable=False),
    sa.Column('base_url', sa.String(length=255), nullable=False),
    sa.Column('is_running', sa.Boolean(), nullable=True),
    sa.Column('interval_by_day', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.String(length=40), nullable=True),
    sa.Column('result', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.ForeignKeyConstraint(['index_id'], ['index.id'], name=op.f('fk_resync_indexes_index_id_index'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_resync_indexes'))
    )
    op.create_table('resync_logs',
    sa.Column('created', sa.DateTime(), nullable=False),
    sa.Column('updated', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('resync_indexes_id', sa.Integer(), nullable=True),
    sa.Column('log_type', sa.String(length=10), nullable=True),
    sa.Column('task_id', sa.String(length=40), nullable=True),
    sa.Column('start_time', sa.DateTime(), nullable=True),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(length=10), nullable=False),
    sa.Column('errmsg', sa.String(length=255), nullable=True),
    sa.Column('counter', sa.JSON().with_variant(
            postgresql.JSONB(none_as_null=True),
            'postgresql',
        ).with_variant(
            JSONType(),
            'sqlite',
        ).with_variant(
            JSONType(),
            'mysql',
        ),
        default=lambda: dict(), nullable=True),
    sa.ForeignKeyConstraint(['resync_indexes_id'], ['resync_indexes.id'], name=op.f('fk_resync_logs_resync_indexes_id_resync_indexes'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_resync_logs'))
    )
    op.create_unique_constraint(op.f('uq_admin_lang_settings_lang_code'), 'admin_lang_settings', ['lang_code'])
    op.create_unique_constraint(op.f('uq_api_certificate_api_code'), 'api_certificate', ['api_code'])
    op.create_unique_constraint(op.f('uq_authors_id'), 'authors', ['id'])
    op.add_column('authors_prefix_settings', sa.Column('scheme', sa.Text(), nullable=True))
    op.create_unique_constraint(op.f('uq_authors_prefix_settings_id'), 'authors_prefix_settings', ['id'])
    op.create_unique_constraint(op.f('uq_authors_prefix_settings_scheme'), 'authors_prefix_settings', ['scheme'])
    op.create_unique_constraint(op.f('uq_billing_permission_user_id'), 'billing_permission', ['user_id'])
    op.create_unique_constraint(op.f('uq_doi_identifier_id'), 'doi_identifier', ['id'])
    op.create_unique_constraint(op.f('uq_index_id'), 'index', ['id'])
    op.create_unique_constraint(op.f('uq_journal_id'), 'journal', ['id'])
    op.create_unique_constraint(op.f('uq_journal_export_processing_id'), 'journal_export_processing', ['id'])
    op.create_unique_constraint(op.f('uq_stats_report_target_target_id'), 'stats_report_target', ['target_id'])
    op.create_unique_constraint(op.f('uq_stats_report_unit_unit_id'), 'stats_report_unit', ['unit_id'])
    op.add_column('workflow_activity', sa.Column('shared_user_id', sa.Integer(), nullable=True))
    op.add_column('workflow_activity', sa.Column('title', sa.Text(), nullable=True))
    # ### end Alembic commands ###


def downgrade():
    """Downgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('workflow_activity', 'title')
    op.drop_column('workflow_activity', 'shared_user_id')
    op.drop_constraint(op.f('uq_stats_report_unit_unit_id'), 'stats_report_unit', type_='unique')
    op.drop_constraint(op.f('uq_stats_report_target_target_id'), 'stats_report_target', type_='unique')
    op.drop_constraint(op.f('uq_journal_export_processing_id'), 'journal_export_processing', type_='unique')
    op.drop_constraint(op.f('uq_journal_id'), 'journal', type_='unique')
    op.drop_constraint(op.f('uq_index_id'), 'index', type_='unique')
    op.drop_constraint(op.f('uq_doi_identifier_id'), 'doi_identifier', type_='unique')
    op.drop_constraint(op.f('uq_billing_permission_user_id'), 'billing_permission', type_='unique')
    op.drop_constraint(op.f('uq_authors_prefix_settings_scheme'), 'authors_prefix_settings', type_='unique')
    op.drop_constraint(op.f('uq_authors_prefix_settings_id'), 'authors_prefix_settings', type_='unique')
    op.drop_column('authors_prefix_settings', 'scheme')
    op.drop_constraint(op.f('uq_authors_id'), 'authors', type_='unique')
    op.drop_constraint(op.f('uq_api_certificate_api_code'), 'api_certificate', type_='unique')
    op.drop_constraint(op.f('uq_admin_lang_settings_lang_code'), 'admin_lang_settings', type_='unique')
    op.drop_table('resync_logs')
    op.drop_table('resync_indexes')
    # ### end Alembic commands ###
