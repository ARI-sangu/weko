GLOB sdist-make: /code/modules/weko-records/setup.py
c1 recreate: /code/modules/weko-records/.tox/c1
c1 installdeps: pytest>=3, pytest-cov, -rrequirements2.txt
c1 inst: /code/modules/weko-records/.tox/.tmp/package/1/weko-records-0.1.0.dev20170000.zip
c1 installed: alabaster==0.7.13,alembic==0.9.6,amqp==2.6.0,angular-gettext-babel==0.3,aniso8601==8.0.0,arrow==0.12.1,asn1crypto==0.23.0,atomicwrites==1.4.1,attrs==17.4.0,b2handle==1.1.2,Babel==2.5.1,bagit==1.7.0,beautifulsoup4==4.9.3,bibtexparser==1.0.1,billiard==3.6.3.0,binaryornot==0.4.4,bleach==3.1.0,blinker==1.4,boto3==1.7.84,botocore==1.10.84,cachelib==0.1,cachetools==4.2.4,cchardet==2.1.1,celery==4.4.4,certifi==2017.11.5,cffi==1.11.2,chardet==3.0.4,citeproc-py==0.5.1,citeproc-py-styles==0.1.2,click==6.7,cookiecutter==1.6.0,counter-robots==2018.6,coverage==6.2,cryptography==2.1.4,datacite==1.0.1,DateTime==4.9,decorator==4.1.2,defusedxml==0.5.0,dictdiffer==0.7.0,distlib==0.3.6,dnspython==2.2.1,docutils==0.18.1,dojson==1.3.2,elasticsearch==6.1.1,elasticsearch-dsl==6.4.0,elementpath==1.0.6,email-validator==1.0.5,entrypoints==0.2.3,feedgen==0.7.0,filelock==3.4.1,Flask==1.1.0,Flask-Admin==1.5.3,Flask-Alembic==2.0.1,Flask-Assets==0.12,Flask-BabelEx==0.9.4,Flask-Breadcrumbs==0.5.0,Flask-Caching==1.10.1,Flask-CeleryExt==0.3.4,Flask-Collect==1.2.2,Flask-Cors==3.0.3,Flask-DebugToolbar==0.13.1,Flask-IIIF==0.6.1,Flask-KVSession==0.6.2,Flask-Limiter==1.1.0,Flask-Login==0.4.1,Flask-Mail==0.9.1,flask-marshmallow==0.14.0,Flask-Menu==0.6.0,-e git+https://github.com/RCOSDP/flask-oauthlib.git@83148ee01e9da37a8a1134febe83bc32b95bac6e#egg=Flask_OAuthlib,Flask-Plugins==1.6.1,Flask-Principal==0.4.0,Flask-RESTful==0.3.8,Flask-Security==3.0.0,flask-shell-ipython==0.4.1,Flask-Sitemap==0.4.0,Flask-SQLAlchemy==2.3.2,flask-talisman==0.4.1,Flask-WTF==0.14.3,-e git+https://github.com/RCOSDP/pyfpdf.git@f9b032148283d535cabc7789858081c80de36fef#egg=fpdf,frozendict==2.3.8,fs==0.5.4,ftfy==4.4.3,future==0.16.0,github3.py==1.1.0,html5lib==1.0.1,idna==2.6,iiif-prezi==0.3.0,imagesize==1.4.1,importlib-metadata==4.8.3,importlib-resources==5.4.0,infinity==1.4,intervals==0.8.0,invenio-access==1.1.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_accounts&subdirectory=modules/invenio-accounts,invenio-admin==1.1.2,invenio-app==1.1.0,invenio-assets==1.0.0,invenio-base==1.0.2,invenio-cache==1.0.0,invenio-celery==1.1.3,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_communities&subdirectory=modules/invenio-communities,invenio-config==1.0.0,invenio-csl-rest==1.0.0a1,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_db&subdirectory=modules/invenio-db,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_deposit&subdirectory=modules/invenio-deposit,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_files_rest&subdirectory=modules/invenio-files-rest,invenio-formatter==1.0.0b3,invenio-i18n==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_iiif&subdirectory=modules/invenio-iiif,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_indexer&subdirectory=modules/invenio-indexer,invenio-jsonschemas==1.0.0,invenio-logging==1.0.0b3,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_mail&subdirectory=modules/invenio-mail,invenio-marc21==1.0.0a8,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_oaiharvester&subdirectory=modules/invenio-oaiharvester,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_oaiserver&subdirectory=modules/invenio-oaiserver,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_oauth2server&subdirectory=modules/invenio-oauth2server,invenio-oauthclient==1.0.0,invenio-pidrelations==1.0.0a4,invenio-pidstore==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_previewer&subdirectory=modules/invenio-previewer,invenio-query-parser==0.6.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_queues&subdirectory=modules/invenio-queues,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_records&subdirectory=modules/invenio-records,invenio-records-files==1.0.0a10,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_records_rest&subdirectory=modules/invenio-records-rest,invenio-records-ui==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_resourcesyncclient&subdirectory=modules/invenio-resourcesyncclient,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_resourcesyncserver&subdirectory=modules/invenio-resourcesyncserver,invenio-rest==1.1.2,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_s3&subdirectory=modules/invenio-s3,-e git+https://github.com/RCOSDP/invenio-search.git@cff9744c5dc651893a9c51672c5b8da9adc21e16#egg=invenio_search,-e git+https://github.com/RCOSDP/invenio-search-ui.git@74bd3b2990ff27b39e01b6b31be9a0b5fda3dd0f#egg=invenio_search_ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_stats&subdirectory=modules/invenio-stats,invenio-theme==1.0.0b4,ipaddress==1.0.19,ipython==6.2.1,ipython-genutils==0.2.0,itsdangerous==0.24,jedi==0.11.0,Jinja2==2.10.1,jinja2-cli==0.6.0,jinja2-time==0.2.0,jmespath==0.10.0,jsmin==2.2.2,jsonpatch==1.21,jsonpath-ng==1.5.2,jsonpointer==1.14,jsonref==0.1,jsonresolver==0.2.1,jsonschema==2.6.0,jupyter-client==5.2.2,jupyter-core==4.4.0,-e git+https://github.com/RCOSDP/kombu.git@f204fdf078d5e94393c86693f545e2d011f620f5#egg=kombu,limits==1.2.1,lxml==4.1.1,Mako==1.0.7,MarkupSafe==1.1.1,marshmallow==2.20.1,marshmallow-sqlalchemy==0.23.1,maxminddb==1.5.2,maxminddb-geolite2==2017.803,mistune==0.8.3,mock==5.0.2,more-itertools==8.10.0,msgpack==0.6.2,nbconvert==5.3.1,nbformat==4.4.0,netaddr==0.8.0,node-semver==0.1.1,numpy==1.16.1,oauthlib==2.1.0,ordereddict==1.1,packaging==21.3,pandocfilters==1.4.2,parso==0.1.0,passlib==1.7.1,pbr==5.11.1,pexpect==4.3.0,pickleshare==0.7.4,Pillow==5.4.1,platformdirs==2.4.0,pluggy==0.13.1,ply==3.11,poyo==0.4.1,prompt-toolkit==1.0.15,psycopg2==2.7.3.2,ptyprocess==0.5.2,py==1.11.0,pycparser==2.18,Pygments==2.2.0,PyJWT==1.5.3,PyLD==2.0.3,pyparsing==3.1.0,-e git+https://github.com/RCOSDP/PyPDF2.git@fefc684a3a74aff6f99e5dff24f9b4dd1c95169d#egg=PyPDF2,pyPEG2==2.15.2,pytest==4.2.0,pytest-cov==2.9.0,python-dateutil==2.6.1,python-editor==1.0.3,python-geoip==1.2,pytz==2017.3,pyzmq==17.0.0,redis==2.10.6,requests==2.18.4,requests-oauthlib==1.1.0,resync==1.0.9,s3fs==0.1.6,s3transfer==0.1.13,selenium==3.141.0,Sickle==0.6.4,simplegeneric==0.8.1,simplejson==3.12.0,simplekv==0.11.2,six==1.16.0,snowballstemmer==2.2.0,soupsieve==2.3.2.post1,speaklater==1.3,Sphinx==1.8.4,sphinxcontrib-serializinghtml==1.1.5,sphinxcontrib-websupport==1.2.4,SQLAlchemy==1.2.19,SQLAlchemy-Continuum==1.3.6,SQLAlchemy-Utils==0.35.0,stevedore==3.5.2,sword3common==0.1.1,testpath==0.3.1,toml==0.10.2,tornado==4.5.3,tox==3.28.0,traitlets==4.3.2,typing_extensions==4.1.1,ua-parser==0.7.3,uritemplate==4.1.1,uritools==2.1.0,urllib3==1.22,uWSGI==2.0.21,uwsgitop==0.11,validators==0.12.0,vine==1.3.0,virtualenv==20.17.1,virtualenv-clone==0.5.7,virtualenvwrapper==4.8.4,Wand==0.6.1,wcwidth==0.1.7,webargs==5.5.2,webassets==0.12.1,webencodings==0.5.1,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_accounts&subdirectory=modules/weko-accounts,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_admin&subdirectory=modules/weko-admin,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_authors&subdirectory=modules/weko-authors,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_bulkupdate&subdirectory=modules/weko-bulkupdate,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_deposit&subdirectory=modules/weko-deposit,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_gridlayout&subdirectory=modules/weko-gridlayout,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_groups&subdirectory=modules/weko-groups,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_handle&subdirectory=modules/weko-handle,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_index_tree&subdirectory=modules/weko-index-tree,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_indextree_journal&subdirectory=modules/weko-indextree-journal,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_items_autofill&subdirectory=modules/weko-items-autofill,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_items_ui&subdirectory=modules/weko-items-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_itemtypes_ui&subdirectory=modules/weko-itemtypes-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_logging&subdirectory=modules/weko-logging,weko-records @ file:///code/modules/weko-records/.tox/.tmp/package/1/weko-records-0.1.0.dev20170000.zip,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_records_ui&subdirectory=modules/weko-records-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_redis&subdirectory=modules/weko-redis,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_schema_ui&subdirectory=modules/weko-schema-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_search_ui&subdirectory=modules/weko-search-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_sitemap&subdirectory=modules/weko-sitemap,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_swordserver&subdirectory=modules/weko-swordserver,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_theme&subdirectory=modules/weko-theme,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_user_profiles&subdirectory=modules/weko-user-profiles,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_workflow&subdirectory=modules/weko-workflow,Werkzeug==0.15.2,whichcraft==0.4.1,WTForms==2.1,WTForms-Alchemy==0.16.5,WTForms-Components==0.10.3,xmlschema==0.9.30,xmltodict==0.12.0,zipp==3.6.0,zope.interface==5.5.2
c1 run-test-pre: PYTHONHASHSEED='3578872901'
c1 run-test: commands[0] | pytest --cov=weko_records tests -v -s -vv --cov-branch --cov-report=term --cov-report=xml --cov-config=tox.ini --basetemp=/code/modules/weko-records/.tox/c1/tmp
============================= test session starts ==============================
platform linux -- Python 3.6.15, pytest-4.2.0, py-1.11.0, pluggy-0.13.1 -- /code/modules/weko-records/.tox/c1/bin/python
cachedir: .tox/c1/.pytest_cache
rootdir: /code/modules/weko-records, inifile:
plugins: celery-4.4.4, cov-2.9.0
collecting ... collected 124 items

tests/test_api.py::test_recordbase ERROR
tests/test_api.py::test_itemtypenames ERROR
tests/test_api.py::test_itemtypes_create ERROR
tests/test_api.py::test_itemtypes_update ERROR
tests/test_api.py::test_itemtypes_update_item_type ERROR
tests/test_api.py::test_itemtypes_get_record ERROR
tests/test_api.py::test_itemtypes_get_records ERROR
tests/test_api.py::test_itemtypes_get_by_id ERROR
tests/test_api.py::test_itemtypes_get_by_name_id ERROR
tests/test_api.py::test_itemtypes_get_records_by_name_id ERROR
tests/test_api.py::test_itemtypes_get_latest ERROR
tests/test_api.py::test_itemtypes_get_latest_with_item_type ERROR
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting ERROR
tests/test_api.py::test_itemtypes_get_all ERROR
tests/test_api.py::test_itemtypes_commit ERROR
tests/test_api.py::test_itemtypes_delete ERROR
tests/test_api.py::test_itemtypes_revert ERROR
tests/test_api.py::test_itemtypes_restore ERROR
tests/test_api.py::test_item_type_edit_history ERROR
tests/test_api.py::test_mapping_create ERROR
tests/test_api.py::test_mapping_get_record ERROR
tests/test_api.py::test_mapping_commit ERROR
tests/test_api.py::test_mapping_delete ERROR
tests/test_api.py::test_mapping_revert ERROR
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids ERROR
tests/test_api.py::test_item_type_props ERROR
tests/test_api.py::test_item_metadata_create ERROR
tests/test_api.py::test_item_metadata_get_record ERROR
tests/test_api.py::test_item_metadata_get_records ERROR
tests/test_api.py::test_item_metadata_get_by_item_type_id ERROR
tests/test_api.py::test_item_metadata_get_by_object_id ERROR
tests/test_api.py::test_item_metadata_commit ERROR
tests/test_api.py::test_item_metadata_delete ERROR
tests/test_api.py::test_item_metadata_revert ERROR
tests/test_api.py::test_files_metadata_create ERROR
tests/test_api.py::test_files_metadata_get_record ERROR
tests/test_api.py::test_files_metadata_get_records ERROR
tests/test_api.py::test_files_metadata_update_data ERROR
tests/test_api.py::test_files_metadata_commit ERROR
tests/test_api.py::test_files_metadata_delete ERROR
tests/test_api.py::test_files_metadata_revert ERROR
tests/test_api.py::test_site_license_get_records ERROR
tests/test_api.py::test_site_license_update ERROR
tests/test_api.py::test_wekorecord_get_record ERROR
tests/test_api.py::test_feedback_mail_list_create_and_update ERROR
tests/test_api.py::test_feedback_mail_list_delete ERROR
tests/test_api.py::test_item_link_update ERROR
tests/test_api.py::test_item_link_bulk_create ERROR
tests/test_api.py::test_item_link_bulk_update ERROR
tests/test_api.py::test_item_link_bulk_delete ERROR
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype ERROR
tests/test_serializers_entry.py::test_weko_feed_entry PASSED
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json] ERROR
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json] ERROR
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json] ERROR
tests/test_serializers_opensearch_response.py::test_add_link_header ERROR
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers ERROR
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers ERROR
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True] ERROR
tests/test_serializers_utils.py::test_get_mapping PASSED
tests/test_serializers_utils.py::test_get_full_mapping PASSED
tests/test_serializers_utils.py::test_get_mapping_inactive_show_list PASSED
tests/test_serializers_utils.py::test_get_metadata_from_map PASSED
tests/test_serializers_utils.py::test_get_attribute_schema ERROR
tests/test_serializers_utils.py::test_get_item_type_name_id ERROR
tests/test_serializers_utils.py::test_get_item_type_name ERROR
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True] ERROR
tests/test_utils.py::test_json_loader ERROR
tests/test_utils.py::test_copy_field_test PASSED
tests/test_utils.py::test_convert_range_value PASSED
tests/test_utils.py::test_convert_date_range_value PASSED
tests/test_utils.py::test_makeDateRangeValue PASSED
tests/test_utils.py::test_get_value_from_dict PASSED
tests/test_utils.py::test_get_values_from_dict PASSED
tests/test_utils.py::test_copy_value_xml_path exception
PASSED
tests/test_utils.py::test_copy_value_json_path PASSED
tests/test_utils.py::test_copy_values_json_path PASSED
tests/test_utils.py::test_set_timestamp PASSED
tests/test_utils.py::test_sort_records PASSED
tests/test_utils.py::test_sort_op PASSED
tests/test_utils.py::test_find_items PASSED
tests/test_utils.py::test_get_all_items PASSED
tests/test_utils.py::test_get_all_items2 PASSED
tests/test_utils.py::test_to_orderdict PASSED
tests/test_utils.py::test_get_options_and_order_list ERROR
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True] ERROR
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False] ERROR
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False] ERROR
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False] ERROR
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False] ERROR
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False] ERROR
tests/test_utils.py::test_sort_meta_data_by_options_exception ERROR
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id ERROR
tests/test_utils.py::test_get_keywords_data_load ERROR
tests/test_utils.py::test_is_valid_openaire_type ERROR
tests/test_utils.py::test_check_has_attribute_value PASSED
tests/test_utils.py::test_get_attribute_value_all_items PASSED
tests/test_utils.py::test_check_input_value PASSED
tests/test_utils.py::test_remove_key PASSED
tests/test_utils.py::test_remove_keys PASSED
tests/test_utils.py::test_remove_multiple PASSED
tests/test_utils.py::test_check_to_upgrade_version PASSED
tests/test_utils.py::test_remove_weko2_special_character PASSED
tests/test_utils.py::test_selected_value_by_language PASSED
tests/test_utils.py::test_selected_value_by_language_2 PASSED
tests/test_utils.py::test_selected_value_by_language_3 PASSED
tests/test_utils.py::test_check_info_in_metadata PASSED
tests/test_utils.py::test_get_value_and_lang_by_key PASSED
tests/test_utils.py::test_get_value_by_selected_lang PASSED
tests/test_utils.py::test_get_show_list_author PASSED
tests/test_utils.py::test_format_creates PASSED
tests/test_utils.py::test_get_creator PASSED
tests/test_utils.py::test_get_creator_by_languages PASSED
tests/test_utils.py::test_get_affiliation PASSED
tests/test_utils.py::test_get_author_has_language PASSED
tests/test_utils.py::test_add_author PASSED
tests/test_utils.py::test_convert_bibliographic PASSED
tests/test_utils.py::test_custom_record_medata_for_export ERROR
tests/test_utils.py::test_replace_fqdn PASSED
tests/test_utils.py::test_replace_fqdn_of_file_metadata PASSED
tests/test_weko_records.py::test_version PASSED
tests/test_weko_records.py::test_init PASSED
tests/test_weko_records.py::test_feed_entry ERROR
tests/test_weko_records.py::test_weko_feed_generator ERROR

==================================== ERRORS ====================================
______________________ ERROR at setup of test_recordbase _______________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4537df60>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a458d6f60>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4537df60>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a453805c0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a453805c0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4537df60>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4537df60>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4537df60>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a453805c0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4537df60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4537df60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_____________________ ERROR at setup of test_itemtypenames _____________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a45380828>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a458d6080>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a45380828>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a45380898>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a45380898>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a45380828>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a45380828>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a45380828>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a45380898>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a45380828>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a45380828>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
___________________ ERROR at setup of test_itemtypes_create ____________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44a8ff98>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a452675c0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44a8ff98>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44904438>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44904438>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44a8ff98>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44a8ff98>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44a8ff98>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44904438>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44a8ff98>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44a8ff98>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
___________________ ERROR at setup of test_itemtypes_update ____________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44944f98>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a45213588>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44944f98>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a448f64e0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a448f64e0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44944f98>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44944f98>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44944f98>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a448f64e0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44944f98>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44944f98>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
______________ ERROR at setup of test_itemtypes_update_item_type _______________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44c1ff98>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a449448d0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44c1ff98>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a448a1ac8>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a448a1ac8>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44c1ff98>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44c1ff98>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44c1ff98>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a448a1ac8>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44c1ff98>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44c1ff98>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_itemtypes_get_record __________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4523af60>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a4523ada0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4523af60>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a447964a8>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a447964a8>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4523af60>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4523af60>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4523af60>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a447964a8>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4523af60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4523af60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_itemtypes_get_records _________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44ba5b70>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a447c8e48>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44ba5b70>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a446ffa90>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a446ffa90>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44ba5b70>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44ba5b70>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44ba5b70>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a446ffa90>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44ba5b70>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44ba5b70>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
__________________ ERROR at setup of test_itemtypes_get_by_id __________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44b8f080>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a44ca2e48>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44b8f080>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a446e84a8>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a446e84a8>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44b8f080>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44b8f080>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44b8f080>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a446e84a8>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44b8f080>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44b8f080>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_______________ ERROR at setup of test_itemtypes_get_by_name_id ________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a449aeb38>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a449aee10>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a449aeb38>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a445099b0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a445099b0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a449aeb38>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a449aeb38>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a449aeb38>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a445099b0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a449aeb38>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a449aeb38>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
___________ ERROR at setup of test_itemtypes_get_records_by_name_id ____________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a447b9c50>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a447f6f98>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a447b9c50>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a445fe438>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a445fe438>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a447b9c50>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a447b9c50>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a447b9c50>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a445fe438>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a447b9c50>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a447b9c50>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_itemtypes_get_latest __________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a447f6da0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a44b30be0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a447f6da0>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44ea4240>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44ea4240>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a447f6da0>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a447f6da0>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a447f6da0>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44ea4240>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a447f6da0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a447f6da0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
__________ ERROR at setup of test_itemtypes_get_latest_with_item_type __________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a449c12e8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a44b30860>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a449c12e8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44a54470>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44a54470>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a449c12e8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a449c12e8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a449c12e8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44a54470>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a449c12e8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a449c12e8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
________ ERROR at setup of test_itemtypes_get_latest_custorm_harvesting ________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44a54550>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a44a45080>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44a54550>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a447ecf28>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a447ecf28>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44a54550>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44a54550>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44a54550>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a447ecf28>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44a54550>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44a54550>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
___________________ ERROR at setup of test_itemtypes_get_all ___________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a449c1b70>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a44b30a58>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a449c1b70>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a449c1630>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a449c1630>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a449c1b70>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a449c1b70>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a449c1b70>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a449c1630>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a449c1b70>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a449c1b70>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
___________________ ERROR at setup of test_itemtypes_commit ____________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a445d69e8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a445d6128>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a445d69e8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44e67208>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44e67208>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a445d69e8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a445d69e8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a445d69e8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44e67208>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a445d69e8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a445d69e8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
___________________ ERROR at setup of test_itemtypes_delete ____________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a447a59b0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a44a54048>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a447a59b0>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44cbcef0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44cbcef0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a447a59b0>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a447a59b0>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a447a59b0>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44cbcef0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a447a59b0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a447a59b0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
___________________ ERROR at setup of test_itemtypes_revert ____________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44817b70>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a446c14a8>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44817b70>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44778080>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44778080>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44817b70>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44817b70>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44817b70>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44778080>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44817b70>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44817b70>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
___________________ ERROR at setup of test_itemtypes_restore ___________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440d7b38>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a442a9c88>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440d7b38>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44817470>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44817470>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440d7b38>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440d7b38>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440d7b38>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44817470>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440d7b38>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440d7b38>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
________________ ERROR at setup of test_item_type_edit_history _________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440d76d8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a4483fbe0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440d76d8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a442c3240>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a442c3240>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440d76d8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440d76d8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440d76d8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a442c3240>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440d76d8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440d76d8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
____________________ ERROR at setup of test_mapping_create _____________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a442fcc50>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a4511af98>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a442fcc50>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a441fa438>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a441fa438>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a442fcc50>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a442fcc50>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a442fcc50>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a441fa438>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a442fcc50>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a442fcc50>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
__________________ ERROR at setup of test_mapping_get_record ___________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a444895f8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a44489da0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a444895f8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a446ec0f0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a446ec0f0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a444895f8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a444895f8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a444895f8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a446ec0f0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a444895f8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a444895f8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
____________________ ERROR at setup of test_mapping_commit _____________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a45154898>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a441e8d30>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a45154898>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4415e2b0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4415e2b0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a45154898>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a45154898>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a45154898>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4415e2b0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a45154898>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a45154898>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
____________________ ERROR at setup of test_mapping_delete _____________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a441e8da0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a4408ac50>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a441e8da0>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a441e84e0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a441e84e0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a441e8da0>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a441e8da0>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a441e8da0>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a441e84e0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a441e8da0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a441e8da0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
____________________ ERROR at setup of test_mapping_revert _____________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44e0cc50>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43eb2f98>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44e0cc50>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43eaa438>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43eaa438>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44e0cc50>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44e0cc50>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44e0cc50>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43eaa438>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44e0cc50>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44e0cc50>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________ ERROR at setup of test_mapping_get_mapping_by_item_type_ids __________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44e36908>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a44e36d30>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44e36908>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44059390>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44059390>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44e36908>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44e36908>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44e36908>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44059390>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44e36908>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44e36908>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
____________________ ERROR at setup of test_item_type_props ____________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43ed0cc0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43ed0470>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43ed0cc0>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4408a0f0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4408a0f0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43ed0cc0>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43ed0cc0>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43ed0cc0>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4408a0f0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43ed0cc0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43ed0cc0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_item_metadata_create __________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a443e39e8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a4422cbe0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a443e39e8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44453240>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44453240>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a443e39e8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a443e39e8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a443e39e8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44453240>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a443e39e8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a443e39e8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_______________ ERROR at setup of test_item_metadata_get_record ________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4422c780>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a441ddc88>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4422c780>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44726fd0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44726fd0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4422c780>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4422c780>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4422c780>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44726fd0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4422c780>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4422c780>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_______________ ERROR at setup of test_item_metadata_get_records _______________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440cea20>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43d72be0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440cea20>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44720160>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44720160>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440cea20>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440cea20>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440cea20>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44720160>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440cea20>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440cea20>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
___________ ERROR at setup of test_item_metadata_get_by_item_type_id ___________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43fad6d8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a44442ba8>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43fad6d8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4410b710>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4410b710>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43fad6d8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43fad6d8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43fad6d8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4410b710>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43fad6d8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43fad6d8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
____________ ERROR at setup of test_item_metadata_get_by_object_id _____________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a450ae550>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43e65320>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a450ae550>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a450ae5c0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a450ae5c0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a450ae550>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a450ae550>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a450ae550>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a450ae5c0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a450ae550>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a450ae550>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_item_metadata_commit __________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43b78e10>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43da7b38>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43b78e10>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43b635c0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43b635c0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43b78e10>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43b78e10>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43b78e10>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43b635c0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43b78e10>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43b78e10>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_item_metadata_delete __________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43e0cc18>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43cd1d68>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43e0cc18>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43e17588>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43e17588>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43e0cc18>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43e0cc18>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43e0cc18>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43e17588>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43e0cc18>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43e0cc18>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_item_metadata_revert __________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440f2128>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a440f2c50>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440f2128>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43c3e4e0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43c3e4e0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440f2128>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440f2128>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440f2128>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43c3e4e0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440f2128>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a440f2128>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_files_metadata_create _________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43d29a20>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a441de048>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43d29a20>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43a555c0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43a555c0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43d29a20>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43d29a20>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43d29a20>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43a555c0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43d29a20>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43d29a20>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_______________ ERROR at setup of test_files_metadata_get_record _______________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43bd8a90>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a441de630>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43bd8a90>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43c80780>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43c80780>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43bd8a90>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43bd8a90>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43bd8a90>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43c80780>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43bd8a90>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43bd8a90>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
______________ ERROR at setup of test_files_metadata_get_records _______________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43b86c18>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43d29828>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43b86c18>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43975860>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43975860>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43b86c18>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43b86c18>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43b86c18>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43975860>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43b86c18>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43b86c18>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
______________ ERROR at setup of test_files_metadata_update_data _______________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43b987b8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43b985f8>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43b987b8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a441deba8>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a441deba8>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43b987b8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43b987b8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43b987b8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a441deba8>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43b987b8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43b987b8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_files_metadata_commit _________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4497bef0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43817be0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4497bef0>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43ae95f8>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43ae95f8>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4497bef0>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4497bef0>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4497bef0>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43ae95f8>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4497bef0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4497bef0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_files_metadata_delete _________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43a39908>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43e31be0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43a39908>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4382cc50>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4382cc50>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43a39908>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43a39908>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43a39908>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4382cc50>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43a39908>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43a39908>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_files_metadata_revert _________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43e05d68>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43b02ef0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43e05d68>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43e31cc0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43e31cc0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43e05d68>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43e05d68>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43e05d68>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43e31cc0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43e05d68>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43e05d68>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_______________ ERROR at setup of test_site_license_get_records ________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44352748>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43da50b8>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44352748>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a439abac8>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a439abac8>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44352748>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44352748>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44352748>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a439abac8>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44352748>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44352748>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
__________________ ERROR at setup of test_site_license_update __________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a439c8c88>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43a39f60>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a439c8c88>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a438d5400>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a438d5400>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a439c8c88>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a439c8c88>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a439c8c88>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a438d5400>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a439c8c88>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a439c8c88>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_wekorecord_get_record _________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43829ef0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43de1ef0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43829ef0>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44352860>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44352860>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43829ef0>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43829ef0>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43829ef0>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44352860>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43829ef0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43829ef0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________ ERROR at setup of test_feedback_mail_list_create_and_update __________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43927f60>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43927b38>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43927f60>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43a39278>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43a39278>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43927f60>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43927f60>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43927f60>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43a39278>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43927f60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43927f60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_______________ ERROR at setup of test_feedback_mail_list_delete _______________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43f80860>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43f80748>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43f80860>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43de1a58>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43de1a58>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43f80860>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43f80860>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43f80860>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43de1a58>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43f80860>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43f80860>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
___________________ ERROR at setup of test_item_link_update ____________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43f66cf8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a436cabe0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43f66cf8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a437b3a58>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a437b3a58>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43f66cf8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43f66cf8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43f66cf8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a437b3a58>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43f66cf8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43f66cf8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_item_link_bulk_create _________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43771a58>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a438a68d0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43771a58>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a435cdd30>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a435cdd30>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43771a58>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43771a58>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43771a58>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a435cdd30>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43771a58>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43771a58>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_item_link_bulk_update _________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a436db0f0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43c20f98>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a436db0f0>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4384bd30>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4384bd30>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a436db0f0>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a436db0f0>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a436db0f0>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4384bd30>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a436db0f0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a436db0f0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_item_link_bulk_delete _________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4361f4a8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a4361f240>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4361f4a8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a436cdef0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a436cdef0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4361f4a8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4361f4a8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4361f4a8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a436cdef0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4361f4a8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4361f4a8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
__________ ERROR at setup of TestObjectType.test_get_openaire_subtype __________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4372c0b8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a4372c4e0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4372c0b8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4354e320>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4354e320>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4372c0b8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4372c0b8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4372c0b8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4354e320>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4372c0b8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4372c0b8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
__ ERROR at setup of test_jpcoar_serializer[data/record_hit/record_hit1.json] __

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43536080>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43650a58>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43536080>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44603048>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44603048>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43536080>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43536080>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43536080>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44603048>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43536080>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43536080>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
___ ERROR at setup of test_json_serializer[data/record_hit/record_hit1.json] ___

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a433eb2b0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a433eb390>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a433eb2b0>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4430d400>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4430d400>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a433eb2b0>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a433eb2b0>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a433eb2b0>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4430d400>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a433eb2b0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a433eb2b0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_ ERROR at setup of test_oepnsearch_responsify[data/record_hit/record_hit1.json] _

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43a19160>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43346240>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43a19160>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43f34908>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43f34908>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43a19160>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43a19160>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43a19160>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43f34908>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43a19160>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43a19160>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
____________________ ERROR at setup of test_add_link_header ____________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43438940>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a438eeba8>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43438940>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4348cb38>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4348cb38>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43438940>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43438940>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43438940>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4348cb38>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43438940>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43438940>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_____________ ERROR at setup of test_serialize_related_identifiers _____________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4334eba8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43a190b8>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4334eba8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4334ec18>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4334ec18>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4334eba8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4334eba8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4334eba8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4334ec18>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4334eba8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4334eba8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
____________ ERROR at setup of test_preprocess_related_identifiers _____________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44386c18>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a44386780>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44386c18>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43412cc0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43412cc0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44386c18>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44386c18>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44386c18>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43412cc0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44386c18>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a44386c18>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_ ERROR at setup of test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True] _

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43a19208>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a4327a198>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43a19208>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43161898>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43161898>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43a19208>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43a19208>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43a19208>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43161898>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43a19208>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43a19208>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_get_attribute_schema __________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a435decf8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a4327c9b0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a435decf8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44b685f8>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44b685f8>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a435decf8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a435decf8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a435decf8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44b685f8>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a435decf8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a435decf8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_get_item_type_name_id _________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43064ba8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a42f50b70>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43064ba8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a434a4828>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a434a4828>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43064ba8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43064ba8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43064ba8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a434a4828>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43064ba8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43064ba8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
__________________ ERROR at setup of test_get_item_type_name ___________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43623c88>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43623a90>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43623c88>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43623710>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43623710>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43623c88>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43623c88>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43623c88>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43623710>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43623c88>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43623c88>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_ ERROR at setup of test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True] _

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43530320>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43530198>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43530320>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a431053c8>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a431053c8>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43530320>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43530320>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43530320>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a431053c8>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43530320>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43530320>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
______________________ ERROR at setup of test_json_loader ______________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a431fdac8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a430d5940>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a431fdac8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44ae1198>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44ae1198>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a431fdac8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a431fdac8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a431fdac8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a44ae1198>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a431fdac8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a431fdac8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
______________ ERROR at setup of test_get_options_and_order_list _______________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a432396a0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43220f60>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a432396a0>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43239208>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43239208>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a432396a0>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a432396a0>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a432396a0>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43239208>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a432396a0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a432396a0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_ ERROR at setup of test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True] _

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43d1ce80>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a4349dc18>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43d1ce80>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43182470>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43182470>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43d1ce80>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43d1ce80>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43d1ce80>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43182470>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43d1ce80>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43d1ce80>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_ ERROR at setup of test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False] _

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43939748>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43c78358>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43939748>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a433836d8>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a433836d8>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43939748>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43939748>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43939748>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a433836d8>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43939748>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43939748>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_ ERROR at setup of test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False] _

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4349d198>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a4349d940>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4349d198>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a434c15f8>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a434c15f8>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4349d198>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4349d198>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4349d198>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a434c15f8>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4349d198>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4349d198>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_ ERROR at setup of test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False] _

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a432190b8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43182080>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a432190b8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a431d7400>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a431d7400>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a432190b8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a432190b8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a432190b8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a431d7400>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a432190b8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a432190b8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_ ERROR at setup of test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False] _

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42e85438>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a42e85198>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42e85438>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4303c128>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4303c128>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42e85438>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42e85438>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42e85438>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a4303c128>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42e85438>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42e85438>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_ ERROR at setup of test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False] _

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43220400>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a43125b00>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43220400>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43c61f28>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43c61f28>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43220400>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43220400>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43220400>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43c61f28>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43220400>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43220400>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
__________ ERROR at setup of test_sort_meta_data_by_options_exception __________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a431c8668>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a431c8470>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a431c8668>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43939160>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43939160>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a431c8668>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a431c8668>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a431c8668>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a43939160>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a431c8668>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a431c8668>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_______ ERROR at setup of test_sort_meta_data_by_options_no_item_type_id _______

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a434f5b00>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a4349d2e8>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a434f5b00>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a431252e8>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a431252e8>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a434f5b00>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a434f5b00>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a434f5b00>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a431252e8>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a434f5b00>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a434f5b00>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
________________ ERROR at setup of test_get_keywords_data_load _________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42edc940>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a42edc160>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42edc940>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a42fd5a58>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a42fd5a58>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42edc940>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42edc940>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42edc940>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a42fd5a58>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42edc940>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42edc940>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
________________ ERROR at setup of test_is_valid_openaire_type _________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43239240>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a42f87f28>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43239240>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a431646a0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a431646a0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43239240>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43239240>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43239240>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a431646a0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43239240>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a43239240>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
____________ ERROR at setup of test_custom_record_medata_for_export ____________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42951dd8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a42951ef0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42951dd8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a42954080>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a42954080>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42951dd8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42951dd8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42951dd8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a42954080>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42951dd8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42951dd8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
______________________ ERROR at setup of test_feed_entry _______________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42ad1f60>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a42aedc50>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42ad1f60>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a42aebcf8>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a42aebcf8>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42ad1f60>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42ad1f60>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42ad1f60>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a42aebcf8>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42ad1f60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a42ad1f60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
__________________ ERROR at setup of test_weko_feed_generator __________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4280cb00>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7f1a4223c898>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4280cb00>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a422fea58>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a422fea58>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4280cb00>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4280cb00>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4280cb00>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7f1a422fea58>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4280cb00>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>

    @pytest.fixture()
    def db(app):
        """Database fixture."""
        if not database_exists(str(db_.engine.url)):
            create_database(str(db_.engine.url))
>       db_.create_all()

tests/conftest.py:140: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7f1a4280cb00>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
=============================== warnings summary ===============================
tests/test_api.py::test_recordbase
  /code/modules/weko-records/.tox/c1/lib/python3.6/site-packages/pkg_resources/_vendor/packaging/specifiers.py:276: DeprecationWarning: Creating a LegacyVersion has been deprecated and will be removed in the next major release
    DeprecationWarning,

tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_recordbase
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypenames
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_create
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_update_item_type
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_record
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_records
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_records_by_name_id
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_with_item_type
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_latest_custorm_harvesting
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_get_all
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_commit
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_delete
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_revert
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_itemtypes_restore
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_item_type_edit_history
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_create
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_get_record
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_commit
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_delete
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_revert
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_mapping_get_mapping_by_item_type_ids
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_type_props
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_create
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_record
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_records
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_item_type_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_get_by_object_id
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_commit
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_delete
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_item_metadata_revert
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_create
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_record
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_get_records
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_update_data
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_commit
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_delete
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_files_metadata_revert
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_get_records
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_site_license_update
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_wekorecord_get_record
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_create_and_update
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_feedback_mail_list_delete
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_update
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_create
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_update
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_api.py::test_item_link_bulk_delete
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_csl.py::TestObjectType::test_get_openaire_subtype
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_jpcoar.py::test_jpcoar_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_json.py::test_json_serializer[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_oepnsearch_responsify[data/record_hit/record_hit1.json]
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_opensearch_response.py::test_add_link_header
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_serialize_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_pidrelations.py::test_preprocess_related_identifiers
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_schemas_csl.py::test_record_schema_csljson[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_attribute_schema
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name_id
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_get_item_type_name
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_serializers_utils.py::test_open_search_detail_data[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_json_loader
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_copy_field_test
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_value_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_values_from_dict
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_get_options_and_order_list
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render1.json-data/item_type/item_type_form1.json-data/item_type/item_type_mapping1.json-data/record_hit/record_hit1.json-True]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render2.json-data/item_type/item_type_form2.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render3.json-data/item_type/item_type_form3.json-data/item_type/item_type_mapping2.json-data/record_hit/record_hit3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title1.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title2.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options[data/item_type/item_type_render_title.json-data/item_type/item_type_form_title.json-data/item_type/item_type_mapping_title.json-data/record_hit/record_hit_title3.json-False]
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_exception
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_sort_meta_data_by_options_no_item_type_id
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_get_keywords_data_load
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_is_valid_openaire_type
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_check_has_attribute_value
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_get_attribute_value_all_items
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_check_to_upgrade_version
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_2
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_selected_value_by_language_3
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_check_info_in_metadata
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_and_lang_by_key
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_value_by_selected_lang
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_get_show_list_author
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_format_creates
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_creator_by_languages
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_affiliation
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_get_author_has_language
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_add_author
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_custom_record_medata_for_export
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_utils.py::test_replace_fqdn_of_file_metadata
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_feed_entry
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
tests/test_weko_records.py::test_weko_feed_generator
  /code/modules/weko-records/.tox/c1/lib/python3.6/site-packages/pkg_resources/_vendor/packaging/version.py:114: DeprecationWarning: Creating a LegacyVersion has been deprecated and will be removed in the next major release
    DeprecationWarning,

tests/test_serializers_entry.py::test_weko_feed_entry
  /code/modules/weko-records/weko_records/serializers/entry.py:686: UserWarning: pubdate(... is deprecated and may be removed in feedgen > 0.8. Use pubDate(...) instead.
    warnings.warn('pubdate(... is deprecated and may be removed in feedgen '

-- Docs: https://docs.pytest.org/en/latest/warnings.html

---------- coverage: platform linux, python 3.6.15-final-0 -----------
Name                                               Stmts   Miss Branch BrPart  Cover
------------------------------------------------------------------------------------
weko_records/__init__.py                               4      0      0      0   100%
weko_records/api.py                                  856    685    304      1    17%
weko_records/config.py                                25      0      0      0   100%
weko_records/ext.py                                   15      1     10      1    92%
weko_records/fetchers.py                               7      2      0      0    71%
weko_records/models.py                               136     24     64     11    74%
weko_records/serializers/__init__.py                  21      0      0      0   100%
weko_records/serializers/atom.py                       7      2      2      0    78%
weko_records/serializers/csl.py                       57     40     18      0    25%
weko_records/serializers/dc.py                        51     39     28      0    20%
weko_records/serializers/depositschema.py             20      9      6      0    50%
weko_records/serializers/entry.py                    387    280    231     13    20%
weko_records/serializers/feed.py                     564    505    316      0     7%
weko_records/serializers/jpcoar.py                    36     22      4      0    40%
weko_records/serializers/json.py                      38     22     14      0    35%
weko_records/serializers/opensearch.py                60     43     30      0    26%
weko_records/serializers/opensearchresponse.py        32     24     20      0    15%
weko_records/serializers/opensearchserializer.py      25     16      8      0    33%
weko_records/serializers/pidrelations.py              35     28     18      0    13%
weko_records/serializers/prism.py                    132    107     78      0    15%
weko_records/serializers/rss.py                        7      2      2      0    78%
weko_records/serializers/schemas/__init__.py           1      0      0      0   100%
weko_records/serializers/schemas/csl.py              128     96     88     10    20%
weko_records/serializers/searchserializer.py           5      1      2      0    86%
weko_records/serializers/utils.py                    467    361    298      4    20%
weko_records/utils.py                               1294    660    790     92    47%
weko_records/version.py                                2      0      0      0   100%
------------------------------------------------------------------------------------
TOTAL                                               4412   2969   2331    132    29%
Coverage XML written to file coverage.xml

============= 47 passed, 6274 warnings, 77 error in 129.71 seconds =============
ERROR: InvocationError for command /code/modules/weko-records/.tox/c1/bin/pytest --cov=weko_records tests -v -s -vv --cov-branch --cov-report=term --cov-report=xml --cov-config=tox.ini --basetemp=/code/modules/weko-records/.tox/c1/tmp (exited with code 1)
___________________________________ summary ____________________________________
ERROR:   c1: commands failed
