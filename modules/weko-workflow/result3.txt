GLOB sdist-make: /code/modules/weko-workflow/setup.py
c1 inst-nodeps: /code/modules/weko-workflow/.tox/.tmp/package/1/weko-workflow-0.1.0.dev20170000.zip
c1 installed: alabaster==0.7.13,alembic==0.9.6,amqp==2.6.1,angular-gettext-babel==0.3,aniso8601==8.0.0,arrow==0.12.1,asn1crypto==0.23.0,attrs==17.4.0,b2handle==1.1.2,Babel==2.5.1,bagit==1.7.0,beautifulsoup4==4.9.3,bibtexparser==1.0.1,billiard==3.6.3.0,binaryornot==0.4.4,bleach==3.1.0,blinker==1.4,boto3==1.7.84,botocore==1.10.84,cachelib==0.1,cachetools==4.2.4,cchardet==2.1.1,celery==4.4.7,certifi==2017.11.5,cffi==1.11.2,chardet==3.0.4,citeproc-py==0.5.1,citeproc-py-styles==0.1.2,click==8.0.4,cookiecutter==1.6.0,counter-robots==2018.6,coverage==6.2,cryptography==2.1.4,datacite==1.0.1,DateTime==4.9,decorator==4.1.2,defusedxml==0.5.0,dictdiffer==0.7.0,dnspython==2.2.1,docutils==0.18.1,dojson==1.3.2,elasticsearch==6.1.1,elasticsearch-dsl==6.4.0,elementpath==1.0.6,email-validator==1.0.5,entrypoints==0.2.3,feedgen==0.7.0,Flask==1.0.4,Flask-Admin==1.5.3,Flask-Alembic==2.0.1,Flask-Assets==0.12,Flask-BabelEx==0.9.4,Flask-Breadcrumbs==0.5.0,Flask-Caching==1.3.3,Flask-CeleryExt==0.3.4,Flask-Collect==1.2.2,Flask-Cors==3.0.3,Flask-DebugToolbar==0.11.0,Flask-IIIF==0.6.1,Flask-KVSession==0.6.2,Flask-Limiter==1.1.0,Flask-Login==0.4.1,Flask-Mail==0.9.1,flask-marshmallow==0.14.0,Flask-Menu==0.6.0,Flask-OAuthlib==0.9.5,Flask-Plugins==1.6.1,Flask-Principal==0.4.0,Flask-RESTful==0.3.8,Flask-Security==3.0.0,flask-shell-ipython==0.4.1,Flask-Sitemap==0.1.0,Flask-SQLAlchemy==2.3.2,flask-talisman==0.4.1,Flask-WTF==0.14.3,-e git+https://github.com/RCOSDP/pyfpdf.git@f9b032148283d535cabc7789858081c80de36fef#egg=fpdf,frozendict==2.3.6,fs==0.5.4,ftfy==4.4.3,future==0.16.0,github3.py==1.1.0,html5lib==1.0.1,idna==2.6,iiif-prezi==0.3.0,imagesize==1.4.1,importlib-metadata==4.8.3,importlib-resources==5.4.0,infinity==1.4,iniconfig==1.1.1,intervals==0.8.0,invenio-access==1.1.0,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=invenio_accounts&subdirectory=modules/invenio-accounts,invenio-admin==1.1.2,invenio-app==1.1.0,invenio-assets==1.0.0,invenio-base==1.0.2,invenio-cache==1.0.0,invenio-celery==1.1.3,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=invenio_communities&subdirectory=modules/invenio-communities,invenio-config==1.0.0,invenio-csl-rest==1.0.0a1,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=invenio_db&subdirectory=modules/invenio-db,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=invenio_deposit&subdirectory=modules/invenio-deposit,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=invenio_files_rest&subdirectory=modules/invenio-files-rest,invenio-formatter==1.0.0b3,invenio-i18n==1.0.0,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=invenio_iiif&subdirectory=modules/invenio-iiif,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=invenio_indexer&subdirectory=modules/invenio-indexer,invenio-jsonschemas==1.0.0,invenio-logging==1.0.0b3,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=invenio_mail&subdirectory=modules/invenio-mail,invenio-marc21==1.0.0a8,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=invenio_oaiharvester&subdirectory=modules/invenio-oaiharvester,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=invenio_oaiserver&subdirectory=modules/invenio-oaiserver,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=invenio_oauth2server&subdirectory=modules/invenio-oauth2server,invenio-oauthclient==1.0.0,invenio-pidrelations==1.0.0a4,invenio-pidstore==1.0.0,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=invenio_previewer&subdirectory=modules/invenio-previewer,invenio-query-parser==0.6.0,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=invenio_queues&subdirectory=modules/invenio-queues,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=invenio_records&subdirectory=modules/invenio-records,invenio-records-files==1.0.0a10,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=invenio_records_rest&subdirectory=modules/invenio-records-rest,invenio-records-ui==1.0.0,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=invenio_resourcesyncclient&subdirectory=modules/invenio-resourcesyncclient,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=invenio_resourcesyncserver&subdirectory=modules/invenio-resourcesyncserver,invenio-rest==1.1.2,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=invenio_s3&subdirectory=modules/invenio-s3,invenio-search==1.1.0,invenio-search-ui==1.0.0a9,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=invenio_stats&subdirectory=modules/invenio-stats,invenio-theme==1.0.0b4,ipaddress==1.0.19,ipython==6.2.1,ipython-genutils==0.2.0,itsdangerous==0.24,jedi==0.11.0,Jinja2==2.10,jinja2-cli==0.6.0,jinja2-time==0.2.0,jmespath==0.10.0,jsmin==2.2.2,jsonpatch==1.21,jsonpath-ng==1.5.2,jsonpointer==1.14,jsonref==0.1,jsonresolver==0.2.1,jsonschema==2.6.0,jupyter-client==5.2.2,jupyter-core==4.4.0,-e git+https://github.com/RCOSDP/kombu.git@f204fdf078d5e94393c86693f545e2d011f620f5#egg=kombu,limits==1.2.1,lxml==4.1.1,Mako==1.0.7,MarkupSafe==1.1.1,marshmallow==2.20.1,marshmallow-sqlalchemy==0.23.1,maxminddb==1.5.2,maxminddb-geolite2==2017.803,mistune==0.8.3,mock==3.0.5,more-itertools==8.10.0,msgpack==0.6.2,nbconvert==5.3.1,nbformat==4.4.0,netaddr==0.8.0,node-semver==0.1.1,numpy==1.16.1,oauthlib==2.1.0,ordereddict==1.1,packaging==21.3,pandocfilters==1.4.2,parso==0.1.0,passlib==1.7.1,pexpect==4.3.0,pickleshare==0.7.4,Pillow==5.4.1,pluggy==0.13.1,ply==3.11,poyo==0.4.1,prompt-toolkit==1.0.15,psycopg2==2.7.3.2,ptyprocess==0.5.2,py==1.11.0,pycparser==2.18,Pygments==2.2.0,PyJWT==1.5.3,PyLD==2.0.3,pyparsing==3.0.9,-e git+https://github.com/RCOSDP/PyPDF2.git@fefc684a3a74aff6f99e5dff24f9b4dd1c95169d#egg=PyPDF2,pyPEG2==2.15.2,pytest==6.1.2,pytest-cov==4.0.0,pytest-mock==3.6.1,python-dateutil==2.6.1,python-editor==1.0.3,python-geoip==1.2,pytz==2017.3,pyzmq==17.0.0,redis==2.10.6,requests==2.18.4,requests-oauthlib==1.1.0,responses==0.10.15,resync==1.0.9,s3fs==0.1.6,s3transfer==0.1.13,Sickle==0.6.4,simplegeneric==0.8.1,simplejson==3.12.0,simplekv==0.11.2,six==1.12.0,snowballstemmer==2.2.0,soupsieve==2.3.2.post1,speaklater==1.3,Sphinx==1.8.4,sphinxcontrib-serializinghtml==1.1.5,sphinxcontrib-websupport==1.2.4,SQLAlchemy==1.2.19,SQLAlchemy-Continuum==1.3.6,SQLAlchemy-Utils==0.35.0,testpath==0.3.1,toml==0.10.2,tomli==1.2.3,tornado==4.5.3,traitlets==4.3.2,typing_extensions==4.1.1,ua-parser==0.7.3,uritemplate==4.1.1,uritools==2.1.0,urllib3==1.22,validators==0.12.0,vine==1.3.0,Wand==0.6.1,wcwidth==0.1.7,webargs==5.5.2,webassets==0.12.1,webencodings==0.5.1,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_accounts&subdirectory=modules/weko-accounts,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_admin&subdirectory=modules/weko-admin,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_authors&subdirectory=modules/weko-authors,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_bulkupdate&subdirectory=modules/weko-bulkupdate,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_deposit&subdirectory=modules/weko-deposit,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_gridlayout&subdirectory=modules/weko-gridlayout,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_groups&subdirectory=modules/weko-groups,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_handle&subdirectory=modules/weko-handle,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_index_tree&subdirectory=modules/weko-index-tree,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_indextree_journal&subdirectory=modules/weko-indextree-journal,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_items_autofill&subdirectory=modules/weko-items-autofill,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_items_ui&subdirectory=modules/weko-items-ui,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_itemtypes_ui&subdirectory=modules/weko-itemtypes-ui,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_logging&subdirectory=modules/weko-logging,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_records&subdirectory=modules/weko-records,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_records_ui&subdirectory=modules/weko-records-ui,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_redis&subdirectory=modules/weko-redis,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_schema_ui&subdirectory=modules/weko-schema-ui,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_search_ui&subdirectory=modules/weko-search-ui,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_sitemap&subdirectory=modules/weko-sitemap,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_theme&subdirectory=modules/weko-theme,-e git+https://github.com/ivis-miyachi/weko.git@66c62cd8071222d5e46135f6354b3e5d351614d2#egg=weko_user_profiles&subdirectory=modules/weko-user-profiles,weko-workflow @ file:///code/modules/weko-workflow/.tox/.tmp/package/1/weko-workflow-0.1.0.dev20170000.zip,Werkzeug==0.15.2,whichcraft==0.4.1,WTForms==2.1,WTForms-Alchemy==0.16.5,WTForms-Components==0.10.3,xmlschema==0.9.30,xmltodict==0.12.0,zipp==3.6.0,zope.interface==5.5.2
c1 run-test-pre: PYTHONHASHSEED='1456728601'
c1 run-test: commands[0] | pytest --cov=weko_workflow tests -v -s -vv --cov-branch --cov-report=term --cov-report=html --cov-config=tox.ini --basetemp=/code/modules/weko-workflow/.tox/c1/tmp
============================= test session starts ==============================
platform linux -- Python 3.6.15, pytest-6.1.2, py-1.11.0, pluggy-0.13.1 -- /code/modules/weko-workflow/.tox/c1/bin/python
cachedir: .tox/c1/.pytest_cache
rootdir: /code/modules/weko-workflow
plugins: celery-4.4.7, mock-3.6.1, cov-4.0.0
collecting ... collected 446 items

tests/test_admin.py::TestFlowSettingView::test_index_acl_guest /admin/flowsetting/
PASSED
tests/test_admin.py::TestFlowSettingView::test_index_acl[0-403] /admin/flowsetting/
PASSED
tests/test_admin.py::TestFlowSettingView::test_flow_detail_acl_guest /admin/flowsetting/
PASSED
tests/test_admin.py::TestFlowSettingView::test_flow_detail_acl[1-200] /admin/workflowsetting/0
/admin/workflowsetting/0
FAILED
tests/test_admin.py::TestFlowSettingView::test_get_specified_properties PASSED
tests/test_admin.py::TestFlowSettingView::test_update_flow FAILED
tests/test_admin.py::TestFlowSettingView::test_new_flow FAILED
tests/test_admin.py::TestFlowSettingView::test_del_flow FAILED
tests/test_admin.py::TestFlowSettingView::test_get_actions FAILED
tests/test_admin.py::TestFlowSettingView::test_upt_flow_action FAILED
tests/test_admin.py::TestWorkFlowSettingView::test_index_acl_guest /admin/workflowsetting/
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_index_acl[1-200] /admin/workflowsetting/
FAILED
tests/test_admin.py::TestWorkFlowSettingView::test_workflow_detail_acl_guest /admin/workflowsetting/0
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_workflow_detail_acl[1-200] /admin/workflowsetting/0
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_update_workflow_acl_guest /admin/workflowsetting/0
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_update_workflow_acl[1-200] /admin/workflowsetting/0
FAILED
tests/test_admin.py::TestWorkFlowSettingView::test_delete_workflow_acl_guest /admin/workflowsetting/0
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_delete_workflow_acl[1-200] /admin/workflowsetting/0
PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_get_name_display_hide PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_get_displays PASSED
tests/test_admin.py::TestWorkFlowSettingView::test_save_workflow_role FAILED
tests/test_admin.py::TestWorkFlowSettingView::test_get_language_workflows FAILED
tests/test_api.py::test_Flow_action PASSED
tests/test_api.py::test_WorkActivity_filter_by_date PASSED
tests/test_api.py::test_WorkActivity_get_all_activity_list PASSED
tests/test_api.py::test_WorkActivity_get_activity_index_search PASSED
tests/test_api.py::test_WorkActivity_upt_activity_detail PASSED
tests/test_api.py::test_WorkActivity_get_corresponding_usage_activities PASSED
tests/test_cli.py::test_workflow PASSED
tests/test_cli.py::test_init_workflow_tables FAILED
tests/test_romeo.py::test_search_romeo_jtitles PASSED
tests/test_romeo.py::test_search_romeo_issn PASSED
tests/test_romeo.py::test_search_romeo_jtitle PASSED
tests/test_sessions.py::test_upt_activity_item PASSED
tests/test_tasks.py::test_cancel_expired_usage_report_activities PASSED
tests/test_utils.py::test_get_current_language PASSED
tests/test_utils.py::test_get_term_and_condition_content PASSED
tests/test_utils.py::test_get_identifier_setting PASSED
tests/test_utils.py::test_saving_doi_pidstore PASSED
tests/test_utils.py::test_register_hdl PASSED
tests/test_utils.py::test_register_hdl_by_item_id PASSED
tests/test_utils.py::test_register_hdl_by_handle PASSED
tests/test_utils.py::test_item_metadata_validation FAILED
tests/test_utils.py::test_merge_doi_error_list PASSED
tests/test_utils.py::test_validation_item_property PASSED
tests/test_utils.py::test_handle_check_required_data PASSED
tests/test_utils.py::test_handle_check_required_pattern_and_either FAILED
tests/test_utils.py::test_validattion_item_property_required PASSED
tests/test_utils.py::test_validattion_item_property_either_required PASSED
tests/test_utils.py::test_check_required_data PASSED
tests/test_utils.py::test_get_activity_id_of_record_without_version PASSED
tests/test_utils.py::test_check_suffix_identifier PASSED
tests/test_utils.py::test_MappingData__init__ PASSED
tests/test_utils.py::test_MappingData_get_data_by_mapping PASSED
tests/test_utils.py::test_MappingData_get_first_data_by_mapping PASSED
tests/test_utils.py::test_MappingData_get_first_property_by_mapping PASSED
tests/test_utils.py::test_get_sub_item_value PASSED
tests/test_utils.py::test_get_item_value_in_deep PASSED
tests/test_utils.py::test_IdentifierHandle___init__ PASSED
tests/test_utils.py::test_IdentifierHandle_get_pidstore PASSED
tests/test_utils.py::test_IdentifierHandle_check_pidstore_exist PASSED
tests/test_utils.py::test_IdentifierHandle_register_pidstore PASSED
tests/test_utils.py::test_IdentifierHandle_delete_pidstore_doi PASSED
tests/test_utils.py::test_IdentifierHandle_remove_idt_registration_metadata PASSED
tests/test_utils.py::test_IdentifierHandle_update_idt_registration_metadata PASSED
tests/test_utils.py::test_IdentifierHandle_get_idt_registration_data PASSED
tests/test_utils.py::test_IdentifierHandle_commit PASSED
tests/test_utils.py::test_delete_bucket FAILED
tests/test_utils.py::test_merge_buckets_by_records[True] PASSED
tests/test_utils.py::test_merge_buckets_by_records[False] PASSED
tests/test_utils.py::test_merge_buckets_by_records_error PASSED
tests/test_utils.py::test_set_bucket_default_size FAILED
tests/test_utils.py::test_is_show_autofill_metadata PASSED
tests/test_utils.py::test_is_hidden_pubdate PASSED
tests/test_utils.py::test_get_parent_pid_with_type PASSED
tests/test_utils.py::test_filter_all_condition PASSED
tests/test_utils.py::test_filter_condition PASSED
tests/test_utils.py::test_get_actionid PASSED
tests/test_utils.py::test_convert_record_to_item_metadata PASSED
tests/test_utils.py::test_prepare_edit_workflow FAILED
tests/test_utils.py::test_handle_finish_workflow FAILED
tests/test_utils.py::test_delete_cache_data PASSED
tests/test_utils.py::test_update_cache_data PASSED
tests/test_utils.py::test_get_cache_data PASSED
tests/test_utils.py::test_check_an_item_is_locked PASSED
tests/test_utils.py::test_get_accoutn_info PASSED
tests/test_utils.py::test_check_existed_doi PASSED
tests/test_utils.py::test_get_url_root PASSED
tests/test_utils.py::test_get_record_by_root_ver PASSED
tests/test_utils.py::test_get_disptype_and_ver_in_metainfo PASSED
tests/test_utils.py::test_set_files_display_type PASSED
tests/test_utils.py::test_get_thumbnails PASSED
tests/test_utils.py::test_get_allow_multi_thumbnail PASSED
tests/test_utils.py::test_is_usage_application_item_type PASSED
tests/test_utils.py::test_is_usage_application PASSED
tests/test_utils.py::test_send_mail_reminder PASSED
tests/test_utils.py::test_send_mail_approval_done PASSED
tests/test_utils.py::test_send_mail_registration_done PASSED
tests/test_utils.py::test_send_mail_request_approval PASSED
tests/test_utils.py::test_send_mail PASSED
tests/test_utils.py::test_email_pattern_registration_done PASSED
tests/test_utils.py::test_email_pattern_request_approval PASSED
tests/test_utils.py::test_email_pattern_approval_done PASSED
tests/test_utils.py::test_get_mail_data PASSED
tests/test_utils.py::test_get_subject_and_content PASSED
tests/test_utils.py::test_get_file_path PASSED
tests/test_utils.py::test_replace_characters PASSED
tests/test_utils.py::test_register_info PASSED
tests/test_utils.py::test_get_approval_dates PASSED
tests/test_utils.py::test_get_item_info PASSED
tests/test_utils.py::test_get_site_info_name PASSED
tests/test_utils.py::test_get_default_mail_sender PASSED
tests/test_utils.py::test_set_mail_info PASSED
tests/test_utils.py::test_process_send_reminder_mail PASSED
tests/test_utils.py::test_process_send_notification_mail PASSED
tests/test_utils.py::test_get_application_and_approval_date PASSED
tests/test_utils.py::test_get_workflow_item_type_names PASSED
tests/test_utils.py::test_create_usage_report PASSED
tests/test_utils.py::test_create_record_metadata PASSED
tests/test_utils.py::test_modify_item_metadata FAILED
tests/test_utils.py::test_replace_title_subitem PASSED
tests/test_utils.py::test_get_schema_dict PASSED
tests/test_utils.py::test_create_deposit PASSED
tests/test_utils.py::test_update_activity_action PASSED
tests/test_utils.py::test_check_continue PASSED
tests/test_utils.py::test_autofill_title PASSED
tests/test_utils.py::test_exclude_admin_workflow PASSED
tests/test_utils.py::test_is_enable_item_name_link PASSED
tests/test_utils.py::test_save_activity_data PASSED
tests/test_utils.py::test_send_mail_url_guest_user PASSED
tests/test_utils.py::test_generate_guest_activity_token_value PASSED
tests/test_utils.py::test_init_activity_for_guest_user PASSED
tests/test_utils.py::test_send_usage_application_mail_for_guest_user FAILED
tests/test_utils.py::test_validate_guest_activity_token PASSED
tests/test_utils.py::test_validate_guest_activity_expired PASSED
tests/test_utils.py::test_create_onetime_download_url_to_guest PASSED
tests/test_utils.py::test_delete_guest_activity PASSED
tests/test_utils.py::test_get_activity_display_info PASSED
tests/test_utils.py::test___init_activity_detail_data_for_guest FAILED
tests/test_utils.py::test_prepare_data_for_guest_activity PASSED
tests/test_utils.py::test_recursive_get_specified_properties PASSED
tests/test_utils.py::test_get_approval_keys PASSED
tests/test_utils.py::test_process_send_mail PASSED
tests/test_utils.py::test_cancel_expired_usage_reports PASSED
tests/test_utils.py::test_process_send_approval_mails PASSED
tests/test_utils.py::test_get_usage_data PASSED
tests/test_utils.py::test_update_approval_date PASSED
tests/test_utils.py::test_create_record_metadata_for_user PASSED
tests/test_utils.py::test_get_current_date PASSED
tests/test_utils.py::test_get_sub_key_by_system_property_key PASSED
tests/test_utils.py::test_update_system_data_for_item_metadata PASSED
tests/test_utils.py::test_update_approval_date_for_deposit PASSED
tests/test_utils.py::test_update_system_data_for_activity PASSED
tests/test_utils.py::test_check_authority_by_admin PASSED
tests/test_utils.py::test_get_record_first_version PASSED
tests/test_utils.py::test_get_files_and_thumbnail PASSED
tests/test_utils.py::test_get_pid_and_record PASSED
tests/test_utils.py::test_get_items_metadata_by_activity_detail PASSED
tests/test_utils.py::test_get_main_record_detail PASSED
tests/test_utils.py::test_prepare_doi_link_workflow PASSED
tests/test_utils.py::test_get_pid_value_by_activity_detail PASSED
tests/test_utils.py::test_check_doi_validation_not_pass PASSED
tests/test_utils.py::test_get_index_id FAILED
tests/test_utils.py::test_make_activitylog_tsv FAILED
tests/test_views.py::test_regex_replace PASSED
tests/test_views.py::test_index_acl_nologin /workflow/
PASSED
tests/test_views.py::test_index_acl[0-True] /workflow/
FAILED
tests/test_views.py::test_index_acl[1-True] /workflow/
FAILED
tests/test_views.py::test_index_acl[2-True] /workflow/
FAILED
tests/test_views.py::test_index_acl[3-True] /workflow/
FAILED
tests/test_views.py::test_index_acl[4-True] /workflow/
FAILED
tests/test_views.py::test_index_acl[5-True] /workflow/
FAILED
tests/test_views.py::test_index_acl[6-True] /workflow/
FAILED
tests/test_views.py::test_index /workflow/
PASSED
tests/test_views.py::test_iframe_success /workflow/iframe/success
PASSED
tests/test_views.py::test_new_activity /workflow/activity/new
PASSED
tests/test_views.py::test_init_activity_acl_nologin /workflow/activity/init
PASSED
tests/test_views.py::test_init_activity_acl[0-True] /workflow/activity/init
PASSED
tests/test_views.py::test_init_activity_acl[1-True] /workflow/activity/init
PASSED
tests/test_views.py::test_init_activity_acl[2-True] /workflow/activity/init
PASSED
tests/test_views.py::test_init_activity_acl[3-True] /workflow/activity/init
PASSED
tests/test_views.py::test_init_activity_acl[4-True] /workflow/activity/init
PASSED
tests/test_views.py::test_init_activity_acl[5-True] /workflow/activity/init
PASSED
tests/test_views.py::test_init_activity_acl[6-True] /workflow/activity/init
PASSED
tests/test_views.py::test_init_activity /workflow/activity/init
tt2
PASSED
tests/test_views.py::test_list_activity /workflow/activity/list
PASSED
tests/test_views.py::test_init_activity_guest /workflow/activity/init-guest
{'msg': 'Email is sent successfully.'}
PASSED
tests/test_views.py::test_display_guest_activity /workflow/activity/guest-user/test_file.txt
PASSED
tests/test_views.py::test_display_activity_nologin /workflow/activity/detail/1
PASSED
tests/test_views.py::test_display_activity_acl[0-True] /workflow/activity/detail/1
PASSED
tests/test_views.py::test_display_activity_acl[1-True] /workflow/activity/detail/1
PASSED
tests/test_views.py::test_display_activity_acl[2-True] /workflow/activity/detail/1
PASSED
tests/test_views.py::test_display_activity_acl[3-True] /workflow/activity/detail/1
PASSED
tests/test_views.py::test_display_activity_acl[4-True] /workflow/activity/detail/1
PASSED
tests/test_views.py::test_display_activity_acl[5-True] /workflow/activity/detail/1
PASSED
tests/test_views.py::test_display_activity_acl[6-True] /workflow/activity/detail/1
PASSED
tests/test_views.py::test_display_activity /workflow/activity/detail/1?2
PASSED
tests/test_views.py::test_display_activity1 SKIPPED
tests/test_views.py::test_check_authority PASSED
tests/test_views.py::test_check_authority_action PASSED
tests/test_views.py::test_previous_action_acl_nologin /workflow/activity/action/1/1/rejectOrReturn/1
PASSED
tests/test_views.py::test_previous_action_acl_users[0-403-False] /workflow/activity/action/1/1/rejectOrReturn/1
PASSED
tests/test_views.py::test_previous_action_acl_users[1-403-True] /workflow/activity/action/1/1/rejectOrReturn/1
PASSED
tests/test_views.py::test_previous_action_acl_users[2-403-True] /workflow/activity/action/1/1/rejectOrReturn/1
PASSED
tests/test_views.py::test_previous_action_acl_users[3-403-True] /workflow/activity/action/1/1/rejectOrReturn/1
PASSED
tests/test_views.py::test_previous_action_acl_users[4-403-False] /workflow/activity/action/1/1/rejectOrReturn/1
PASSED
tests/test_views.py::test_previous_action_acl_users[5-403-False] /workflow/activity/action/1/1/rejectOrReturn/1
PASSED
tests/test_views.py::test_previous_action_acl_users[6-403-True] /workflow/activity/action/1/1/rejectOrReturn/1
PASSED
tests/test_views.py::test_previous_action /workflow/activity/action/2/1/rejectOrReturn/1
1
PASSED
tests/test_views.py::test_get_journals /workflow/journal/list
PASSED
tests/test_views.py::test_get_journal /workflow/journal/issn/not_hits
PASSED
tests/test_views.py::test_cancel_action_acl_nologin /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_users[0-403-False] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_users[1-403-True] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_users[2-403-True] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_users[3-403-True] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_users[4-403-False] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_users[5-403-False] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_users[6-403-True] /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_acl_guestlogin /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action /workflow/activity/action/1/1/cancel
PASSED
tests/test_views.py::test_cancel_action_guest /workflow/activity/action/99/1/cancel
PASSED
tests/test_views.py::test_find_doi_nologin /workflow/findDOI
PASSED
tests/test_views.py::test_find_doi_users[0-200] /workflow/findDOI
PASSED
tests/test_views.py::test_find_doi_users[1-200] /workflow/findDOI
PASSED
tests/test_views.py::test_find_doi_users[2-200] /workflow/findDOI
PASSED
tests/test_views.py::test_find_doi_users[3-200] /workflow/findDOI
PASSED
tests/test_views.py::test_find_doi_users[4-200] /workflow/findDOI
PASSED
tests/test_views.py::test_find_doi_users[5-200] /workflow/findDOI
PASSED
tests/test_views.py::test_find_doi_users[6-200] /workflow/findDOI
PASSED
tests/test_views.py::test_save_feedback_maillist_users[0-200] /workflow/save_feedback_maillist/1/1
PASSED
tests/test_views.py::test_save_feedback_maillist_users[1-200] /workflow/save_feedback_maillist/1/1
PASSED
tests/test_views.py::test_save_feedback_maillist_users[2-200] /workflow/save_feedback_maillist/1/1
PASSED
tests/test_views.py::test_save_feedback_maillist_users[3-200] /workflow/save_feedback_maillist/1/1
PASSED
tests/test_views.py::test_save_feedback_maillist_users[4-200] /workflow/save_feedback_maillist/1/1
PASSED
tests/test_views.py::test_save_feedback_maillist_users[5-200] /workflow/save_feedback_maillist/1/1
PASSED
tests/test_views.py::test_save_feedback_maillist_users[6-200] /workflow/save_feedback_maillist/1/1
PASSED
tests/test_views.py::test_next_action_acl_nologin /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_users[0-403-False] /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_users[1-403-True] /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_users[2-403-True] /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_users[3-403-True] /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_users[4-403-False] /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_users[5-403-False] /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_users[6-403-True] /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action_acl_guestlogin /workflow/activity/action/1/1
PASSED
tests/test_views.py::test_next_action[0-200] /workflow/activity/action/1/1
FAILED
tests/test_views.py::test_next_action[1-200] /workflow/activity/action/1/1
FAILED
tests/test_views.py::test_next_action[2-200] /workflow/activity/action/1/1
FAILED
tests/test_views.py::test_next_action[3-200] /workflow/activity/action/1/1
FAILED
tests/test_views.py::test_next_action[4-200] /workflow/activity/action/1/1
FAILED
tests/test_views.py::test_next_action[5-200] /workflow/activity/action/1/1
FAILED
tests/test_views.py::test_next_action[6-200] /workflow/activity/action/1/1
FAILED
tests/test_views.py::test_send_mail_nologin /workflow/send_mail/1/a
PASSED
tests/test_views.py::test_send_mail_users[0-200] /workflow/send_mail/1/a
PASSED
tests/test_views.py::test_send_mail_users[1-200] /workflow/send_mail/1/a
PASSED
tests/test_views.py::test_send_mail_users[2-200] /workflow/send_mail/1/a
PASSED
tests/test_views.py::test_send_mail_users[3-200] /workflow/send_mail/1/a
PASSED
tests/test_views.py::test_send_mail_users[4-200] /workflow/send_mail/1/a
PASSED
tests/test_views.py::test_send_mail_users[5-200] /workflow/send_mail/1/a
PASSED
tests/test_views.py::test_send_mail_users[6-200] /workflow/send_mail/1/a
PASSED
tests/test_views.py::test_lock_activity_nologin /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity_users[0-200] /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity_users[1-200] /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity_users[2-200] /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity_users[3-200] /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity_users[4-200] /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity_users[5-200] /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity_users[6-200] /workflow/activity/lock/1
PASSED
tests/test_views.py::test_lock_activity[0-200] /workflow/activity/lock/A-00000003-00000
FAILED
tests/test_views.py::test_lock_activity[1-200] /workflow/activity/lock/A-00000003-00000
FAILED
tests/test_views.py::test_lock_activity[2-200] /workflow/activity/lock/A-00000003-00000
FAILED
tests/test_views.py::test_lock_activity[3-200] /workflow/activity/lock/A-00000003-00000
FAILED
tests/test_views.py::test_lock_activity[4-200] /workflow/activity/lock/A-00000003-00000
FAILED
tests/test_views.py::test_lock_activity[5-200] /workflow/activity/lock/A-00000003-00000
FAILED
tests/test_views.py::test_lock_activity[6-200] /workflow/activity/lock/A-00000003-00000
FAILED
tests/test_views.py::test_unlock_activity_acl_nologin /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity_acl_users[0-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity_acl_users[1-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity_acl_users[2-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity_acl_users[3-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity_acl_users[4-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity_acl_users[5-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity_acl_users[6-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity[0-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity[1-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity[2-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity[3-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity[4-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity[5-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_unlock_activity[6-200] /workflow/activity/unlock/1
PASSED
tests/test_views.py::test_check_approval_acl_nologin /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval_acl_users[0-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval_acl_users[1-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval_acl_users[2-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval_acl_users[3-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval_acl_users[4-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval_acl_users[5-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval_acl_users[6-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval[0-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval[1-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval[2-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval[3-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval[4-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval[5-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_check_approval[6-200] /workflow/check_approval/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_nologin /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[0-200] /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[1-200] /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[2-200] /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[3-200] /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[4-200] /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[5-200] /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist_acl_users[6-200] /workflow/get_feedback_maillist/1
PASSED
tests/test_views.py::test_get_feedback_maillist[0-200] /workflow/get_feedback_maillist/1
FAILED
tests/test_views.py::test_get_feedback_maillist[1-200] /workflow/get_feedback_maillist/1
FAILED
tests/test_views.py::test_get_feedback_maillist[2-200] /workflow/get_feedback_maillist/1
FAILED
tests/test_views.py::test_get_feedback_maillist[3-200] /workflow/get_feedback_maillist/1
FAILED
tests/test_views.py::test_get_feedback_maillist[4-200] /workflow/get_feedback_maillist/1
FAILED
tests/test_views.py::test_get_feedback_maillist[5-200] /workflow/get_feedback_maillist/1
FAILED
tests/test_views.py::test_get_feedback_maillist[6-200] /workflow/get_feedback_maillist/1
FAILED
tests/test_views.py::test_save_activity_acl_nologin /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_users[0-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_users[1-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_users[2-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_users[3-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_users[4-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_users[5-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_users[6-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_acl_guestlogin /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity[0-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity[1-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity[2-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity[3-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity[4-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity[5-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity[6-200] /workflow/save_activity_data
PASSED
tests/test_views.py::test_save_activity_guestlogin /workflow/save_activity_data
PASSED
tests/test_views.py::test_withdraw_confirm_nologin /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_users[0-403-False] /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_users[1-403-True] /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_users[2-403-True] /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_users[3-403-True] /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_users[4-403-False] /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_users[5-403-False] /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_users[6-403-True] /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_guestlogin /workflow/activity/detail/1/1/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1[0] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1[1] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1[2] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1[3] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1[4] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1[5] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1[6] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception1_guestlogin /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[0-input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[0-input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[0-input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2[0-input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[1-input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[1-input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[1-input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2[1-input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[2-input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[2-input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[2-input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2[2-input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[3-input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[3-input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[3-input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2[3-input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[4-input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[4-input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[4-input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2[4-input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[5-input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[5-input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[5-input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2[5-input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[6-input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[6-input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2[6-input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2[6-input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2_guestlogin[input_data0-500--1-{'passwd': ['Missing data for required field.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2_guestlogin[input_data1-500--1-{'passwd': ['Field may not be null.']}] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_exception2_guestlogin[input_data2-500--1-bad identifier data] /workflow/activity/detail/1/2/withdraw
FAILED
tests/test_views.py::test_withdraw_confirm_exception2_guestlogin[input_data3-500--1-Invalid password] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[0-success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[1-success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[2-success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[3-success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[4-success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[5-success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete[6-success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_withdraw_confirm_passwd_delete_guestlogin[success-200-0-success] /workflow/activity/detail/1/2/withdraw
PASSED
tests/test_views.py::test_download_activitylog_nologin /workflow/download_activitylog/
PASSED
tests/test_views.py::test_download_activitylog_1[0-403] /workflow/download_activitylog/
PASSED
tests/test_views.py::test_download_activitylog_1[1-200] /workflow/download_activitylog/
FAILED
tests/test_views.py::test_download_activitylog_1[2-200] /workflow/download_activitylog/
FAILED
tests/test_views.py::test_download_activitylog_1[3-403] /workflow/download_activitylog/
PASSED
tests/test_views.py::test_download_activitylog_1[4-403] /workflow/download_activitylog/
PASSED
tests/test_views.py::test_download_activitylog_1[5-403] /workflow/download_activitylog/
PASSED
tests/test_views.py::test_download_activitylog_1[6-200] /workflow/download_activitylog/
FAILED
tests/test_views.py::test_download_activitylog_2[1-200] /workflow/download_activitylog/
FAILED
tests/test_views.py::test_download_activitylog_2[2-200] /workflow/download_activitylog/
FAILED
tests/test_views.py::test_download_activitylog_2[6-200] /workflow/download_activitylog/
FAILED
tests/test_views.py::test_clear_activitylog_nologin /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_1[0-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_1[1-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_1[2-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_1[3-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_1[4-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_1[5-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_1[6-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_2[1-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_2[2-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_2[6-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_3[1-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_3[2-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_3[6-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_4[1-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_4[2-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_4[6-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_5[0-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_5[1-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_5[2-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_5[3-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_5[4-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_5[5-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_5[6-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_6[1-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_6[2-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_6[6-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_7[1-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_7[2-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_7[6-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_8[1-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_8[2-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_8[6-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_9[0-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_9[1-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_9[2-200] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_9[3-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_9[4-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_9[5-403] /workflow/clear_activitylog/
PASSED
tests/test_views.py::test_clear_activitylog_9[6-200] /workflow/clear_activitylog/
PASSED

=================================== FAILURES ===================================
_______________ TestFlowSettingView.test_flow_detail_acl[1-200] ________________

self = <tests.test_admin.TestFlowSettingView object at 0x7f7ccd6d8ac8>
client = <FlaskClient <Flask 'testapp'>>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}
db_register2 = None
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        # (0, 403),
        (1, 200),
        # (2, 200),
        # (3, 200),
        # (4, 200),
        # (5, 200),
        # (6, 200),
    ])
    def test_flow_detail_acl(self,client,workflow,db_register2,users,users_index,status_code):
        flow_define = workflow['flow']
        login(client=client, email=users[users_index]['email'])
        url = '/admin/workflowsetting/{}'.format(0)
        print(url)
        with patch("flask.templating._render", return_value=""):
            res =  client.get(url)
            assert res.status_code == status_code
    
    
        url = '/admin/workflowsetting/{}'.format(flow_define.flow_id)
        with patch("flask.templating._render", return_value=""):
>           res =  client.get(url)

tests/test_admin.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:69: in inner
    return self._run_view(f, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:368: in _run_view
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <invenio_admin.views.protected_adminview_factory.<locals>.ProtectedAdminView object at 0x7f7ccd67fbe0>
workflow_id = 'fb1b6dce-b1f5-41f7-9001-1c5867f31644'

    @expose('/<string:workflow_id>', methods=['GET'])
    def workflow_detail(self, workflow_id='0'):
        """Get workflow info.
    
        :return:
        """
        if WEKO_WORKFLOW_SHOW_HARVESTING_ITEMS:
            itemtype_list = ItemTypes.get_latest()
        else:
            itemtype_list = ItemTypes.get_latest_custorm_harvesting()
        flow_api = Flow()
        flow_list = flow_api.get_flow_list()
        index_list = Index().get_all()
        location_list = Location.query.order_by(Location.id.asc()).all()
        hide = []
        role = Role.query.all()
        display_label = self.get_language_workflows("display")
        hide_label = self.get_language_workflows("hide")
        display_hide = self.get_language_workflows("display_hide")
    
        if '0' == workflow_id:
            """Create new workflow"""
            return self.render(
                'weko_workflow/admin/workflow_detail.html',
                workflow=None,
                itemtype_list=itemtype_list,
                flow_list=flow_list,
                index_list=index_list,
                location_list=location_list,
                hide_list=hide,
                display_list=role,
                display_label=display_label,
                hide_label=hide_label,
                display_hide_label=display_hide,
            )
    
        """Update the workflow info"""
        workflow = WorkFlow()
        workflows = workflow.get_workflow_detail(workflow_id)
        hide = Role.query.outerjoin(WorkflowRole) \
>           .filter(WorkflowRole.workflow_id == workflows.id) \
            .filter(WorkflowRole.role_id == Role.id) \
            .all()
E       AttributeError: 'NoneType' object has no attribute 'id'

weko_workflow/admin.py:294: AttributeError
_____________________ TestFlowSettingView.test_update_flow _____________________

self = <tests.test_admin.TestFlowSettingView object at 0x7f7cce45b6d8>
app = <Flask 'testapp'>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    def test_update_flow(self,app,workflow):
        with app.test_request_context():
>           assert FlowSettingView.update_flow(0)==""

tests/test_admin.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/admin.py:122: in update_flow
    workflow.upt_flow(flow_id, post_data)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <weko_workflow.api.Flow object at 0x7f7ccccfe4a8>, flow_id = 0
flow = None

    def upt_flow(self, flow_id, flow):
        """Update flow info.
    
        :param flow_id:
        :param flow:
        :return:
        """
        try:
>           flow_name = flow.get('flow_name')
E           AttributeError: 'NoneType' object has no attribute 'get'

weko_workflow/api.py:118: AttributeError
------------------------------ Captured log call -------------------------------
ERROR    flask.app:api.py:141 'NoneType' object has no attribute 'get'
Traceback (most recent call last):
  File "/code/modules/weko-workflow/weko_workflow/api.py", line 118, in upt_flow
    flow_name = flow.get('flow_name')
AttributeError: 'NoneType' object has no attribute 'get'
______________________ TestFlowSettingView.test_new_flow _______________________

self = <tests.test_admin.TestFlowSettingView object at 0x7f7ccca5b6d8>
app = <Flask 'testapp'>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    def test_new_flow(self,app,workflow):
        with app.test_request_context():
>           assert FlowSettingView.new_flow(0)==""

tests/test_admin.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 0, args = (), kwargs = {}

    @wraps(f)
    def inner(self, *args, **kwargs):
        # Store current admin view
        h.set_current_view(self)
    
        # Check if administrative piece is accessible
>       abort = self._handle_view(f.__name__, **kwargs)
E       AttributeError: 'int' object has no attribute '_handle_view'

.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:65: AttributeError
______________________ TestFlowSettingView.test_del_flow _______________________

self = <tests.test_admin.TestFlowSettingView object at 0x7f7ccc862710>
app = <Flask 'testapp'>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    def test_del_flow(self,app,workflow):
        with app.test_request_context():
>           assert FlowSettingView.del_flow(0)==""

tests/test_admin.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 0, args = (), kwargs = {}

    @wraps(f)
    def inner(self, *args, **kwargs):
        # Store current admin view
        h.set_current_view(self)
    
        # Check if administrative piece is accessible
>       abort = self._handle_view(f.__name__, **kwargs)
E       AttributeError: 'int' object has no attribute '_handle_view'

.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:65: AttributeError
_____________________ TestFlowSettingView.test_get_actions _____________________

self = <tests.test_admin.TestFlowSettingView object at 0x7f7ccc5eeeb8>
app = <Flask 'testapp'>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    def test_get_actions(self,app,workflow):
        with app.test_request_context():
>           assert FlowSettingView.get_actions()==""
E           AssertionError: assert [<Action 1>, <Action 2>, <Action 3>, <Action 4>, <Action 5>, <Action 7>] == ''
E             +[<Action 1>, <Action 2>, <Action 3>, <Action 4>, <Action 5>, <Action 7>]
E             -''

tests/test_admin.py:97: AssertionError
___________________ TestFlowSettingView.test_upt_flow_action ___________________

self = <tests.test_admin.TestFlowSettingView object at 0x7f7ccc1134e0>
app = <Flask 'testapp'>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    def test_upt_flow_action(self,app,workflow):
        with app.test_request_context():
>           assert FlowSettingView.upt_flow_action(0)==""

tests/test_admin.py:103: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 0, args = (), kwargs = {}

    @wraps(f)
    def inner(self, *args, **kwargs):
        # Store current admin view
        h.set_current_view(self)
    
        # Check if administrative piece is accessible
>       abort = self._handle_view(f.__name__, **kwargs)
E       AttributeError: 'int' object has no attribute '_handle_view'

.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:65: AttributeError
________________ TestWorkFlowSettingView.test_index_acl[1-200] _________________

self = <tests.test_admin.TestWorkFlowSettingView object at 0x7f7ccd682c88>
client = <FlaskClient <Flask 'testapp'>>, db_register2 = None
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        # (0, 403),
        (1, 200),
        # (2, 200),
        # (3, 200),
        # (4, 200),
        # (5, 200),
        # (6, 200),
    ])
    def test_index_acl(self,client,db_register2,users,users_index,status_code):
        login(client=client, email=users[users_index]['email'])
        url = url_for('workflowsetting.index',_external=True)
>       res =  client.get(url)

tests/test_admin.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:69: in inner
    return self._run_view(f, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:368: in _run_view
    return fn(self, *args, **kwargs)
weko_workflow/admin.py:251: in index
    display_label=display_label
.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:308: in render
    return render_template(template, **kwargs)
.tox/c1/lib/python3.6/site-packages/flask/templating.py:135: in render_template
    context, ctx.app)
.tox/c1/lib/python3.6/site-packages/flask/templating.py:117: in _render
    rv = template.render(context)
.tox/c1/lib/python3.6/site-packages/jinja2/asyncsupport.py:76: in render
    return original_render(self, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:1008: in render
    return self.environment.handle_exception(exc_info, True)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:780: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/jinja2/_compat.py:37: in reraise
    raise value.with_traceback(tb)
weko_workflow/templates/weko_workflow/admin/workflow_list.html:21: in top-level template code
    {%- extends admin_base_template %}
../weko-theme/weko_theme/templates/weko_theme/page_admin.html:28: in top-level template code
    {%- block head %}
../weko-theme/weko_theme/templates/weko_theme/page_admin.html:50: in block "head"
    {%- block css %}
weko_workflow/templates/weko_workflow/admin/workflow_list.html:24: in block "css"
    {{ super() }}
../weko-theme/weko_theme/templates/weko_theme/page_admin.html:51: in block "css"
    {% assets "invenio_theme_css" %}
.tox/c1/lib/python3.6/site-packages/webassets/ext/jinja2.py:186: in _render_assets
    urls = bundle.urls()
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:806: in urls
    urls.extend(bundle._urls(new_ctx, extra_filters, *args, **kwargs))
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:765: in _urls
    *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:619: in _build
    force, disable_cache=disable_cache, extra_filters=extra_filters)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:543: in _merge_and_apply
    kwargs=item_data)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:276: in apply
    return self._wrap_cache(key, func)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:213: in _wrap_cache
    content = self.cache.get(key)
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:183: in get
    filename = path.join(self.directory, '%s' % make_md5(self.V, key))
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:84: in make_md5
    for d in walk(data):
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:67: in walk
    yield obj.data().encode('utf-8')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <FileHunk /code/modules/weko-workflow/static/scss/invenio_theme/styles.scss>

    def data(self):
>       f = open(self.filename, 'r', encoding='utf-8')
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/weko-workflow/static/scss/invenio_theme/styles.scss'

.tox/c1/lib/python3.6/site-packages/webassets/merge.py:77: FileNotFoundError
___________ TestWorkFlowSettingView.test_update_workflow_acl[1-200] ____________

self = <tests.test_admin.TestWorkFlowSettingView object at 0x7f7ccb4bbb38>
client = <FlaskClient <Flask 'testapp'>>, db_register2 = None
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        # (0, 403),
        (1, 200),
        # (2, 200),
        # (3, 200),
        # (4, 200),
        # (5, 200),
        # (6, 200),
    ])
    def test_update_workflow_acl(self,client,db_register2,users,users_index,status_code):
        login(client=client, email=users[users_index]['email'])
        url = url_for('workflowsetting.update_workflow',workflow_id='0',_external=True)
        with patch("flask.templating._render", return_value=""):
>           res =  client.post(url)

tests/test_admin.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:69: in inner
    return self._run_view(f, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/flask_admin/base.py:368: in _run_view
    return fn(self, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <invenio_admin.views.protected_adminview_factory.<locals>.ProtectedAdminView object at 0x7f7ccb4dfe10>
workflow_id = '0'

    @expose('/<string:workflow_id>', methods=['POST', 'PUT'])
    def update_workflow(self, workflow_id='0'):
        """Update workflow info.
    
        :return:
        """
        json_data = request.get_json()
>       list_hide = json_data.get('list_hide', [])
E       AttributeError: 'NoneType' object has no attribute 'get'

weko_workflow/admin.py:324: AttributeError
_______________ TestWorkFlowSettingView.test_save_workflow_role ________________

self = <tests.test_admin.TestWorkFlowSettingView object at 0x7f7cca867e48>
app = <Flask 'testapp'>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}

    def test_save_workflow_role(self,app,users,workflow):
        role0 = (users[0]['obj']).roles[0]
        role1 = (users[1]['obj']).roles[0]
        role2 = (users[2]['obj']).roles[0]
        role3 = (users[3]['obj']).roles[0]
        role4 = (users[4]['obj']).roles[0]
    
        wf = workflow['workflow']
    
        with app.test_request_context():
>           assert WorkFlowSettingView.save_workflow_role(wf.id,[role0.id,role1.id,role2.id,role3.id,role4.id])
E           AssertionError: assert None
E            +  where None = <bound method WorkFlowSettingView.save_workflow_role of <class 'weko_workflow.admin.WorkFlowSettingView'>>(1, [])
E            +    where <bound method WorkFlowSettingView.save_workflow_role of <class 'weko_workflow.admin.WorkFlowSettingView'>> = WorkFlowSettingView.save_workflow_role
E            +    and   1 = <WorkFlow 1>.id

tests/test_admin.py:249: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    flask.app:admin.py:433 wf_id:1
ERROR    flask.app:admin.py:435 list_hide:[4, 3, 1, 5, 6]
_____________ TestWorkFlowSettingView.test_get_language_workflows ______________

self = <tests.test_admin.TestWorkFlowSettingView object at 0x7f7cca0fa320>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]

    def test_get_language_workflows(self,users):
>       with self.test_request_context():
E       AttributeError: 'TestWorkFlowSettingView' object has no attribute 'test_request_context'

tests/test_admin.py:254: AttributeError
__________________________ test_init_workflow_tables ___________________________

app = <Flask 'testapp'>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]

    def test_init_workflow_tables(app,db,users):
        runner = app.test_cli_runner()
        result = runner.invoke(init_workflow_tables,["Action,action_status"])
        assert result.output ==  'workflow db has been initialised.\n'
        assert result.exit_code == 0
    
        result = runner.invoke(init_workflow_tables,["gakuninrdm_data"])
>       assert result.output == ""
E       assert ("(sqlite3.IntegrityError) FOREIGN KEY constraint failed [SQL: 'INSERT INTO "\n 'workflow_workflow (status, created, updated, id, flows_id, flows_name, '\n 'itemtype_id, flow_id, is_deleted, open_restricted, is_gakuninrdm) VALUES (?, '\n "?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'] [parameters: ('N', '2023-03-30 "\n "03:00:01.233996', '2023-03-30 03:00:01.234001', -1, <memory at "\n "0x7f7cce2fad08>, 'GRDM_デフォルトワークフロー', 15, -1, 0, 0, 1)] (Background on this "\n 'error at: http://sqlalche.me/e/gkpj)\n'\n 'workflow db init failed.\n') == ''
E         + (sqlite3.IntegrityError) FOREIGN KEY constraint failed [SQL: 'INSERT INTO workflow_workflow (status, created, updated, id, flows_id, flows_name, itemtype_id, flow_id, is_deleted, open_restricted, is_gakuninrdm) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'] [parameters: ('N', '2023-03-30 03:00:01.233996', '2023-03-30 03:00:01.234001', -1, <memory at 0x7f7cce2fad08>, 'GRDM_デフォルトワークフロー', 15, -1, 0, 0, 1)] (Background on this error at: http://sqlalche.me/e/gkpj)
E         + workflow db init failed.

tests/test_cli.py:27: AssertionError
________________________ test_item_metadata_validation _________________________

self = <sqlalchemy.engine.base.Connection object at 0x7f7cca5ce240>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f7cc8850cc0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f7cc96d7a90>
parameters = [immutabledict({})]
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f7cc96d7a90>, [immutabledict({})])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7f7cc91f29b0>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
>           context = constructor(dialect, self, conn, *args)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f7cc8850cc0>
connection = <sqlalchemy.engine.base.Connection object at 0x7f7cca5ce240>
dbapi_connection = <sqlalchemy.pool._ConnectionFairy object at 0x7f7cc91f29b0>
compiled = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f7cc96d7a90>
parameters = []

    @classmethod
    def _init_compiled(
        cls, dialect, connection, dbapi_connection, compiled, parameters
    ):
        """Initialize execution context for a Compiled construct."""
    
        self = cls.__new__(cls)
        self.root_connection = connection
        self._dbapi_connection = dbapi_connection
        self.dialect = connection.dialect
    
        self.compiled = compiled
    
        # this should be caught in the engine before
        # we get here
        assert compiled.can_execute
    
        self.execution_options = compiled.execution_options.union(
            connection._execution_options
        )
    
        self.result_column_struct = (
            compiled._result_columns,
            compiled._ordered_columns,
            compiled._textual_ordered_columns,
        )
    
        self.unicode_statement = util.text_type(compiled)
        if not dialect.supports_unicode_statements:
            self.statement = self.unicode_statement.encode(
                self.dialect.encoding
            )
        else:
            self.statement = self.unicode_statement
    
        self.isinsert = compiled.isinsert
        self.isupdate = compiled.isupdate
        self.isdelete = compiled.isdelete
        self.is_text = compiled.isplaintext
    
        if not parameters:
            self.compiled_parameters = [compiled.construct_params()]
        else:
            self.compiled_parameters = [
                compiled.construct_params(m, _group_number=grp)
                for grp, m in enumerate(parameters)
            ]
    
            self.executemany = len(parameters) > 1
    
        self.cursor = self.create_cursor()
    
        if self.isinsert or self.isupdate or self.isdelete:
            self.is_crud = True
            self._is_explicit_returning = bool(compiled.statement._returning)
            self._is_implicit_returning = bool(
                compiled.returning and not compiled.statement._returning
            )
    
        if self.compiled.insert_prefetch or self.compiled.update_prefetch:
            if self.executemany:
                self._process_executemany_defaults()
            else:
                self._process_executesingle_defaults()
    
        processors = compiled._bind_processors
    
        if compiled.contains_expanding_parameters:
            positiontup = self._expand_in_parameters(compiled, processors)
        elif compiled.positional:
            positiontup = self.compiled.positiontup
    
        # Convert the dictionary of bind parameter values
        # into a dict or list to be sent to the DBAPI's
        # execute() or executemany() method.
        parameters = []
        if compiled.positional:
            for compiled_params in self.compiled_parameters:
                param = []
                for key in positiontup:
                    if key in processors:
>                       param.append(processors[key](compiled_params[key]))

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:703: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

value = 1

    def process(value):
>       return impl_processor(process_param(value, dialect))

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/type_api.py:1189: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = UUIDType(length=16), value = 1
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f7cc8850cc0>

    def process_bind_param(self, value, dialect):
        if value is None:
            return value
    
        if not isinstance(value, uuid.UUID):
>           value = self._coerce(value)

.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/types/uuid.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

value = 1

    @staticmethod
    def _coerce(value):
        if value and not isinstance(value, uuid.UUID):
            try:
>               value = uuid.UUID(value)

.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/types/uuid.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'UUID' object has no attribute 'int'",) raised in repr()] UUID object at 0x7f7cca6c1ba8>
hex = 1, bytes = None, bytes_le = None, fields = None, int = None
version = None

    def __init__(self, hex=None, bytes=None, bytes_le=None, fields=None,
                       int=None, version=None):
        r"""Create a UUID from either a string of 32 hexadecimal digits,
        a string of 16 bytes as the 'bytes' argument, a string of 16 bytes
        in little-endian order as the 'bytes_le' argument, a tuple of six
        integers (32-bit time_low, 16-bit time_mid, 16-bit time_hi_version,
        8-bit clock_seq_hi_variant, 8-bit clock_seq_low, 48-bit node) as
        the 'fields' argument, or a single 128-bit integer as the 'int'
        argument.  When a string of hex digits is given, curly braces,
        hyphens, and a URN prefix are all optional.  For example, these
        expressions all yield the same UUID:
    
        UUID('{12345678-1234-5678-1234-567812345678}')
        UUID('12345678123456781234567812345678')
        UUID('urn:uuid:12345678-1234-5678-1234-567812345678')
        UUID(bytes='\x12\x34\x56\x78'*4)
        UUID(bytes_le='\x78\x56\x34\x12\x34\x12\x78\x56' +
                      '\x12\x34\x56\x78\x12\x34\x56\x78')
        UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))
        UUID(int=0x12345678123456781234567812345678)
    
        Exactly one of 'hex', 'bytes', 'bytes_le', 'fields', or 'int' must
        be given.  The 'version' argument is optional; if given, the resulting
        UUID will have its variant and version set according to RFC 4122,
        overriding the given 'hex', 'bytes', 'bytes_le', 'fields', or 'int'.
        """
    
        if [hex, bytes, bytes_le, fields, int].count(None) != 4:
            raise TypeError('one of the hex, bytes, bytes_le, fields, '
                            'or int arguments must be given')
        if hex is not None:
>           hex = hex.replace('urn:', '').replace('uuid:', '')
E           AttributeError: 'int' object has no attribute 'replace'

/usr/local/lib/python3.6/uuid.py:137: AttributeError

The above exception was the direct cause of the following exception:

db_records = [(<PersistentIdentifier recid:1 / rec:f9364218-51b9-4bfc-b4d6-6fd0bcb1044d (R)>, <PersistentIdentifier depid:1 / rec:f...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:644f8580-8956-443f-95f8-506fa11a2ee8 (R)>, None, ...)]

    def test_item_metadata_validation(db_records):
        recid, depid, record, item, parent, doi, deposit = db_records[0]
>       result = item_metadata_validation(recid.id,"hdl")

tests/test_utils.py:298: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/utils.py:349: in item_metadata_validation
    item_id) if item_id else MappingData(record=record)
weko_workflow/utils.py:810: in __init__
    self.record = WekoRecord.get_record(item_id) if item_id else record
../invenio-records/invenio_records/api.py:206: in get_record
    obj = query.one()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3039: in one
    ret = self.one_or_none()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3008: in one_or_none
    ret = list(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3081: in __iter__
    return self._execute_and_instances(context)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3106: in _execute_and_instances
    result = conn.execute(querycontext.statement, self._params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1174: in _execute_context
    e, util.text_type(statement), parameters, None, None
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1171: in _execute_context
    context = constructor(dialect, self, conn, *args)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:703: in _init_compiled
    param.append(processors[key](compiled_params[key]))
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/type_api.py:1189: in process
    return impl_processor(process_param(value, dialect))
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/types/uuid.py:68: in process_bind_param
    value = self._coerce(value)
.tox/c1/lib/python3.6/site-packages/sqlalchemy_utils/types/uuid.py:56: in _coerce
    value = uuid.UUID(value)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'UUID' object has no attribute 'int'",) raised in repr()] UUID object at 0x7f7cca6c1ba8>
hex = 1, bytes = None, bytes_le = None, fields = None, int = None
version = None

    def __init__(self, hex=None, bytes=None, bytes_le=None, fields=None,
                       int=None, version=None):
        r"""Create a UUID from either a string of 32 hexadecimal digits,
        a string of 16 bytes as the 'bytes' argument, a string of 16 bytes
        in little-endian order as the 'bytes_le' argument, a tuple of six
        integers (32-bit time_low, 16-bit time_mid, 16-bit time_hi_version,
        8-bit clock_seq_hi_variant, 8-bit clock_seq_low, 48-bit node) as
        the 'fields' argument, or a single 128-bit integer as the 'int'
        argument.  When a string of hex digits is given, curly braces,
        hyphens, and a URN prefix are all optional.  For example, these
        expressions all yield the same UUID:
    
        UUID('{12345678-1234-5678-1234-567812345678}')
        UUID('12345678123456781234567812345678')
        UUID('urn:uuid:12345678-1234-5678-1234-567812345678')
        UUID(bytes='\x12\x34\x56\x78'*4)
        UUID(bytes_le='\x78\x56\x34\x12\x34\x12\x78\x56' +
                      '\x12\x34\x56\x78\x12\x34\x56\x78')
        UUID(fields=(0x12345678, 0x1234, 0x5678, 0x12, 0x34, 0x567812345678))
        UUID(int=0x12345678123456781234567812345678)
    
        Exactly one of 'hex', 'bytes', 'bytes_le', 'fields', or 'int' must
        be given.  The 'version' argument is optional; if given, the resulting
        UUID will have its variant and version set according to RFC 4122,
        overriding the given 'hex', 'bytes', 'bytes_le', 'fields', or 'int'.
        """
    
        if [hex, bytes, bytes_le, fields, int].count(None) != 4:
            raise TypeError('one of the hex, bytes, bytes_le, fields, '
                            'or int arguments must be given')
        if hex is not None:
>           hex = hex.replace('urn:', '').replace('uuid:', '')
E           sqlalchemy.exc.StatementError: (builtins.AttributeError) 'int' object has no attribute 'replace' [SQL: 'SELECT records_metadata.created AS records_metadata_created, records_metadata.updated AS records_metadata_updated, records_metadata.id AS records_metadata_id, records_metadata.json AS records_metadata_json, records_metadata.version_id AS records_metadata_version_id \nFROM records_metadata \nWHERE records_metadata.id = ? AND records_metadata.json IS NOT NULL'] [parameters: [{}]]

/usr/local/lib/python3.6/uuid.py:137: StatementError
________________ test_handle_check_required_pattern_and_either _________________

db_records = [(<PersistentIdentifier recid:1 / rec:ce33210b-9697-4aad-b23f-06dc164d0d6a (R)>, <PersistentIdentifier depid:1 / rec:c...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:11d39667-706e-493f-9566-472d4441335e (R)>, None, ...)]
item_type = <ItemType 1>

    def test_handle_check_required_pattern_and_either(db_records,item_type):
>       result = handle_check_required_pattern_and_either(None,None)
E       NameError: name 'handle_check_required_pattern_and_either' is not defined

tests/test_utils.py:364: NameError
______________________________ test_delete_bucket ______________________________

self = <sqlalchemy.engine.base.Connection object at 0x7f7cc6678cf8>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f7cc7507da0>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = 'DELETE FROM files_bucket WHERE files_bucket.id = ?'
parameters = (<memory at 0x7f7cc5216588>,)
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f7cc6663c88>, [{}])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7f7cc6820908>
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f7cc6663940>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
            context = constructor(dialect, self, conn, *args)
        except BaseException as e:
            self._handle_dbapi_exception(
                e, util.text_type(statement), parameters, None, None
            )
    
        if context.compiled:
            context.pre_exec()
    
        cursor, statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        if not context.executemany:
            parameters = parameters[0]
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                statement, parameters = fn(
                    self,
                    cursor,
                    statement,
                    parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self.engine.logger.info(statement)
            self.engine.logger.info(
                "%r", sql_util._repr_params(parameters, batches=10)
            )
    
        evt_handled = False
        try:
            if context.executemany:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor, statement, parameters, context
                    )
            elif not parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, statement, context
                    )
            else:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(cursor, statement, parameters, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute(
>                       cursor, statement, parameters, context
                    )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f7cc7507da0>
cursor = <sqlite3.Cursor object at 0x7f7cc624f340>
statement = 'DELETE FROM files_bucket WHERE files_bucket.id = ?'
parameters = (<memory at 0x7f7cc5216588>,)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f7cc6663940>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: FOREIGN KEY constraint failed

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError

The above exception was the direct cause of the following exception:

db_records = [(<PersistentIdentifier recid:1 / rec:32e166ca-4397-4fad-9dad-7bf8cd2a2018 (R)>, <PersistentIdentifier depid:1 / rec:3...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:7c846e64-e7f8-4339-a868-6713419c8d66 (R)>, None, ...)]
add_file = <function add_file.<locals>.factory at 0x7f7cc59691e0>

    def test_delete_bucket(db_records, add_file):
        bucket,_ = add_file(db_records[2][2])
        bucket_id = bucket.id
>       delete_bucket(bucket_id)

tests/test_utils.py:752: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/utils.py:1150: in delete_bucket
    bucket.remove()
../invenio-files-rest/invenio_files_rest/models.py:151: in inner
    return f(self, *args, **kwargs)
../invenio-files-rest/invenio_files_rest/models.py:588: in remove
    self.query.filter_by(id=self.id).delete()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3440: in delete
    delete_op.exec_()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1636: in exec_
    self._do_exec()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1866: in _do_exec
    self._execute_stmt(delete_stmt)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1642: in _execute_stmt
    stmt, params=self.query._params, mapper=self.mapper
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1263: in execute
    clause, params or {}
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1240: in _execute_context
    e, statement, parameters, cursor, context
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1236: in _execute_context
    cursor, statement, parameters, context
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f7cc7507da0>
cursor = <sqlite3.Cursor object at 0x7f7cc624f340>
statement = 'DELETE FROM files_bucket WHERE files_bucket.id = ?'
parameters = (<memory at 0x7f7cc5216588>,)
context = <sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x7f7cc6663940>

    def do_execute(self, cursor, statement, parameters, context=None):
>       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) FOREIGN KEY constraint failed [SQL: 'DELETE FROM files_bucket WHERE files_bucket.id = ?'] [parameters: (<memory at 0x7f7cc5216588>,)] (Background on this error at: http://sqlalche.me/e/gkpj)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:536: IntegrityError
_________________________ test_set_bucket_default_size _________________________

db_records = [(<PersistentIdentifier recid:1 / rec:4cfb9ffc-1615-4655-affa-4de284035f95 (R)>, <PersistentIdentifier depid:1 / rec:4...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:ed692062-2143-40e2-b1fb-6b8864bec589 (R)>, None, ...)]
add_file = <function add_file.<locals>.factory at 0x7f7cc3cd4f28>

    def test_set_bucket_default_size(db_records, add_file):
        bucket_10, rbucket_10 = add_file(db_records[2][2])
>       set_bucket_default_size(rbucket_10.id)
E       AttributeError: 'RecordsBuckets' object has no attribute 'id'

tests/test_utils.py:784: AttributeError
__________________________ test_prepare_edit_workflow __________________________

self = <sqlalchemy.engine.base.Connection object at 0x7f7cc2a91a20>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f7cc741d4a8>
constructor = <bound method DefaultExecutionContext._init_compiled of <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>>
statement = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f7cc2a91a58>
parameters = [{'activity_count': 1, 'date': '2023-03-30'}]
args = (<sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f7cc2a91a58>, [{'activity_count': 1, 'date': '2023-03-30'}])
conn = <sqlalchemy.pool._ConnectionFairy object at 0x7f7cc47854a8>

    def _execute_context(
        self, dialect, constructor, statement, parameters, *args
    ):
        """Create an :class:`.ExecutionContext` and execute, returning
        a :class:`.ResultProxy`."""
    
        try:
            try:
                conn = self.__connection
            except AttributeError:
                # escape "except AttributeError" before revalidating
                # to prevent misleading stacktraces in Py3K
                conn = None
            if conn is None:
                conn = self._revalidate_connection()
    
>           context = constructor(dialect, self, conn, *args)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext'>
dialect = <sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x7f7cc741d4a8>
connection = <sqlalchemy.engine.base.Connection object at 0x7f7cc2a91a20>
dbapi_connection = <sqlalchemy.pool._ConnectionFairy object at 0x7f7cc47854a8>
compiled = <sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x7f7cc2a91a58>
parameters = []

    @classmethod
    def _init_compiled(
        cls, dialect, connection, dbapi_connection, compiled, parameters
    ):
        """Initialize execution context for a Compiled construct."""
    
        self = cls.__new__(cls)
        self.root_connection = connection
        self._dbapi_connection = dbapi_connection
        self.dialect = connection.dialect
    
        self.compiled = compiled
    
        # this should be caught in the engine before
        # we get here
        assert compiled.can_execute
    
        self.execution_options = compiled.execution_options.union(
            connection._execution_options
        )
    
        self.result_column_struct = (
            compiled._result_columns,
            compiled._ordered_columns,
            compiled._textual_ordered_columns,
        )
    
        self.unicode_statement = util.text_type(compiled)
        if not dialect.supports_unicode_statements:
            self.statement = self.unicode_statement.encode(
                self.dialect.encoding
            )
        else:
            self.statement = self.unicode_statement
    
        self.isinsert = compiled.isinsert
        self.isupdate = compiled.isupdate
        self.isdelete = compiled.isdelete
        self.is_text = compiled.isplaintext
    
        if not parameters:
            self.compiled_parameters = [compiled.construct_params()]
        else:
            self.compiled_parameters = [
                compiled.construct_params(m, _group_number=grp)
                for grp, m in enumerate(parameters)
            ]
    
            self.executemany = len(parameters) > 1
    
        self.cursor = self.create_cursor()
    
        if self.isinsert or self.isupdate or self.isdelete:
            self.is_crud = True
            self._is_explicit_returning = bool(compiled.statement._returning)
            self._is_implicit_returning = bool(
                compiled.returning and not compiled.statement._returning
            )
    
        if self.compiled.insert_prefetch or self.compiled.update_prefetch:
            if self.executemany:
                self._process_executemany_defaults()
            else:
                self._process_executesingle_defaults()
    
        processors = compiled._bind_processors
    
        if compiled.contains_expanding_parameters:
            positiontup = self._expand_in_parameters(compiled, processors)
        elif compiled.positional:
            positiontup = self.compiled.positiontup
    
        # Convert the dictionary of bind parameter values
        # into a dict or list to be sent to the DBAPI's
        # execute() or executemany() method.
        parameters = []
        if compiled.positional:
            for compiled_params in self.compiled_parameters:
                param = []
                for key in positiontup:
                    if key in processors:
>                       param.append(processors[key](compiled_params[key]))

.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:703: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

value = '2023-03-30'

    def process(value):
        if value is None:
            return None
        elif isinstance(value, datetime_date):
            return format_ % {
                "year": value.year,
                "month": value.month,
                "day": value.day,
            }
        else:
            raise TypeError(
>               "SQLite Date type only accepts Python "
                "date objects as input."
            )
E           TypeError: SQLite Date type only accepts Python date objects as input.

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:698: TypeError

The above exception was the direct cause of the following exception:

app = <Flask 'testapp'>
workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}
db_records = [(<[InvalidRequestError("This Session's transaction has been rolled back due to a previous exception during flush. To ...ity_count': 1, 'date': '2023-03-30'}]]",) raised in repr()] PersistentIdentifier object at 0x7f7cc87f7208>, None, ...)]
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f7cc4a42278>

    def test_prepare_edit_workflow(app, workflow, db_records,users,mocker):
        #login(client=client, email=users[2]["email"])
        with app.test_request_context():
            login_user(users[2]["obj"])
            mocker.patch("weko_workflow.utils.WekoDeposit.update")
            mocker.patch("weko_workflow.utils.WekoDeposit.commit")
            data = {
                "flow_id":workflow["flow"].id,
                "workflow_id":workflow["workflow"].id,
                "community":1,
                "itemtype_id":1,
                "activity_login_user":1,
                "activity_update_user":1
            }
            recid = db_records[0][0]
            deposit = db_records[0][6]
>           result = prepare_edit_workflow(data,recid,deposit)

tests/test_utils.py:903: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
weko_workflow/utils.py:1462: in prepare_edit_workflow
    draft_pid.object_uuid)
weko_workflow/api.py:734: in init_activity
    raise ex
weko_workflow/api.py:716: in init_activity
    activity_id=self.get_new_activity_id(),
weko_workflow/api.py:815: in get_new_activity_id
    raise ex
weko_workflow/api.py:810: in get_new_activity_id
    prev_counts = ActivityCount.query.filter(ActivityCount.date<current_date).all()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:2925: in all
    return list(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/query.py:3080: in __iter__
    self.session._autoflush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1582: in _autoflush
    util.raise_from_cause(e)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:1571: in _autoflush
    self.flush()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2446: in flush
    self._flush(objects)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2584: in _flush
    transaction.rollback(_capture_exception=True)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py:67: in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:277: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2544: in _flush
    flush_context.execute()
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:416: in execute
    rec.execute(self)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py:583: in execute
    uow,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:245: in save_obj
    insert,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py:1063: in _emit_insert_statements
    c = cached_connections[connection].execute(statement, multiparams)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:273: in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1099: in _execute_clauseelement
    distilled_params,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1174: in _execute_context
    e, util.text_type(statement), parameters, None, None
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1458: in _handle_dbapi_exception
    util.raise_from_cause(sqlalchemy_exception, exc_info)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1171: in _execute_context
    context = constructor(dialect, self, conn, *args)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/default.py:703: in _init_compiled
    param.append(processors[key](compiled_params[key]))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

value = '2023-03-30'

    def process(value):
        if value is None:
            return None
        elif isinstance(value, datetime_date):
            return format_ % {
                "year": value.year,
                "month": value.month,
                "day": value.day,
            }
        else:
            raise TypeError(
>               "SQLite Date type only accepts Python "
                "date objects as input."
            )
E           sqlalchemy.exc.StatementError: (raised as a result of Query-invoked autoflush; consider using a session.no_autoflush block if this flush is occurring prematurely) (builtins.TypeError) SQLite Date type only accepts Python date objects as input. [SQL: 'INSERT INTO workflow_activity_count (status, created, updated, date, activity_count) VALUES (?, ?, ?, ?, ?)'] [parameters: [{'activity_count': 1, 'date': '2023-03-30'}]]

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:698: StatementError
_________________________ test_handle_finish_workflow __________________________

workflow = {'flow': <FlowDefine 1>, 'flow_action': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...], 'workflow': <WorkFlow 1>}
db_records = [(<PersistentIdentifier recid:1 / rec:92c453f0-9e6e-4636-9d27-4b49805af1ca (R)>, <PersistentIdentifier depid:1 / rec:9...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:fa389054-ab60-435a-b59d-7cedf6a1ff43 (R)>, None, ...)]
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f7cc5e92278>

    def test_handle_finish_workflow(workflow, db_records, mocker):
        result = handle_finish_workflow(None, None, None)
        assert result == None
        mocker.patch("weko_deposit.api.WekoDeposit.publish")
        mocker.patch("weko_deposit.api.WekoDeposit.commit")
>       mocker.patch("weko_workflow.utils.update_records_sets.delay")

tests/test_utils.py:912: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/pytest_mock/plugin.py:384: in __call__
    **kwargs
.tox/c1/lib/python3.6/site-packages/pytest_mock/plugin.py:183: in _start_patch
    mocked = p.start()  # type: unittest.mock.MagicMock
/usr/local/lib/python3.6/unittest/mock.py:1378: in start
    result = self.__enter__()
/usr/local/lib/python3.6/unittest/mock.py:1231: in __enter__
    self.target = self.getter()
/usr/local/lib/python3.6/unittest/mock.py:1401: in <lambda>
    getter = lambda: _importer(target)
/usr/local/lib/python3.6/unittest/mock.py:1088: in _importer
    thing = _dot_lookup(thing, comp, import_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

thing = <module 'weko_workflow.utils' from '/code/modules/weko-workflow/weko_workflow/utils.py'>
comp = 'update_records_sets'
import_path = 'weko_workflow.utils.update_records_sets'

    def _dot_lookup(thing, comp, import_path):
        try:
            return getattr(thing, comp)
        except AttributeError:
>           __import__(import_path)
E           ModuleNotFoundError: No module named 'weko_workflow.utils.update_records_sets'; 'weko_workflow.utils' is not a package

/usr/local/lib/python3.6/unittest/mock.py:1077: ModuleNotFoundError
__________________________ test_modify_item_metadata ___________________________

app = <Flask 'testapp'>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f7cbd619cf8>

    def test_modify_item_metadata(app,db,db_register,users,mocker):
        activity = db_register["activities"][1]
        item_id = activity.item_id
        item = ItemsMetadata.get_record(id_=item_id).dumps()
        workflow = db_register["workflow"]
        item_type_id = workflow.itemtype_id
        activity_id = activity.activity_id
        data_dict={'subitem_1551255647225': 'title', 'subitem_1551255648112': 'ja', 'subitem_identifier_reg_text': 'test_2/0000000001', 'subitem_identifier_reg_type': 'JaLC'}
        schema = ItemTypes.get_by_id(item_type_id).schema
        owner_id = users[2]["id"]
        related_title = "related_title"
    
        user_profile = UserProfile(
            user_id=db_register["activities"][1].activity_login_user,
            _username="sysadmin",
            fullname="sysadmin user",
            timezone="asia",
            language="japanese",
            _displayname="display sysadmin"
        )
        db.session.add(user_profile)
        db.session.commit()
        app.config.update(
            WEKO_ITEMS_UI_USAGE_REPORT_TITLE = {"en":"en_usage_title","ja":"ja_usage_title"}
        )
        data_dict = {
            'subitem_1551255647225': 'title',
            'subitem_1551255648112': 'ja',
            'subitem_identifier_reg_text': 'test_2/0000000001',
            'subitem_identifier_reg_type': 'JaLC'
        }
        schema_dict = {
            "subitem_1551255647225":"item_1617186331708",
            "subitem_1551255648112":"item_1617186331708",
            "subitem_identifier_reg_text":"item_1617186819068",
            "subitem_identifier_reg_type":"item_1617186819068"
        }
    
        test = {'id': '1.1', 'pid': {'type': 'depid', 'value': '1.1', 'revision_id': 0}, 'lang': 'ja', 'owner': '1', 'title': 'related_title - ja_usage_title - 2 - ', 'owners': [1], 'status': 'published', '$schema': 'items/jsonschema/1', 'pubdate': '2022-08-20', 'created_by': 1, 'owners_ext': {'email': 'wekosoftware@nii.ac.jp', 'username': '', 'displayname': ''}, 'shared_user_id': -1, 'item_1617186331708': [{'subitem_1551255647225': 'ff', 'subitem_1551255648112': 'ja'}], "item_1617186819068":{'subitem_identifier_reg_text': 'test_2/0000000001','subitem_identifier_reg_type': 'JaLC'},'item_1617258105262': {'resourceuri': 'http://purl.org/coar/resource_type/c_5794', 'resourcetype': 'conference paper'}}
        mocker.patch("weko_workflow.utils.get_shema_dict",return_value=schema_dict)
        result = modify_item_metadata(item,item_type_id,"new activity",activity_id,
                             data_dict,schema,owner_id,related_title)
    
>       assert result == test
E       AssertionError: assert {'$schema': 'items/jsonschema/1',\n 'created_by': 1,\n 'id': '1.1',\n 'item_1617186331708': [{'subitem_1551255647225': 'ff',\n                         'subitem_1551255648112': 'ja'}],\n 'item_1617186819068': {'subitem_identifier_reg_text': 'test_2/0000000001',\n                        'subitem_identifier_reg_type': 'JaLC'},\n 'item_1617258105262': {'resourcetype': 'conference paper',\n                        'resourceuri': 'http://purl.org/coar/resource_type/c_5794'},\n 'lang': 'ja',\n 'owner': '1',\n 'owners': [1],\n 'owners_ext': {'displayname': '',\n                'email': 'wekosoftware@nii.ac.jp',\n                'username': ''},\n 'pid': {'revision_id': 0, 'type': 'depid', 'value': '1.1'},\n 'pubdate': '2022-08-20',\n 'shared_user_id': '2',\n 'status': 'published',\n 'title': 'related_title - ja_usage_title - 2 - '} == {'$schema': 'items/jsonschema/1',\n 'created_by': 1,\n 'id': '1.1',\n 'item_1617186331708': [{'subitem_1551255647225': 'ff',\n                         'subitem_1551255648112': 'ja'}],\n 'item_1617186819068': {'subitem_identifier_reg_text': 'test_2/0000000001',\n                        'subitem_identifier_reg_type': 'JaLC'},\n 'item_1617258105262': {'resourcetype': 'conference paper',\n                        'resourceuri': 'http://purl.org/coar/resource_type/c_5794'},\n 'lang': 'ja',\n 'owner': '1',\n 'owners': [1],\n 'owners_ext': {'displayname': '',\n                'email': 'wekosoftware@nii.ac.jp',\n                'username': ''},\n 'pid': {'revision_id': 0, 'type': 'depid', 'value': '1.1'},\n 'pubdate': '2022-08-20',\n 'shared_user_id': -1,\n 'status': 'published',\n 'title': 'related_title - ja_usage_title - 2 - '}
E         Common items:
E         {'$schema': 'items/jsonschema/1',
E          'created_by': 1,
E          'id': '1.1',
E          'item_1617186331708': [{'subitem_1551255647225': 'ff',
E                                  'subitem_1551255648112': 'ja'}],
E          'item_1617186819068': {'subitem_identifier_reg_text': 'test_2/0000000001',
E                                 'subitem_identifier_reg_type': 'JaLC'},
E          'item_1617258105262': {'resourcetype': 'conference paper',
E                                 'resourceuri': 'http://purl.org/coar/resource_type/c_5794'},
E          'lang': 'ja',
E          'owner': '1',
E          'owners': [1],
E          'owners_ext': {'displayname': '',
E                         'email': 'wekosoftware@nii.ac.jp',
E                         'username': ''},
E          'pid': {'revision_id': 0, 'type': 'depid', 'value': '1.1'},
E          'pubdate': '2022-08-20',
E          'status': 'published',
E          'title': 'related_title - ja_usage_title - 2 - '}
E         Differing items:
E         {'shared_user_id': '2'} != {'shared_user_id': -1}
E         Full diff:
E           {
E            '$schema': 'items/jsonschema/1',
E            'created_by': 1,
E            'id': '1.1',
E            'item_1617186331708': [{'subitem_1551255647225': 'ff',
E                                    'subitem_1551255648112': 'ja'}],
E            'item_1617186819068': {'subitem_identifier_reg_text': 'test_2/0000000001',
E                                   'subitem_identifier_reg_type': 'JaLC'},
E            'item_1617258105262': {'resourcetype': 'conference paper',
E                                   'resourceuri': 'http://purl.org/coar/resource_type/c_5794'},
E            'lang': 'ja',
E            'owner': '1',
E            'owners': [1],
E            'owners_ext': {'displayname': '',
E                           'email': 'wekosoftware@nii.ac.jp',
E                           'username': ''},
E            'pid': {'revision_id': 0, 'type': 'depid', 'value': '1.1'},
E            'pubdate': '2022-08-20',
E         -  'shared_user_id': -1,
E         ?                    ^^
E         +  'shared_user_id': '2',
E         ?                    ^^^
E            'status': 'published',
E            'title': 'related_title - ja_usage_title - 2 - ',
E           }

tests/test_utils.py:1839: AssertionError
_______________ test_send_usage_application_mail_for_guest_user ________________

__wrapped_mock_method__ = <function NonCallableMock.assert_called_with at 0x7f7cdb8dd7b8>
args = (<MagicMock name='send_mail_url_guest_user' id='140173707566440'>, {'mail_address': 'guest@test.org', 'restricted_site_mail': 'test_sender', 'restricted_site_name_en': '', 'restricted_site_name_ja': '', ...})
kwargs = {}, __tracebackhide__ = True
msg = "Expected call: send_mail_url_guest_user({'template': '', 'mail_address': 'guest@test.org', 'url_guest_user': 'https:/...ate': '',\n  +   'template': 'email_pattern_guest_activity.tpl',\n      'url_guest_user': 'https://test.com'},,\n    )"
__mock_self = <MagicMock name='send_mail_url_guest_user' id='140173707566440'>
actual_args = ({'mail_address': 'guest@test.org', 'restricted_site_mail': 'test_sender', 'restricted_site_name_en': '', 'restricted_site_name_ja': '', ...},)
actual_kwargs = {}
introspection = "\nArgs:\nassert ({'mail_address': 'guest@test.org',\\n  'restricted_site_mail': 'test_sender',\\n  'restricted_site_n...ate': '',\n  +   'template': 'email_pattern_guest_activity.tpl',\n      'url_guest_user': 'https://test.com'},,\n    )"
@py_assert2 = ({'mail_address': 'guest@test.org', 'restricted_site_mail': 'test_sender', 'restricted_site_name_en': '', 'restricted_site_name_ja': '', ...},)
@py_assert1 = None
@py_format4 = "({'mail_address': 'guest@test.org',\\n  'restricted_site_mail': 'test_sender',\\n  'restricted_site_name_en': '',\\n ...mplate': '',\n~+   'template': 'email_pattern_guest_activity.tpl',\n~    'url_guest_user': 'https://test.com'},,\n~  )"

    def assert_wrapper(
        __wrapped_mock_method__: Callable[..., Any], *args: Any, **kwargs: Any
    ) -> None:
        __tracebackhide__ = True
        try:
>           __wrapped_mock_method__(*args, **kwargs)

.tox/c1/lib/python3.6/site-packages/pytest_mock/plugin.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

_mock_self = <MagicMock name='send_mail_url_guest_user' id='140173707566440'>
args = ({'mail_address': 'guest@test.org', 'restricted_site_mail': 'test_sender', 'restricted_site_name_en': '', 'restricted_site_name_ja': '', ...},)
kwargs = {}
expected = (({'mail_address': 'guest@test.org', 'restricted_site_mail': 'test_sender', 'restricted_site_name_en': '', 'restricted_site_name_ja': '', ...},), {})
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7f7cbc5e7378>
actual = call({'template': 'email_pattern_guest_activity.tpl', 'mail_address': 'guest@test.org', 'url_guest_user': 'https://tes... '', 'restricted_site_name_en': '', 'restricted_site_mail': 'test_sender', 'restricted_site_url': 'https://localhost'})
cause = None

    def assert_called_with(_mock_self, *args, **kwargs):
        """assert that the mock was called with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        self = _mock_self
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            raise AssertionError('Expected call: %s\nNot called' % (expected,))
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher((args, kwargs))
        actual = self._call_matcher(self.call_args)
        if expected != actual:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: Expected call: send_mail_url_guest_user({'template': '', 'mail_address': 'guest@test.org', 'url_guest_user': 'https://test.com', 'restricted_site_name_ja': '', 'restricted_site_name_en': '', 'restricted_site_mail': 'test_sender', 'restricted_site_url': 'https://localhost'})
E           Actual call: send_mail_url_guest_user({'template': 'email_pattern_guest_activity.tpl', 'mail_address': 'guest@test.org', 'url_guest_user': 'https://test.com', 'restricted_site_name_ja': '', 'restricted_site_name_en': '', 'restricted_site_mail': 'test_sender', 'restricted_site_url': 'https://localhost'})

/usr/local/lib/python3.6/unittest/mock.py:814: AssertionError

During handling of the above exception, another exception occurred:

app = <Flask 'testapp'>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f7cbc0bdf60>

    def test_send_usage_application_mail_for_guest_user(app,db,mocker):
        mail_config = MailConfig(mail_default_sender="test_sender")
        db.session.add(mail_config)
        db.session.commit()
        mail = "guest@test.org"
        url = "https://test.com"
        mock_sender = mocker.patch("weko_workflow.utils.send_mail_url_guest_user")
        send_usage_application_mail_for_guest_user(mail,url)
    
        mock_sender.assert_called_with(
            {
                "template":"",
                "mail_address":mail,
                "url_guest_user":url,
                "restricted_site_name_ja": "",
                "restricted_site_name_en": "",
                "restricted_site_mail": "test_sender",
>               "restricted_site_url": "https://localhost",
            }
        )
E       AssertionError: Expected call: send_mail_url_guest_user({'template': '', 'mail_address': 'guest@test.org', 'url_guest_user': 'https://test.com', 'restricted_site_name_ja': '', 'restricted_site_name_en': '', 'restricted_site_mail': 'test_sender', 'restricted_site_url': 'https://localhost'})
E       Actual call: send_mail_url_guest_user({'template': 'email_pattern_guest_activity.tpl', 'mail_address': 'guest@test.org', 'url_guest_user': 'https://test.com', 'restricted_site_name_ja': '', 'restricted_site_name_en': '', 'restricted_site_mail': 'test_sender', 'restricted_site_url': 'https://localhost'})
E       
E       pytest introspection follows:
E       
E       Args:
E       assert ({'mail_address': 'guest@test.org',\n  'restricted_site_mail': 'test_sender',\n  'restricted_site_name_en': '',\n  'restricted_site_name_ja': '',\n  'restricted_site_url': 'https://localhost',\n  'template': 'email_pattern_guest_activity.tpl',\n  'url_guest_user': 'https://test.com'},) == ({'mail_address': 'guest@test.org',\n  'restricted_site_mail': 'test_sender',\n  'restricted_site_name_en': '',\n  'restricted_site_name_ja': '',\n  'restricted_site_url': 'https://localhost',\n  'template': '',\n  'url_guest_user': 'https://test.com'},)
E         At index 0 diff: {'template': 'email_pattern_guest_activity.tpl', 'mail_address': 'guest@test.org', 'url_guest_user': 'https://test.com', 'restricted_site_name_ja': '', 'restricted_site_name_en': '', 'restricted_site_mail': 'test_sender', 'restricted_site_url': 'https://localhost'} != {'template': '', 'mail_address': 'guest@test.org', 'url_guest_user': 'https://test.com', 'restricted_site_name_ja': '', 'restricted_site_name_en': '', 'restricted_site_mail': 'test_sender', 'restricted_site_url': 'https://localhost'}
E         Full diff:
E           (
E            {'mail_address': 'guest@test.org',
E             'restricted_site_mail': 'test_sender',
E             'restricted_site_name_en': '',
E             'restricted_site_name_ja': '',
E             'restricted_site_url': 'https://localhost',
E         -   'template': '',
E         +   'template': 'email_pattern_guest_activity.tpl',
E             'url_guest_user': 'https://test.com'},,
E           )

tests/test_utils.py:2112: AssertionError
__________________ test___init_activity_detail_data_for_guest __________________

app = <Flask 'testapp'>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f7cbba2cda0>

    def test___init_activity_detail_data_for_guest(app,db,users,db_register,mocker):
        with app.test_request_context():
    
            activity = db_register["activities"][1]
            activity_id = activity.activity_id
            db_history1 = ActivityHistory(
                    activity_id=activity_id,
                    action_id=3,
                    action_user=users[0]["id"],
                    action_status="F",
                    action_date=datetime.datetime.strptime('2022/04/14 3:01:53.931', '%Y/%m/%d %H:%M:%S.%f'),
                    action_order=1
                )
            with db.session.begin_nested():
                db.session.add(db_history1)
    
            test_steps = [
                {"ActivityId":activity_id,"ActionId":1,"ActionName":"Start","ActionVersion":"1.0.0","ActionEndpoint":"begin_action","Author":"contributor@test.org","Status":"action_doing","ActionOrder":1},
                {"ActivityId":activity_id,"ActionId":3,"ActionName":"Item Registration","ActionVersion":"1.0.0","ActionEndpoint":"item_login","Author":"","Status":" ","ActionOrder":2},
                {"ActivityId":activity_id,"ActionId":5,"ActionName":"Item Link","ActionVersion":"1.0.0","ActionEndpoint":"item_link","Author":"","Status":" ","ActionOrder":3}
            ]
            action_endpoint = "begin_action"
            action_id=1
            activity_detail=activity
            cur_action=activity.action
            histories=[db_history1]
            item=ItemsMetadata.get_record(id_=activity.item_id)
            steps=test_steps,
            temporary_comment=None
            workflow_detail=db_register["workflow"]
            display_info = (action_endpoint, action_id, activity_detail, cur_action, histories, item, \
                steps, temporary_comment, workflow_detail)
            mocker.patch("weko_workflow.utils.get_activity_display_info",return_value=display_info)
            mocker.patch("weko_workflow.utils.get_approval_keys",return_value=[])
            community_id=""
            session['user_id'] = 'dummy user'
            session["guest_email"] = "guest@test.org"
            user_profile = {
                "results":{
                    'subitem_user_name': "guest",
                    'subitem_fullname': "guest",
                    'subitem_mail_address': "guest@test.org",
                    'subitem_displayname': "guest",
                    'subitem_university/institution': '',
                    'subitem_affiliated_division/department': '',
                    'subitem_position': '',
                    'subitem_phone_number': '',
                    'subitem_position(other)': '',
                    'subitem_affiliated_institution': [],
                }
            }
            test = dict(
                page=None,
                render_widgets=False,
                community_id=community_id,
                temporary_journal='',
                temporary_idf_grant='',
                temporary_idf_grant_suffix='',
                idf_grant_data='',
                idf_grant_input=IDENTIFIER_GRANT_LIST,
                idf_grant_method=0,
                error_type='item_login_error',
                cur_step=action_endpoint,
                approval_record=[],
                recid=None,
                links=None,
                term_and_condition_content='',
                is_auto_set_index_action=True,
                application_item_type=False,
                auto_fill_title="",
                auto_fill_data_type=None,
                is_show_autofill_metadata=True,
                is_hidden_pubdate=False,
                position_list=WEKO_USERPROFILES_POSITION_LIST,
                institute_position_list=WEKO_USERPROFILES_INSTITUTE_POSITION_LIST,
                item_type_name="テストアイテムタイプ",
                res_check=1,
                action_id=action_id,
                activity=activity_detail,
                histories=histories,
                item=item,
                steps=steps,
                temporary_comment=temporary_comment,
                workflow_detail=workflow_detail,
                user_profile=user_profile,
                list_license=[{'value': 'license_free', 'name': 'write your own license'}, {'value': 'license_12', 'name': 'Creative Commons CC0 1.0 Universal Public Domain Designation'}, {'value': 'license_6', 'name': 'Creative Commons Attribution 3.0 Unported (CC BY 3.0)'}, {'value': 'license_7', 'name': 'Creative Commons Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0)'}, {'value': 'license_8', 'name': 'Creative Commons Attribution-NoDerivs 3.0 Unported (CC BY-ND 3.0)'}, {'value': 'license_9', 'name': 'Creative Commons Attribution-NonCommercial 3.0 Unported (CC BY-NC 3.0)'}, {'value': 'license_10', 'name': 'Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)'}, {'value': 'license_11', 'name': 'Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0)'}, {'value': 'license_0', 'name': 'Creative Commons Attribution 4.0 International (CC BY 4.0)'}, {'value': 'license_1', 'name': 'Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)'}, {'value': 'license_2', 'name': 'Creative Commons Attribution-NoDerivatives 4.0 International (CC BY-ND 4.0)'}, {'value': 'license_3', 'name': 'Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)'}, {'value': 'license_4', 'name': 'Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)'}, {'value': 'license_5', 'name': 'Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)'}],
                cur_action=cur_action,
                activity_id=activity_detail.activity_id,
                is_enable_item_name_link=True,
                enable_feedback_maillist=current_app.config[
                    'WEKO_WORKFLOW_ENABLE_FEEDBACK_MAIL'],
                enable_contributor=current_app.config[
                    'WEKO_WORKFLOW_ENABLE_CONTRIBUTOR'],
                out_put_report_title="",
                action_endpoint_key={},
                approval_email_key=[],
                step_item_login_url="weko_items_ui/iframe/item_edit.html",
                need_file=True,
                need_billing_file=False,
                records={'id': '1.1', 'pid': {'type': 'depid', 'value': '1.1', 'revision_id': 0}, 'lang': 'ja', 'owner': '1', 'title': 'title', 'owners': [1], 'status': 'published', '$schema': '/items/jsonschema/15', 'pubdate': '2022-08-20', 'created_by': 1, 'owners_ext': {'email': 'wekosoftware@nii.ac.jp', 'username': '', 'displayname': ''}, 'shared_user_id': -1, 'item_1617186331708': [{'subitem_1551255647225': 'ff', 'subitem_1551255648112': 'ja'}], 'item_1617186819068': {'subitem_identifier_reg_text': 'test_2/0000000001','subitem_identifier_reg_type': 'JaLC'},   'item_1617258105262': {'resourceuri': 'http://purl.org/coar/resource_type/c_5794', 'resourcetype': 'conference paper'}},
                record=[],
                jsonschema="/items/jsonschema/1",
                schemaform="/items/schemaform/1",
                item_save_uri="/items/iframe/model/save",
                files=[],
                endpoints={},
                need_thumbnail=False,
                files_thumbnail=[],
                allow_multi_thumbnail=False,
                id=db_register["workflow"].itemtype_id,
            )
            result = __init_activity_detail_data_for_guest(activity_id,community_id)
>           assert result == test
E           AssertionError: assert {'action_endpoint_key': {},\n 'action_id': 1,\n 'activity': <Activity 4>,\n 'activity_id': '2',\n 'allow_multi_thumbnail': False,\n 'application_item_type': False,\n 'approval_email_key': [],\n 'approval_record': [],\n 'auto_fill_data_type': None,\n 'auto_fill_title': '',\n 'community_id': '',\n 'cur_action': <Action 1>,\n 'cur_step': 'begin_action',\n 'enable_contributor': True,\n 'enable_feedback_maillist': True,\n 'endpoints': {},\n 'error_type': 'item_login_error',\n 'files': [],\n 'files_thumbnail': [],\n 'histories': [<ActivityHistory 2>],\n 'id': 1,\n 'idf_grant_data': '',\n 'idf_grant_input': [(0, 'Not Grant', ''),\n                     (1, 'JaLC DOI', 'https://doi.org'),\n                     (2, 'JaLC CrossRef DOI', 'https://doi.org'),\n                     (3, 'JaLC DataCite DOI', 'https://doi.org'),\n                     (4, 'NDL JaLC DOI', 'https://doi.org')],\n 'idf_grant_method': 0,\n 'institute_position_list': [('', ''),\n                             ('Member', l'Member'),\n                             ('Committee member', l'Committee member'),\n                             ('Director/Officer', l'Director/Officer'),\n                             ('President', l'President')],\n 'is_auto_set_index_action': True,\n 'is_enable_item_name_link': True,\n 'is_hidden_pubdate': False,\n 'is_show_autofill_metadata': True,\n 'item': {'$schema': '/items/jsonschema/15',\n          'created_by': 1,\n          'id': '1.1',\n          'item_1617186331708': [{'subitem_1551255647225': 'ff',\n                                  'subitem_1551255648112': 'ja'}],\n          'item_1617186819068': {'subitem_identifier_reg_text': 'test_2/0000000001',\n                                 'subitem_identifier_reg_type': 'JaLC'},\n          'item_1617258105262': {'resourcetype': 'conference paper',\n                                 'resourceuri': 'http://purl.org/coar/resource_type/c_5794'},\n          'lang': 'ja',\n          'owner': '1',\n          'owners': [1],\n          'owners_ext': {'displayname': '',\n                         'email': 'wekosoftware@nii.ac.jp',\n                         'username': ''},\n          'pid': {'revision_id': 0, 'type': 'depid', 'value': '1.1'},\n          'pubdate': '2022-08-20',\n          'shared_user_id': '2',\n          'status': 'published',\n          'title': 'title'},\n 'item_save_uri': '/items/iframe/model/save',\n 'item_type_name': 'テストアイテムタイプ',\n 'jsonschema': '/items/jsonschema/1',\n 'links': None,\n 'list_license': [{'name': l'write your own license', 'value': 'license_free'},\n                  {'name': l'Creative Commons CC0 1.0 Universal Public Domain Designation',\n                   'value': 'license_12'},\n                  {'name': l'Creative Commons Attribution 3.0 Unported (CC BY 3.0)',\n                   'value': 'license_6'},\n                  {'name': l'Creative Commons Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0)',\n                   'value': 'license_7'},\n                  {'name': l'Creative Commons Attribution-NoDerivs 3.0 Unported (CC BY-ND 3.0)',\n                   'value': 'license_8'},\n                  {'name': l'Creative Commons Attribution-NonCommercial 3.0 Unported (CC BY-NC 3.0)',\n                   'value': 'license_9'},\n                  {'name': l'Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)',\n                   'value': 'license_10'},\n                  {'name': l'Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0)',\n                   'value': 'license_11'},\n                  {'name': l'Creative Commons Attribution 4.0 International (CC BY 4.0)',\n                   'value': 'license_0'},\n                  {'name': l'Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)',\n                   'value': 'license_1'},\n                  {'name': l'Creative Commons Attribution-NoDerivatives 4.0 International (CC BY-ND 4.0)',\n                   'value': 'license_2'},\n                  {'name': l'Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)',\n                   'value': 'license_3'},\n                  {'name': l'Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)',\n                   'value': 'license_4'},\n                  {'name': l'Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)',\n                   'value': 'license_5'}],\n 'need_billing_file': False,\n 'need_file': True,\n 'need_thumbnail': False,\n 'out_put_report_title': '',\n 'page': None,\n 'position_list': [('', ''),\n                   ('Professor', l'Professor'),\n                   ('Assistant Professor', l'Associate Professor'),\n                   ('Full-time Instructor', l'Full-time Instructor'),\n                   ('Assistant Teacher', l'Assistant Professor'),\n                   ('Full-time Researcher', l'Full-time Researcher'),\n                   ('Others (Input Detail)', l'Others (Input Detail)'),\n                   ('JSPS Research Fellowship for Young Scientists (PD, SPD '\n                    'etc.)',\n                    l'JSPS Research Fellowship for Young Scientists (PD, SPD etc.)'),\n                   ('JSPS Research Fellowship for Young Scientists (DC1, DC2)',\n                    l'JSPS Research Fellowship for Young Scientists (DC1, DC2)'),\n                   ('Doctoral Course (Doctoral Program)',\n                    l'Doctoral Course (Doctoral Program)'),\n                   ('Master Course (Master Program)',\n                    l'Master Course (Master Program)'),\n                   ('Fellow Researcher', l'Fellow Researcher'),\n                   ('Listener', l'Auditor'),\n                   ('Student', l'Undergraduate Student')],\n 'recid': None,\n 'record': [],\n 'records': {'$schema': '/items/jsonschema/15',\n             'created_by': 1,\n             'id': '1.1',\n             'item_1617186331708': [{'subitem_1551255647225': 'ff',\n                                     'subitem_1551255648112': 'ja'}],\n             'item_1617186819068': {'subitem_identifier_reg_text': 'test_2/0000000001',\n                                    'subitem_identifier_reg_type': 'JaLC'},\n             'item_1617258105262': {'resourcetype': 'conference paper',\n                                    'resourceuri': 'http://purl.org/coar/resource_type/c_5794'},\n             'lang': 'ja',\n             'owner': '1',\n             'owners': [1],\n             'owners_ext': {'displayname': '',\n                            'email': 'wekosoftware@nii.ac.jp',\n                            'username': ''},\n             'pid': {'revision_id': 0, 'type': 'depid', 'value': '1.1'},\n             'pubdate': '2022-08-20',\n             'shared_user_id': '2',\n             'status': 'published',\n             'title': 'title'},\n 'render_widgets': False,\n 'res_check': 1,\n 'schemaform': '/items/schemaform/1',\n 'step_item_login_url': 'weko_items_ui/iframe/item_edit.html',\n 'steps': ([{'ActionEndpoint': 'begin_action',\n             'ActionId': 1,\n             'ActionName': 'Start',\n             'ActionOrder': 1,\n             'ActionVersion': '1.0.0',\n             'ActivityId': '2',\n             'Author': 'contributor@test.org',\n             'Status': 'action_doing'},\n            {'ActionEndpoint': 'item_login',\n             'ActionId': 3,\n             'ActionName': 'Item Registration',\n             'ActionOrder': 2,\n             'ActionVersion': '1.0.0',\n             'ActivityId': '2',\n             'Author': '',\n             'Status': ' '},\n            {'ActionEndpoint': 'item_link',\n             'ActionId': 5,\n             'ActionName': 'Item Link',\n             'ActionOrder': 3,\n             'ActionVersion': '1.0.0',\n             'ActivityId': '2',\n             'Author': '',\n             'Status': ' '}],),\n 'temporary_comment': None,\n 'temporary_idf_grant': '',\n 'temporary_idf_grant_suffix': '',\n 'temporary_journal': '',\n 'term_and_condition_content': '',\n 'user_profile': {'results': {'subitem_affiliated_division/department': '',\n                              'subitem_affiliated_institution': [],\n                              'subitem_displayname': 'guest',\n                              'subitem_fullname': 'guest',\n                              'subitem_mail_address': 'guest@test.org',\n                              'subitem_phone_number': '',\n                              'subitem_position': '',\n                              'subitem_position(other)': '',\n                              'subitem_university/institution': '',\n                              'subitem_user_name': 'guest'}},\n 'workflow_detail': <WorkFlow 1>} == {'action_endpoint_key': {},\n 'action_id': 1,\n 'activity': <Activity 4>,\n 'activity_id': '2',\n 'allow_multi_thumbnail': False,\n 'application_item_type': False,\n 'approval_email_key': [],\n 'approval_record': [],\n 'auto_fill_data_type': None,\n 'auto_fill_title': '',\n 'community_id': '',\n 'cur_action': <Action 1>,\n 'cur_step': 'begin_action',\n 'enable_contributor': True,\n 'enable_feedback_maillist': True,\n 'endpoints': {},\n 'error_type': 'item_login_error',\n 'files': [],\n 'files_thumbnail': [],\n 'histories': [<ActivityHistory 2>],\n 'id': 1,\n 'idf_grant_data': '',\n 'idf_grant_input': [(0, 'Not Grant', ''),\n                     (1, 'JaLC DOI', 'https://doi.org'),\n                     (2, 'JaLC CrossRef DOI', 'https://doi.org'),\n                     (3, 'JaLC DataCite DOI', 'https://doi.org'),\n                     (4, 'NDL JaLC DOI', 'https://doi.org')],\n 'idf_grant_method': 0,\n 'institute_position_list': [('', ''),\n                             ('Member', l'Member'),\n                             ('Committee member', l'Committee member'),\n                             ('Director/Officer', l'Director/Officer'),\n                             ('President', l'President')],\n 'is_auto_set_index_action': True,\n 'is_enable_item_name_link': True,\n 'is_hidden_pubdate': False,\n 'is_show_autofill_metadata': True,\n 'item': {'$schema': '/items/jsonschema/15',\n          'created_by': 1,\n          'id': '1.1',\n          'item_1617186331708': [{'subitem_1551255647225': 'ff',\n                                  'subitem_1551255648112': 'ja'}],\n          'item_1617186819068': {'subitem_identifier_reg_text': 'test_2/0000000001',\n                                 'subitem_identifier_reg_type': 'JaLC'},\n          'item_1617258105262': {'resourcetype': 'conference paper',\n                                 'resourceuri': 'http://purl.org/coar/resource_type/c_5794'},\n          'lang': 'ja',\n          'owner': '1',\n          'owners': [1],\n          'owners_ext': {'displayname': '',\n                         'email': 'wekosoftware@nii.ac.jp',\n                         'username': ''},\n          'pid': {'revision_id': 0, 'type': 'depid', 'value': '1.1'},\n          'pubdate': '2022-08-20',\n          'shared_user_id': '2',\n          'status': 'published',\n          'title': 'title'},\n 'item_save_uri': '/items/iframe/model/save',\n 'item_type_name': 'テストアイテムタイプ',\n 'jsonschema': '/items/jsonschema/1',\n 'links': None,\n 'list_license': [{'name': 'write your own license', 'value': 'license_free'},\n                  {'name': 'Creative Commons CC0 1.0 Universal Public Domain '\n                           'Designation',\n                   'value': 'license_12'},\n                  {'name': 'Creative Commons Attribution 3.0 Unported (CC BY '\n                           '3.0)',\n                   'value': 'license_6'},\n                  {'name': 'Creative Commons Attribution-ShareAlike 3.0 '\n                           'Unported (CC BY-SA 3.0)',\n                   'value': 'license_7'},\n                  {'name': 'Creative Commons Attribution-NoDerivs 3.0 Unported '\n                           '(CC BY-ND 3.0)',\n                   'value': 'license_8'},\n                  {'name': 'Creative Commons Attribution-NonCommercial 3.0 '\n                           'Unported (CC BY-NC 3.0)',\n                   'value': 'license_9'},\n                  {'name': 'Creative Commons '\n                           'Attribution-NonCommercial-ShareAlike 3.0 Unported '\n                           '(CC BY-NC-SA 3.0)',\n                   'value': 'license_10'},\n                  {'name': 'Creative Commons '\n                           'Attribution-NonCommercial-NoDerivs 3.0 Unported '\n                           '(CC BY-NC-ND 3.0)',\n                   'value': 'license_11'},\n                  {'name': 'Creative Commons Attribution 4.0 International (CC '\n                           'BY 4.0)',\n                   'value': 'license_0'},\n                  {'name': 'Creative Commons Attribution-ShareAlike 4.0 '\n                           'International (CC BY-SA 4.0)',\n                   'value': 'license_1'},\n                  {'name': 'Creative Commons Attribution-NoDerivatives 4.0 '\n                           'International (CC BY-ND 4.0)',\n                   'value': 'license_2'},\n                  {'name': 'Creative Commons Attribution-NonCommercial 4.0 '\n                           'International (CC BY-NC 4.0)',\n                   'value': 'license_3'},\n                  {'name': 'Creative Commons '\n                           'Attribution-NonCommercial-ShareAlike 4.0 '\n                           'International (CC BY-NC-SA 4.0)',\n                   'value': 'license_4'},\n                  {'name': 'Creative Commons '\n                           'Attribution-NonCommercial-NoDerivatives 4.0 '\n                           'International (CC BY-NC-ND 4.0)',\n                   'value': 'license_5'}],\n 'need_billing_file': False,\n 'need_file': True,\n 'need_thumbnail': False,\n 'out_put_report_title': '',\n 'page': None,\n 'position_list': [('', ''),\n                   ('Professor', l'Professor'),\n                   ('Assistant Professor', l'Associate Professor'),\n                   ('Full-time Instructor', l'Full-time Instructor'),\n                   ('Assistant Teacher', l'Assistant Professor'),\n                   ('Full-time Researcher', l'Full-time Researcher'),\n                   ('Others (Input Detail)', l'Others (Input Detail)'),\n                   ('JSPS Research Fellowship for Young Scientists (PD, SPD '\n                    'etc.)',\n                    l'JSPS Research Fellowship for Young Scientists (PD, SPD etc.)'),\n                   ('JSPS Research Fellowship for Young Scientists (DC1, DC2)',\n                    l'JSPS Research Fellowship for Young Scientists (DC1, DC2)'),\n                   ('Doctoral Course (Doctoral Program)',\n                    l'Doctoral Course (Doctoral Program)'),\n                   ('Master Course (Master Program)',\n                    l'Master Course (Master Program)'),\n                   ('Fellow Researcher', l'Fellow Researcher'),\n                   ('Listener', l'Auditor'),\n                   ('Student', l'Undergraduate Student')],\n 'recid': None,\n 'record': [],\n 'records': {'$schema': '/items/jsonschema/15',\n             'created_by': 1,\n             'id': '1.1',\n             'item_1617186331708': [{'subitem_1551255647225': 'ff',\n                                     'subitem_1551255648112': 'ja'}],\n             'item_1617186819068': {'subitem_identifier_reg_text': 'test_2/0000000001',\n                                    'subitem_identifier_reg_type': 'JaLC'},\n             'item_1617258105262': {'resourcetype': 'conference paper',\n                                    'resourceuri': 'http://purl.org/coar/resource_type/c_5794'},\n             'lang': 'ja',\n             'owner': '1',\n             'owners': [1],\n             'owners_ext': {'displayname': '',\n                            'email': 'wekosoftware@nii.ac.jp',\n                            'username': ''},\n             'pid': {'revision_id': 0, 'type': 'depid', 'value': '1.1'},\n             'pubdate': '2022-08-20',\n             'shared_user_id': -1,\n             'status': 'published',\n             'title': 'title'},\n 'render_widgets': False,\n 'res_check': 1,\n 'schemaform': '/items/schemaform/1',\n 'step_item_login_url': 'weko_items_ui/iframe/item_edit.html',\n 'steps': ([{'ActionEndpoint': 'begin_action',\n             'ActionId': 1,\n             'ActionName': 'Start',\n             'ActionOrder': 1,\n             'ActionVersion': '1.0.0',\n             'ActivityId': '2',\n             'Author': 'contributor@test.org',\n             'Status': 'action_doing'},\n            {'ActionEndpoint': 'item_login',\n             'ActionId': 3,\n             'ActionName': 'Item Registration',\n             'ActionOrder': 2,\n             'ActionVersion': '1.0.0',\n             'ActivityId': '2',\n             'Author': '',\n             'Status': ' '},\n            {'ActionEndpoint': 'item_link',\n             'ActionId': 5,\n             'ActionName': 'Item Link',\n             'ActionOrder': 3,\n             'ActionVersion': '1.0.0',\n             'ActivityId': '2',\n             'Author': '',\n             'Status': ' '}],),\n 'temporary_comment': None,\n 'temporary_idf_grant': '',\n 'temporary_idf_grant_suffix': '',\n 'temporary_journal': '',\n 'term_and_condition_content': '',\n 'user_profile': {'results': {'subitem_affiliated_division/department': '',\n                              'subitem_affiliated_institution': [],\n                              'subitem_displayname': 'guest',\n                              'subitem_fullname': 'guest',\n                              'subitem_mail_address': 'guest@test.org',\n                              'subitem_phone_number': '',\n                              'subitem_position': '',\n                              'subitem_position(other)': '',\n                              'subitem_university/institution': '',\n                              'subitem_user_name': 'guest'}},\n 'workflow_detail': <WorkFlow 1>}
E             Common items:
E             {'action_endpoint_key': {},
E              'action_id': 1,
E              'activity': <Activity 4>,
E              'activity_id': '2',
E              'allow_multi_thumbnail': False,
E              'application_item_type': False,
E              'approval_email_key': [],
E              'approval_record': [],
E              'auto_fill_data_type': None,
E              'auto_fill_title': '',
E              'community_id': '',
E              'cur_action': <Action 1>,
E              'cur_step': 'begin_action',
E              'enable_contributor': True,
E              'enable_feedback_maillist': True,
E              'endpoints': {},
E              'error_type': 'item_login_error',
E              'files': [],
E              'files_thumbnail': [],
E              'histories': [<ActivityHistory 2>],
E              'id': 1,
E              'idf_grant_data': '',
E              'idf_grant_input': [(0, 'Not Grant', ''),
E                                  (1, 'JaLC DOI', 'https://doi.org'),
E                                  (2, 'JaLC CrossRef DOI', 'https://doi.org'),
E                                  (3, 'JaLC DataCite DOI', 'https://doi.org'),
E                                  (4, 'NDL JaLC DOI', 'https://doi.org')],
E              'idf_grant_method': 0,
E              'institute_position_list': [('', ''),
E                                          ('Member', l'Member'),
E                                          ('Committee member', l'Committee member'),
E                                          ('Director/Officer', l'Director/Officer'),
E                                          ('President', l'President')],
E              'is_auto_set_index_action': True,
E              'is_enable_item_name_link': True,
E              'is_hidden_pubdate': False,
E              'is_show_autofill_metadata': True,
E              'item': {'$schema': '/items/jsonschema/15',
E                       'created_by': 1,
E                       'id': '1.1',
E                       'item_1617186331708': [{'subitem_1551255647225': 'ff',
E                                               'subitem_1551255648112': 'ja'}],
E                       'item_1617186819068': {'subitem_identifier_reg_text': 'test_2/0000000001',
E                                              'subitem_identifier_reg_type': 'JaLC'},
E                       'item_1617258105262': {'resourcetype': 'conference paper',
E                                              'resourceuri': 'http://purl.org/coar/resource_type/c_5794'},
E                       'lang': 'ja',
E                       'owner': '1',
E                       'owners': [1],
E                       'owners_ext': {'displayname': '',
E                                      'email': 'wekosoftware@nii.ac.jp',
E                                      'username': ''},
E                       'pid': {'revision_id': 0, 'type': 'depid', 'value': '1.1'},
E                       'pubdate': '2022-08-20',
E                       'shared_user_id': '2',
E                       'status': 'published',
E                       'title': 'title'},
E              'item_save_uri': '/items/iframe/model/save',
E              'item_type_name': 'テストアイテムタイプ',
E              'jsonschema': '/items/jsonschema/1',
E              'links': None,
E              'list_license': [{'name': l'write your own license', 'value': 'license_free'},
E                               {'name': l'Creative Commons CC0 1.0 Universal Public Domain Designation',
E                                'value': 'license_12'},
E                               {'name': l'Creative Commons Attribution 3.0 Unported (CC BY 3.0)',
E                                'value': 'license_6'},
E                               {'name': l'Creative Commons Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0)',
E                                'value': 'license_7'},
E                               {'name': l'Creative Commons Attribution-NoDerivs 3.0 Unported (CC BY-ND 3.0)',
E                                'value': 'license_8'},
E                               {'name': l'Creative Commons Attribution-NonCommercial 3.0 Unported (CC BY-NC 3.0)',
E                                'value': 'license_9'},
E                               {'name': l'Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)',
E                                'value': 'license_10'},
E                               {'name': l'Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0)',
E                                'value': 'license_11'},
E                               {'name': l'Creative Commons Attribution 4.0 International (CC BY 4.0)',
E                                'value': 'license_0'},
E                               {'name': l'Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)',
E                                'value': 'license_1'},
E                               {'name': l'Creative Commons Attribution-NoDerivatives 4.0 International (CC BY-ND 4.0)',
E                                'value': 'license_2'},
E                               {'name': l'Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)',
E                                'value': 'license_3'},
E                               {'name': l'Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)',
E                                'value': 'license_4'},
E                               {'name': l'Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)',
E                                'value': 'license_5'}],
E              'need_billing_file': False,
E              'need_file': True,
E              'need_thumbnail': False,
E              'out_put_report_title': '',
E              'page': None,
E              'position_list': [('', ''),
E                                ('Professor', l'Professor'),
E                                ('Assistant Professor', l'Associate Professor'),
E                                ('Full-time Instructor', l'Full-time Instructor'),
E                                ('Assistant Teacher', l'Assistant Professor'),
E                                ('Full-time Researcher', l'Full-time Researcher'),
E                                ('Others (Input Detail)', l'Others (Input Detail)'),
E                                ('JSPS Research Fellowship for Young Scientists (PD, SPD '
E                                 'etc.)',
E                                 l'JSPS Research Fellowship for Young Scientists (PD, SPD etc.)'),
E                                ('JSPS Research Fellowship for Young Scientists (DC1, DC2)',
E                                 l'JSPS Research Fellowship for Young Scientists (DC1, DC2)'),
E                                ('Doctoral Course (Doctoral Program)',
E                                 l'Doctoral Course (Doctoral Program)'),
E                                ('Master Course (Master Program)',
E                                 l'Master Course (Master Program)'),
E                                ('Fellow Researcher', l'Fellow Researcher'),
E                                ('Listener', l'Auditor'),
E                                ('Student', l'Undergraduate Student')],
E              'recid': None,
E              'record': [],
E              'render_widgets': False,
E              'res_check': 1,
E              'schemaform': '/items/schemaform/1',
E              'step_item_login_url': 'weko_items_ui/iframe/item_edit.html',
E              'steps': ([{'ActionEndpoint': 'begin_action',
E                          'ActionId': 1,
E                          'ActionName': 'Start',
E                          'ActionOrder': 1,
E                          'ActionVersion': '1.0.0',
E                          'ActivityId': '2',
E                          'Author': 'contributor@test.org',
E                          'Status': 'action_doing'},
E                         {'ActionEndpoint': 'item_login',
E                          'ActionId': 3,
E                          'ActionName': 'Item Registration',
E                          'ActionOrder': 2,
E                          'ActionVersion': '1.0.0',
E                          'ActivityId': '2',
E                          'Author': '',
E                          'Status': ' '},
E                         {'ActionEndpoint': 'item_link',
E                          'ActionId': 5,
E                          'ActionName': 'Item Link',
E                          'ActionOrder': 3,
E                          'ActionVersion': '1.0.0',
E                          'ActivityId': '2',
E                          'Author': '',
E                          'Status': ' '}],),
E              'temporary_comment': None,
E              'temporary_idf_grant': '',
E              'temporary_idf_grant_suffix': '',
E              'temporary_journal': '',
E              'term_and_condition_content': '',
E              'user_profile': {'results': {'subitem_affiliated_division/department': '',
E                                           'subitem_affiliated_institution': [],
E                                           'subitem_displayname': 'guest',
E                                           'subitem_fullname': 'guest',
E                                           'subitem_mail_address': 'guest@test.org',
E                                           'subitem_phone_number': '',
E                                           'subitem_position': '',
E                                           'subitem_position(other)': '',
E                                           'subitem_university/institution': '',
E                                           'subitem_user_name': 'guest'}},
E              'workflow_detail': <WorkFlow 1>}
E             Differing items:
E             {'records': {'id': '1.1', 'pid': {'type': 'depid', 'value': '1.1', 'revision_id': 0}, 'lang': 'ja', 'owner': '1', 'tit...'}, 'item_1617186819068': {'subitem_identifier_reg_text': 'test_2/0000000001', 'subitem_identifier_reg_type': 'JaLC'}}} != {'records': {'$schema': '/items/jsonschema/15', 'created_by': 1, 'id': '1.1', 'item_1617186331708': [{'subitem_1551255647225': 'ff', 'subitem_1551255648112': 'ja'}], ...}}
E             Full diff:
E               {
E                'action_endpoint_key': {},
E                'action_id': 1,
E                'activity': <Activity 4>,
E                'activity_id': '2',
E                'allow_multi_thumbnail': False,
E                'application_item_type': False,
E                'approval_email_key': [],
E                'approval_record': [],
E                'auto_fill_data_type': None,
E                'auto_fill_title': '',
E                'community_id': '',
E                'cur_action': <Action 1>,
E                'cur_step': 'begin_action',
E                'enable_contributor': True,
E                'enable_feedback_maillist': True,
E                'endpoints': {},
E                'error_type': 'item_login_error',
E                'files': [],
E                'files_thumbnail': [],
E                'histories': [<ActivityHistory 2>],
E                'id': 1,
E                'idf_grant_data': '',
E                'idf_grant_input': [(0,
E                                     'Not Grant',
E                                     ''),
E                                    (1,
E                                     'JaLC DOI',
E                                     'https://doi.org'),
E                                    (2,
E                                     'JaLC CrossRef DOI',
E                                     'https://doi.org'),
E                                    (3,
E                                     'JaLC DataCite DOI',
E                                     'https://doi.org'),
E                                    (4,
E                                     'NDL JaLC DOI',
E                                     'https://doi.org')],
E                'idf_grant_method': 0,
E                'institute_position_list': [('',
E                                             ''),
E                                            ('Member',
E                                             l'Member'),
E                                            ('Committee member',
E                                             l'Committee member'),
E                                            ('Director/Officer',
E                                             l'Director/Officer'),
E                                            ('President',
E                                             l'President')],
E                'is_auto_set_index_action': True,
E                'is_enable_item_name_link': True,
E                'is_hidden_pubdate': False,
E                'is_show_autofill_metadata': True,
E                'item': {'$schema': '/items/jsonschema/15',
E                         'created_by': 1,
E                         'id': '1.1',
E                         'item_1617186331708': [{'subitem_1551255647225': 'ff',
E                                                 'subitem_1551255648112': 'ja'}],
E                         'item_1617186819068': {'subitem_identifier_reg_text': 'test_2/0000000001',
E                                                'subitem_identifier_reg_type': 'JaLC'},
E                         'item_1617258105262': {'resourcetype': 'conference paper',
E                                                'resourceuri': 'http://purl.org/coar/resource_type/c_5794'},
E                         'lang': 'ja',
E                         'owner': '1',
E                         'owners': [1],
E                         'owners_ext': {'displayname': '',
E                                        'email': 'wekosoftware@nii.ac.jp',
E                                        'username': ''},
E                         'pid': {'revision_id': 0,
E                                 'type': 'depid',
E                                 'value': '1.1'},
E                         'pubdate': '2022-08-20',
E                         'shared_user_id': '2',
E                         'status': 'published',
E                         'title': 'title'},
E                'item_save_uri': '/items/iframe/model/save',
E                'item_type_name': 'テストアイテムタイプ',
E                'jsonschema': '/items/jsonschema/1',
E                'links': None,
E             -  'list_license': [{'name': 'write your own license',
E             +  'list_license': [{'name': l'write your own license',
E             ?                            +
E                                  'value': 'license_free'},
E             -                   {'name': 'Creative Commons CC0 1.0 Universal Public Domain '
E             +                   {'name': l'Creative Commons CC0 1.0 Universal Public Domain Designation',
E             ?                            +                                                  +++++++++++ +
E             -                            'Designation',
E                                  'value': 'license_12'},
E             -                   {'name': 'Creative Commons Attribution 3.0 Unported (CC BY '
E             +                   {'name': l'Creative Commons Attribution 3.0 Unported (CC BY 3.0)',
E             ?                            +                                                  ++++ +
E             -                            '3.0)',
E                                  'value': 'license_6'},
E             -                   {'name': 'Creative Commons Attribution-ShareAlike 3.0 '
E             +                   {'name': l'Creative Commons Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0)',
E             ?                            +                                             +++++++++++++++++++++++ +
E             -                            'Unported (CC BY-SA 3.0)',
E                                  'value': 'license_7'},
E             -                   {'name': 'Creative Commons Attribution-NoDerivs 3.0 Unported '
E             +                   {'name': l'Creative Commons Attribution-NoDerivs 3.0 Unported (CC BY-ND 3.0)',
E             ?                            +                                                    ++++++++++++++ +
E             -                            '(CC BY-ND 3.0)',
E                                  'value': 'license_8'},
E             -                   {'name': 'Creative Commons Attribution-NonCommercial 3.0 '
E             +                   {'name': l'Creative Commons Attribution-NonCommercial 3.0 Unported (CC BY-NC 3.0)',
E             ?                            +                                                +++++++++++++++++++++++ +
E             -                            'Unported (CC BY-NC 3.0)',
E                                  'value': 'license_9'},
E             +                   {'name': l'Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0)',
E             -                   {'name': 'Creative Commons '
E             -                            'Attribution-NonCommercial-ShareAlike 3.0 Unported '
E             -                            '(CC BY-NC-SA 3.0)',
E                                  'value': 'license_10'},
E             +                   {'name': l'Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported (CC BY-NC-ND 3.0)',
E             -                   {'name': 'Creative Commons '
E             -                            'Attribution-NonCommercial-NoDerivs 3.0 Unported '
E             -                            '(CC BY-NC-ND 3.0)',
E                                  'value': 'license_11'},
E             -                   {'name': 'Creative Commons Attribution 4.0 International (CC '
E             +                   {'name': l'Creative Commons Attribution 4.0 International (CC BY 4.0)',
E             ?                            +                                                    +++++++ +
E             -                            'BY 4.0)',
E                                  'value': 'license_0'},
E             -                   {'name': 'Creative Commons Attribution-ShareAlike 4.0 '
E             +                   {'name': l'Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)',
E             ?                            +                                             ++++++++++++++++++++++++++++ +
E             -                            'International (CC BY-SA 4.0)',
E                                  'value': 'license_1'},
E             -                   {'name': 'Creative Commons Attribution-NoDerivatives 4.0 '
E             +                   {'name': l'Creative Commons Attribution-NoDerivatives 4.0 International (CC BY-ND 4.0)',
E             ?                            +                                                ++++++++++++++++++++++++++++ +
E             -                            'International (CC BY-ND 4.0)',
E                                  'value': 'license_2'},
E             -                   {'name': 'Creative Commons Attribution-NonCommercial 4.0 '
E             +                   {'name': l'Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)',
E             ?                            +                                                ++++++++++++++++++++++++++++ +
E             -                            'International (CC BY-NC 4.0)',
E                                  'value': 'license_3'},
E             +                   {'name': l'Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)',
E             -                   {'name': 'Creative Commons '
E             -                            'Attribution-NonCommercial-ShareAlike 4.0 '
E             -                            'International (CC BY-NC-SA 4.0)',
E                                  'value': 'license_4'},
E             +                   {'name': l'Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)',
E             -                   {'name': 'Creative Commons '
E             -                            'Attribution-NonCommercial-NoDerivatives 4.0 '
E             -                            'International (CC BY-NC-ND 4.0)',
E                                  'value': 'license_5'}],
E                'need_billing_file': False,
E                'need_file': True,
E                'need_thumbnail': False,
E                'out_put_report_title': '',
E                'page': None,
E                'position_list': [('',
E                                   ''),
E                                  ('Professor',
E                                   l'Professor'),
E                                  ('Assistant Professor',
E                                   l'Associate Professor'),
E                                  ('Full-time Instructor',
E                                   l'Full-time Instructor'),
E                                  ('Assistant Teacher',
E                                   l'Assistant Professor'),
E                                  ('Full-time Researcher',
E                                   l'Full-time Researcher'),
E                                  ('Others (Input Detail)',
E                                   l'Others (Input Detail)'),
E                                  ('JSPS Research Fellowship for Young Scientists (PD, SPD '
E                                   'etc.)',
E                                   l'JSPS Research Fellowship for Young Scientists (PD, SPD etc.)'),
E                                  ('JSPS Research Fellowship for Young Scientists (DC1, DC2)',
E                                   l'JSPS Research Fellowship for Young Scientists (DC1, DC2)'),
E                                  ('Doctoral Course (Doctoral Program)',
E                                   l'Doctoral Course (Doctoral Program)'),
E                                  ('Master Course (Master Program)',
E                                   l'Master Course (Master Program)'),
E                                  ('Fellow Researcher',
E                                   l'Fellow Researcher'),
E                                  ('Listener',
E                                   l'Auditor'),
E                                  ('Student',
E                                   l'Undergraduate Student')],
E                'recid': None,
E                'record': [],
E                'records': {'$schema': '/items/jsonschema/15',
E                            'created_by': 1,
E                            'id': '1.1',
E                            'item_1617186331708': [{'subitem_1551255647225': 'ff',
E                                                    'subitem_1551255648112': 'ja'}],
E                            'item_1617186819068': {'subitem_identifier_reg_text': 'test_2/0000000001',
E                                                   'subitem_identifier_reg_type': 'JaLC'},
E                            'item_1617258105262': {'resourcetype': 'conference paper',
E                                                   'resourceuri': 'http://purl.org/coar/resource_type/c_5794'},
E                            'lang': 'ja',
E                            'owner': '1',
E                            'owners': [1],
E                            'owners_ext': {'displayname': '',
E                                           'email': 'wekosoftware@nii.ac.jp',
E                                           'username': ''},
E                            'pid': {'revision_id': 0,
E                                    'type': 'depid',
E                                    'value': '1.1'},
E                            'pubdate': '2022-08-20',
E             -              'shared_user_id': -1,
E             ?                                ^^
E             +              'shared_user_id': '2',
E             ?                                ^^^
E                            'status': 'published',
E                            'title': 'title'},
E                'render_widgets': False,
E                'res_check': 1,
E                'schemaform': '/items/schemaform/1',
E                'step_item_login_url': 'weko_items_ui/iframe/item_edit.html',
E                'steps': ([{'ActionEndpoint': 'begin_action',
E                            'ActionId': 1,
E                            'ActionName': 'Start',
E                            'ActionOrder': 1,
E                            'ActionVersion': '1.0.0',
E                            'ActivityId': '2',
E                            'Author': 'contributor@test.org',
E                            'Status': 'action_doing'},
E                           {'ActionEndpoint': 'item_login',
E                            'ActionId': 3,
E                            'ActionName': 'Item Registration',
E                            'ActionOrder': 2,
E                            'ActionVersion': '1.0.0',
E                            'ActivityId': '2',
E                            'Author': '',
E                            'Status': ' '},
E                           {'ActionEndpoint': 'item_link',
E                            'ActionId': 5,
E                            'ActionName': 'Item Link',
E                            'ActionOrder': 3,
E                            'ActionVersion': '1.0.0',
E                            'ActivityId': '2',
E                            'Author': '',
E                            'Status': ' '}],),
E                'temporary_comment': None,
E                'temporary_idf_grant': '',
E                'temporary_idf_grant_suffix': '',
E                'temporary_journal': '',
E                'term_and_condition_content': '',
E                'user_profile': {'results': {'subitem_affiliated_division/department': '',
E                                             'subitem_affiliated_institution': [],
E                                             'subitem_displayname': 'guest',
E                                             'subitem_fullname': 'guest',
E                                             'subitem_mail_address': 'guest@test.org',
E                                             'subitem_phone_number': '',
E                                             'subitem_position': '',
E                                             'subitem_position(other)': '',
E                                             'subitem_university/institution': '',
E                                             'subitem_user_name': 'guest'}},
E                'workflow_detail': <WorkFlow 1>,
E               }

tests/test_utils.py:2422: AssertionError
______________________________ test_get_index_id _______________________________

    def test_get_index_id():
        """Get index ID base on activity id"""
        # from weko_workflow.api import WorkActivity, WorkFlow
    
        # activity = WorkActivity()
        # activity_detail = activity.get_activity_detail(activity_id)
    
        # workflow = WorkFlow()
        # workflow_detail = workflow.get_workflow_by_id(
        #     activity_detail.workflow_id)
    
        # index_tree_id = workflow_detail.index_tree_id
    
        # if index_tree_id:
        #     from .api import Indexes
        #     index_result = Indexes.get_index(index_tree_id)
        #     if not index_result:
        #         index_tree_id = None
        # else:
        #     index_tree_id = None
>       raise BaseException
E       BaseException

tests/test_utils.py:3101: BaseException
__________________________ test_make_activitylog_tsv ___________________________

db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
db_records = [(<PersistentIdentifier recid:1 / rec:38cd374d-4fdc-40ed-862e-cdc2aef89f22 (R)>, <PersistentIdentifier depid:1 / rec:3...type': 'conference paper'}}, <PersistentIdentifier recid:2 / rec:fd5d00c6-0e7d-4f2a-b883-2ba82fddd970 (R)>, None, ...)]

    def test_make_activitylog_tsv(db_register,db_records):
        """test make_activitylog_tsv"""
        activity = Activity()
        activities = []
        activities.append(activity.query.filter_by(activity_id='2'))
        activities.append(activity.query.filter_by(activity_id='3'))
    
    
>       output_tsv = make_activitylog_tsv(activities)

tests/test_utils.py:3111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activities = [<flask_sqlalchemy.BaseQuery object at 0x7f7cb838d080>, <flask_sqlalchemy.BaseQuery object at 0x7f7cba1cef28>]

    def make_activitylog_tsv(activities):
        """make tsv for activitiy_log
    
        Args:
            activities: activities for download as tsv.
        """
        import csv
        from io import StringIO
        file_output = StringIO()
    
        keys = current_app.config.get("WEKO_WORKFLOW_ACTIVITYLOG_XLS_COLUMNS")
    
        writer = csv.writer(file_output, delimiter="\t", lineterminator="\n")
        writer.writerow(keys)
        for item in activities:
            term = []
            for name in keys:
>               term.append(getattr(item,name))
E               AttributeError: 'BaseQuery' object has no attribute 'activity_start'

weko_workflow/utils.py:4012: AttributeError
____________________________ test_index_acl[0-True] ____________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None, id = 0, is_permission = True

    @pytest.mark.parametrize('id, is_permission', [
        (0, True),
        (1, True),
        (2, True),
        (3, True),
        (4, True),
        (5, True),
        (6, True),
    ])
    def test_index_acl(client, users, db_register2, id, is_permission):
        login(client=client, email=users[id]['email'])
        url = url_for('weko_workflow.index',_external=True)
>       res = client.get(url)

tests/test_views.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:265: in index
    **ctx
.tox/c1/lib/python3.6/site-packages/flask/templating.py:135: in render_template
    context, ctx.app)
.tox/c1/lib/python3.6/site-packages/flask/templating.py:117: in _render
    rv = template.render(context)
.tox/c1/lib/python3.6/site-packages/jinja2/asyncsupport.py:76: in render
    return original_render(self, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:1008: in render
    return self.environment.handle_exception(exc_info, True)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:780: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/jinja2/_compat.py:37: in reraise
    raise value.with_traceback(tb)
weko_workflow/templates/weko_workflow/activity_list.html:22: in top-level template code
    {%- from "invenio_communities/macros.html" import community_header %}
../weko-theme/weko_theme/templates/weko_theme/page.html:20: in top-level template code
    {%- extends config.THEME_BODY_TEMPLATE %}
../weko-theme/weko_theme/templates/weko_theme/body.html:21: in top-level template code
    {%- extends "weko_theme/base.html" %}
../weko-theme/weko_theme/templates/weko_theme/base.html:13: in top-level template code
    {%- block head %}
../weko-theme/weko_theme/templates/weko_theme/base.html:62: in block "head"
    {%- block css %}
weko_workflow/templates/weko_workflow/activity_list.html:25: in block "css"
    {{ super() }}
../weko-theme/weko_theme/templates/weko_theme/base.html:63: in block "css"
    {% assets "weko_theme_css" %}
.tox/c1/lib/python3.6/site-packages/webassets/ext/jinja2.py:186: in _render_assets
    urls = bundle.urls()
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:806: in urls
    urls.extend(bundle._urls(new_ctx, extra_filters, *args, **kwargs))
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:765: in _urls
    *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:619: in _build
    force, disable_cache=disable_cache, extra_filters=extra_filters)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:543: in _merge_and_apply
    kwargs=item_data)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:276: in apply
    return self._wrap_cache(key, func)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:213: in _wrap_cache
    content = self.cache.get(key)
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:183: in get
    filename = path.join(self.directory, '%s' % make_md5(self.V, key))
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:84: in make_md5
    for d in walk(data):
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:67: in walk
    yield obj.data().encode('utf-8')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <FileHunk /code/modules/weko-workflow/static/css/weko_theme/theme.scss>

    def data(self):
>       f = open(self.filename, 'r', encoding='utf-8')
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/weko-workflow/static/css/weko_theme/theme.scss'

.tox/c1/lib/python3.6/site-packages/webassets/merge.py:77: FileNotFoundError
____________________________ test_index_acl[1-True] ____________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None, id = 1, is_permission = True

    @pytest.mark.parametrize('id, is_permission', [
        (0, True),
        (1, True),
        (2, True),
        (3, True),
        (4, True),
        (5, True),
        (6, True),
    ])
    def test_index_acl(client, users, db_register2, id, is_permission):
        login(client=client, email=users[id]['email'])
        url = url_for('weko_workflow.index',_external=True)
>       res = client.get(url)

tests/test_views.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:265: in index
    **ctx
.tox/c1/lib/python3.6/site-packages/flask/templating.py:135: in render_template
    context, ctx.app)
.tox/c1/lib/python3.6/site-packages/flask/templating.py:117: in _render
    rv = template.render(context)
.tox/c1/lib/python3.6/site-packages/jinja2/asyncsupport.py:76: in render
    return original_render(self, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:1008: in render
    return self.environment.handle_exception(exc_info, True)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:780: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/jinja2/_compat.py:37: in reraise
    raise value.with_traceback(tb)
weko_workflow/templates/weko_workflow/activity_list.html:22: in top-level template code
    {%- from "invenio_communities/macros.html" import community_header %}
../weko-theme/weko_theme/templates/weko_theme/page.html:20: in top-level template code
    {%- extends config.THEME_BODY_TEMPLATE %}
../weko-theme/weko_theme/templates/weko_theme/body.html:21: in top-level template code
    {%- extends "weko_theme/base.html" %}
../weko-theme/weko_theme/templates/weko_theme/base.html:13: in top-level template code
    {%- block head %}
../weko-theme/weko_theme/templates/weko_theme/base.html:62: in block "head"
    {%- block css %}
weko_workflow/templates/weko_workflow/activity_list.html:25: in block "css"
    {{ super() }}
../weko-theme/weko_theme/templates/weko_theme/base.html:63: in block "css"
    {% assets "weko_theme_css" %}
.tox/c1/lib/python3.6/site-packages/webassets/ext/jinja2.py:186: in _render_assets
    urls = bundle.urls()
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:806: in urls
    urls.extend(bundle._urls(new_ctx, extra_filters, *args, **kwargs))
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:765: in _urls
    *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:619: in _build
    force, disable_cache=disable_cache, extra_filters=extra_filters)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:543: in _merge_and_apply
    kwargs=item_data)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:276: in apply
    return self._wrap_cache(key, func)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:213: in _wrap_cache
    content = self.cache.get(key)
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:183: in get
    filename = path.join(self.directory, '%s' % make_md5(self.V, key))
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:84: in make_md5
    for d in walk(data):
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:67: in walk
    yield obj.data().encode('utf-8')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <FileHunk /code/modules/weko-workflow/static/css/weko_theme/theme.scss>

    def data(self):
>       f = open(self.filename, 'r', encoding='utf-8')
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/weko-workflow/static/css/weko_theme/theme.scss'

.tox/c1/lib/python3.6/site-packages/webassets/merge.py:77: FileNotFoundError
____________________________ test_index_acl[2-True] ____________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None, id = 2, is_permission = True

    @pytest.mark.parametrize('id, is_permission', [
        (0, True),
        (1, True),
        (2, True),
        (3, True),
        (4, True),
        (5, True),
        (6, True),
    ])
    def test_index_acl(client, users, db_register2, id, is_permission):
        login(client=client, email=users[id]['email'])
        url = url_for('weko_workflow.index',_external=True)
>       res = client.get(url)

tests/test_views.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:265: in index
    **ctx
.tox/c1/lib/python3.6/site-packages/flask/templating.py:135: in render_template
    context, ctx.app)
.tox/c1/lib/python3.6/site-packages/flask/templating.py:117: in _render
    rv = template.render(context)
.tox/c1/lib/python3.6/site-packages/jinja2/asyncsupport.py:76: in render
    return original_render(self, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:1008: in render
    return self.environment.handle_exception(exc_info, True)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:780: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/jinja2/_compat.py:37: in reraise
    raise value.with_traceback(tb)
weko_workflow/templates/weko_workflow/activity_list.html:22: in top-level template code
    {%- from "invenio_communities/macros.html" import community_header %}
../weko-theme/weko_theme/templates/weko_theme/page.html:20: in top-level template code
    {%- extends config.THEME_BODY_TEMPLATE %}
../weko-theme/weko_theme/templates/weko_theme/body.html:21: in top-level template code
    {%- extends "weko_theme/base.html" %}
../weko-theme/weko_theme/templates/weko_theme/base.html:13: in top-level template code
    {%- block head %}
../weko-theme/weko_theme/templates/weko_theme/base.html:62: in block "head"
    {%- block css %}
weko_workflow/templates/weko_workflow/activity_list.html:25: in block "css"
    {{ super() }}
../weko-theme/weko_theme/templates/weko_theme/base.html:63: in block "css"
    {% assets "weko_theme_css" %}
.tox/c1/lib/python3.6/site-packages/webassets/ext/jinja2.py:186: in _render_assets
    urls = bundle.urls()
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:806: in urls
    urls.extend(bundle._urls(new_ctx, extra_filters, *args, **kwargs))
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:765: in _urls
    *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:619: in _build
    force, disable_cache=disable_cache, extra_filters=extra_filters)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:543: in _merge_and_apply
    kwargs=item_data)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:276: in apply
    return self._wrap_cache(key, func)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:213: in _wrap_cache
    content = self.cache.get(key)
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:183: in get
    filename = path.join(self.directory, '%s' % make_md5(self.V, key))
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:84: in make_md5
    for d in walk(data):
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:67: in walk
    yield obj.data().encode('utf-8')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <FileHunk /code/modules/weko-workflow/static/css/weko_theme/theme.scss>

    def data(self):
>       f = open(self.filename, 'r', encoding='utf-8')
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/weko-workflow/static/css/weko_theme/theme.scss'

.tox/c1/lib/python3.6/site-packages/webassets/merge.py:77: FileNotFoundError
____________________________ test_index_acl[3-True] ____________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None, id = 3, is_permission = True

    @pytest.mark.parametrize('id, is_permission', [
        (0, True),
        (1, True),
        (2, True),
        (3, True),
        (4, True),
        (5, True),
        (6, True),
    ])
    def test_index_acl(client, users, db_register2, id, is_permission):
        login(client=client, email=users[id]['email'])
        url = url_for('weko_workflow.index',_external=True)
>       res = client.get(url)

tests/test_views.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:265: in index
    **ctx
.tox/c1/lib/python3.6/site-packages/flask/templating.py:135: in render_template
    context, ctx.app)
.tox/c1/lib/python3.6/site-packages/flask/templating.py:117: in _render
    rv = template.render(context)
.tox/c1/lib/python3.6/site-packages/jinja2/asyncsupport.py:76: in render
    return original_render(self, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:1008: in render
    return self.environment.handle_exception(exc_info, True)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:780: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/jinja2/_compat.py:37: in reraise
    raise value.with_traceback(tb)
weko_workflow/templates/weko_workflow/activity_list.html:22: in top-level template code
    {%- from "invenio_communities/macros.html" import community_header %}
../weko-theme/weko_theme/templates/weko_theme/page.html:20: in top-level template code
    {%- extends config.THEME_BODY_TEMPLATE %}
../weko-theme/weko_theme/templates/weko_theme/body.html:21: in top-level template code
    {%- extends "weko_theme/base.html" %}
../weko-theme/weko_theme/templates/weko_theme/base.html:13: in top-level template code
    {%- block head %}
../weko-theme/weko_theme/templates/weko_theme/base.html:62: in block "head"
    {%- block css %}
weko_workflow/templates/weko_workflow/activity_list.html:25: in block "css"
    {{ super() }}
../weko-theme/weko_theme/templates/weko_theme/base.html:63: in block "css"
    {% assets "weko_theme_css" %}
.tox/c1/lib/python3.6/site-packages/webassets/ext/jinja2.py:186: in _render_assets
    urls = bundle.urls()
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:806: in urls
    urls.extend(bundle._urls(new_ctx, extra_filters, *args, **kwargs))
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:765: in _urls
    *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:619: in _build
    force, disable_cache=disable_cache, extra_filters=extra_filters)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:543: in _merge_and_apply
    kwargs=item_data)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:276: in apply
    return self._wrap_cache(key, func)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:213: in _wrap_cache
    content = self.cache.get(key)
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:183: in get
    filename = path.join(self.directory, '%s' % make_md5(self.V, key))
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:84: in make_md5
    for d in walk(data):
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:67: in walk
    yield obj.data().encode('utf-8')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <FileHunk /code/modules/weko-workflow/static/css/weko_theme/theme.scss>

    def data(self):
>       f = open(self.filename, 'r', encoding='utf-8')
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/weko-workflow/static/css/weko_theme/theme.scss'

.tox/c1/lib/python3.6/site-packages/webassets/merge.py:77: FileNotFoundError
____________________________ test_index_acl[4-True] ____________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None, id = 4, is_permission = True

    @pytest.mark.parametrize('id, is_permission', [
        (0, True),
        (1, True),
        (2, True),
        (3, True),
        (4, True),
        (5, True),
        (6, True),
    ])
    def test_index_acl(client, users, db_register2, id, is_permission):
        login(client=client, email=users[id]['email'])
        url = url_for('weko_workflow.index',_external=True)
>       res = client.get(url)

tests/test_views.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:265: in index
    **ctx
.tox/c1/lib/python3.6/site-packages/flask/templating.py:135: in render_template
    context, ctx.app)
.tox/c1/lib/python3.6/site-packages/flask/templating.py:117: in _render
    rv = template.render(context)
.tox/c1/lib/python3.6/site-packages/jinja2/asyncsupport.py:76: in render
    return original_render(self, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:1008: in render
    return self.environment.handle_exception(exc_info, True)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:780: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/jinja2/_compat.py:37: in reraise
    raise value.with_traceback(tb)
weko_workflow/templates/weko_workflow/activity_list.html:22: in top-level template code
    {%- from "invenio_communities/macros.html" import community_header %}
../weko-theme/weko_theme/templates/weko_theme/page.html:20: in top-level template code
    {%- extends config.THEME_BODY_TEMPLATE %}
../weko-theme/weko_theme/templates/weko_theme/body.html:21: in top-level template code
    {%- extends "weko_theme/base.html" %}
../weko-theme/weko_theme/templates/weko_theme/base.html:13: in top-level template code
    {%- block head %}
../weko-theme/weko_theme/templates/weko_theme/base.html:62: in block "head"
    {%- block css %}
weko_workflow/templates/weko_workflow/activity_list.html:25: in block "css"
    {{ super() }}
../weko-theme/weko_theme/templates/weko_theme/base.html:63: in block "css"
    {% assets "weko_theme_css" %}
.tox/c1/lib/python3.6/site-packages/webassets/ext/jinja2.py:186: in _render_assets
    urls = bundle.urls()
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:806: in urls
    urls.extend(bundle._urls(new_ctx, extra_filters, *args, **kwargs))
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:765: in _urls
    *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:619: in _build
    force, disable_cache=disable_cache, extra_filters=extra_filters)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:543: in _merge_and_apply
    kwargs=item_data)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:276: in apply
    return self._wrap_cache(key, func)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:213: in _wrap_cache
    content = self.cache.get(key)
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:183: in get
    filename = path.join(self.directory, '%s' % make_md5(self.V, key))
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:84: in make_md5
    for d in walk(data):
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:67: in walk
    yield obj.data().encode('utf-8')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <FileHunk /code/modules/weko-workflow/static/css/weko_theme/theme.scss>

    def data(self):
>       f = open(self.filename, 'r', encoding='utf-8')
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/weko-workflow/static/css/weko_theme/theme.scss'

.tox/c1/lib/python3.6/site-packages/webassets/merge.py:77: FileNotFoundError
____________________________ test_index_acl[5-True] ____________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None, id = 5, is_permission = True

    @pytest.mark.parametrize('id, is_permission', [
        (0, True),
        (1, True),
        (2, True),
        (3, True),
        (4, True),
        (5, True),
        (6, True),
    ])
    def test_index_acl(client, users, db_register2, id, is_permission):
        login(client=client, email=users[id]['email'])
        url = url_for('weko_workflow.index',_external=True)
>       res = client.get(url)

tests/test_views.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:265: in index
    **ctx
.tox/c1/lib/python3.6/site-packages/flask/templating.py:135: in render_template
    context, ctx.app)
.tox/c1/lib/python3.6/site-packages/flask/templating.py:117: in _render
    rv = template.render(context)
.tox/c1/lib/python3.6/site-packages/jinja2/asyncsupport.py:76: in render
    return original_render(self, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:1008: in render
    return self.environment.handle_exception(exc_info, True)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:780: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/jinja2/_compat.py:37: in reraise
    raise value.with_traceback(tb)
weko_workflow/templates/weko_workflow/activity_list.html:22: in top-level template code
    {%- from "invenio_communities/macros.html" import community_header %}
../weko-theme/weko_theme/templates/weko_theme/page.html:20: in top-level template code
    {%- extends config.THEME_BODY_TEMPLATE %}
../weko-theme/weko_theme/templates/weko_theme/body.html:21: in top-level template code
    {%- extends "weko_theme/base.html" %}
../weko-theme/weko_theme/templates/weko_theme/base.html:13: in top-level template code
    {%- block head %}
../weko-theme/weko_theme/templates/weko_theme/base.html:62: in block "head"
    {%- block css %}
weko_workflow/templates/weko_workflow/activity_list.html:25: in block "css"
    {{ super() }}
../weko-theme/weko_theme/templates/weko_theme/base.html:63: in block "css"
    {% assets "weko_theme_css" %}
.tox/c1/lib/python3.6/site-packages/webassets/ext/jinja2.py:186: in _render_assets
    urls = bundle.urls()
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:806: in urls
    urls.extend(bundle._urls(new_ctx, extra_filters, *args, **kwargs))
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:765: in _urls
    *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:619: in _build
    force, disable_cache=disable_cache, extra_filters=extra_filters)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:543: in _merge_and_apply
    kwargs=item_data)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:276: in apply
    return self._wrap_cache(key, func)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:213: in _wrap_cache
    content = self.cache.get(key)
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:183: in get
    filename = path.join(self.directory, '%s' % make_md5(self.V, key))
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:84: in make_md5
    for d in walk(data):
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:67: in walk
    yield obj.data().encode('utf-8')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <FileHunk /code/modules/weko-workflow/static/css/weko_theme/theme.scss>

    def data(self):
>       f = open(self.filename, 'r', encoding='utf-8')
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/weko-workflow/static/css/weko_theme/theme.scss'

.tox/c1/lib/python3.6/site-packages/webassets/merge.py:77: FileNotFoundError
____________________________ test_index_acl[6-True] ____________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register2 = None, id = 6, is_permission = True

    @pytest.mark.parametrize('id, is_permission', [
        (0, True),
        (1, True),
        (2, True),
        (3, True),
        (4, True),
        (5, True),
        (6, True),
    ])
    def test_index_acl(client, users, db_register2, id, is_permission):
        login(client=client, email=users[id]['email'])
        url = url_for('weko_workflow.index',_external=True)
>       res = client.get(url)

tests/test_views.py:97: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:265: in index
    **ctx
.tox/c1/lib/python3.6/site-packages/flask/templating.py:135: in render_template
    context, ctx.app)
.tox/c1/lib/python3.6/site-packages/flask/templating.py:117: in _render
    rv = template.render(context)
.tox/c1/lib/python3.6/site-packages/jinja2/asyncsupport.py:76: in render
    return original_render(self, *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:1008: in render
    return self.environment.handle_exception(exc_info, True)
.tox/c1/lib/python3.6/site-packages/jinja2/environment.py:780: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/jinja2/_compat.py:37: in reraise
    raise value.with_traceback(tb)
weko_workflow/templates/weko_workflow/activity_list.html:22: in top-level template code
    {%- from "invenio_communities/macros.html" import community_header %}
../weko-theme/weko_theme/templates/weko_theme/page.html:20: in top-level template code
    {%- extends config.THEME_BODY_TEMPLATE %}
../weko-theme/weko_theme/templates/weko_theme/body.html:21: in top-level template code
    {%- extends "weko_theme/base.html" %}
../weko-theme/weko_theme/templates/weko_theme/base.html:13: in top-level template code
    {%- block head %}
../weko-theme/weko_theme/templates/weko_theme/base.html:62: in block "head"
    {%- block css %}
weko_workflow/templates/weko_workflow/activity_list.html:25: in block "css"
    {{ super() }}
../weko-theme/weko_theme/templates/weko_theme/base.html:63: in block "css"
    {% assets "weko_theme_css" %}
.tox/c1/lib/python3.6/site-packages/webassets/ext/jinja2.py:186: in _render_assets
    urls = bundle.urls()
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:806: in urls
    urls.extend(bundle._urls(new_ctx, extra_filters, *args, **kwargs))
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:765: in _urls
    *args, **kwargs)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:619: in _build
    force, disable_cache=disable_cache, extra_filters=extra_filters)
.tox/c1/lib/python3.6/site-packages/webassets/bundle.py:543: in _merge_and_apply
    kwargs=item_data)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:276: in apply
    return self._wrap_cache(key, func)
.tox/c1/lib/python3.6/site-packages/webassets/merge.py:213: in _wrap_cache
    content = self.cache.get(key)
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:183: in get
    filename = path.join(self.directory, '%s' % make_md5(self.V, key))
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:84: in make_md5
    for d in walk(data):
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:61: in walk
    for d in walk(item): yield d
.tox/c1/lib/python3.6/site-packages/webassets/cache.py:67: in walk
    yield obj.data().encode('utf-8')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <FileHunk /code/modules/weko-workflow/static/css/weko_theme/theme.scss>

    def data(self):
>       f = open(self.filename, 'r', encoding='utf-8')
E       FileNotFoundError: [Errno 2] No such file or directory: '/code/modules/weko-workflow/static/css/weko_theme/theme.scss'

.tox/c1/lib/python3.6/site-packages/webassets/merge.py:77: FileNotFoundError
___________________________ test_next_action[0-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f7cab87b240> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f7cab95d898>, None, ...)]
users_index = 0, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f7cab66b518>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register_fullaction["activities"][0],None]):
>           res = client.post(url, json=input)

tests/test_views.py:2444: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1061: in decorated_function
    action_order=activity_detail.action_order
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f7cd0e0f860; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f7cac88d320>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7f7cac88d588> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1208 next_action: argument error
___________________________ test_next_action[1-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f7cb344e4e0> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f7cb6080278>, None, ...)]
users_index = 1, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f7cb6566cc0>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register_fullaction["activities"][0],None]):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get activity detail"
    
        # cannot get schema
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.get_schema_action",return_value=None):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == "can not get schema by action_id"
    
        # request_body error
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        update_activity_order("2",7,5)
        input = {
            "temporary_save":1,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
        }
        res = client.post(url,json=input)
        data = response_data(res)
        assert res.status_code==500
        assert data["code"] == -1
        assert data["msg"] == "{'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}"
    
        # action: start
        input = {}
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=1)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: end
        update_activity_order("2",2,7)
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=2)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
    
        # action: item register
        ## not exist pid_without_ver
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=3)
        update_activity_order("1",3,2)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 500
        assert data["code"] == -1
        assert data["msg"] == "can not get pid_without_ver"
        ## not exist record
        with patch("weko_workflow.views.WekoRecord.get_record_by_pid",return_value=None):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get record"
    
        with patch("weko_workflow.views.PersistentIdentifier.get_by_object",side_effect=PIDDoesNotExistError("recid","wrong value")):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get PersistentIdentifier"
        with patch("weko_workflow.views.WekoDeposit.get_record", return_value=None):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get pid_without_ver"
        ## template_save = 1
        ### not in journal
        update_activity_order("2",3,2)
        input = {"temporary_save":1}
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=3)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ## temporary_save=0
        ###x activity action update faild
        with patch("weko_workflow.views.WorkActivity.upt_activity_action",return_value=False):
            update_activity_order("2",3,2)
            input = {"temporary_save":0}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == ""
    
        # action: oa policy
        ## temporary_save = 1
        ### in journal
        update_activity_order("2",6,3)
        input = {"temporary_save":1,
                 "journal":{"issn":"test issn"}}
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=6)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ## temporary_save = 0
        update_activity_order("2",6,3)
        input = {"temporary_save":0,
                 "journal":{"issn":"test issn"}}
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=6)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: item link
        ## temporary_save = 0
        ### exist pid_without_ver, exist link_data
        update_activity_order("2",5,4)
        input = {
            "temporary_save":0,
            "link_data":[
                {"item_id":"1","item_title":"test item1","sele_id":"relateTo"}
            ]
        }
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=5)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
        ####x raise except
        update_activity_order("2",5,4)
        err_msg = "test update error"
        with patch("weko_workflow.views.ItemLink.update",return_value=err_msg):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == err_msg
        ## temporary_save = 1
        update_activity_order("2",5,4)
        input = {
            "temporary_save":1,
            "link_data":[]
        }
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: identifier grant
        ## exist identifier_select
        ###x temporary_save = 1
        update_activity_order("2",7,5)
        input = {
            "temporary_save":1,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
        ### temporary_save = 0
        #### select NotGrant
        input = {
            "temporary_save":0,
            "identifier_grant":"0",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        update_activity_order("2",7,5)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ###### not _old_v
        input = {
            "temporary_save":0,
            "identifier_grant":"0",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        with patch("weko_workflow.views.IdentifierHandle.get_idt_registration_data",return_value=(None, None)):
            update_activity_order("2",7,5)
            url = url_for("weko_workflow.next_action",
                    activity_id="2", action_id=7)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
    
        ###### _old_v & _old_v = _new_v
        update_activity_order("7",7,5)
        url = url_for("weko_workflow.next_action",
                activity_id="7", action_id=7)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
        ##### item_id == pid_without_ver
        ###### _value
        update_activity_order("6",7,5)
        url = url_for("weko_workflow.next_action",
                activity_id="6", action_id=7)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ###### not _value
        with patch("weko_workflow.views.IdentifierHandle.get_idt_registration_data",return_value=(None,None)):
            update_activity_order("6",7,5)
            url = url_for("weko_workflow.next_action",
                    activity_id="6", action_id=7)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
    
        #### select not Not_Grant
        #####x error_list is str
        input = {
            "temporary_save":0,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        test_msg = _('Cannot register selected DOI for current Item Type of this '
                     'item.')
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=test_msg):
            update_activity_order("2",7,5)
            res = client.post(url,json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == test_msg
    
        #####x error_list
        mock_previous_action = mocker.patch("weko_workflow.views.previous_action",return_value=make_response())
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=True):
            update_activity_order("2",7,5)
            res = client.post(url,json=input)
            assert res.status_code == status_code
            mock_previous_action.assert_called_with(
                activity_id="2",
                action_id=7,
                req=-1
            )
        ##### error_list is not str and error_list=False
        url = url_for("weko_workflow.next_action",
                activity_id="5", action_id=7)
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            update_activity_order("5",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
        ###### item_id
        ####### deposit and pid_without_ver and not recid
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
        ####### not (deposit and pid_without_ver and not recid)
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            url = url_for("weko_workflow.next_action",
                activity_id="5", action_id=7)
            update_activity_order("5",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
    
    
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        ## not exist identifier_select & not temporary_save
        input = {
            "temporary_save":0,
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        ### _value and _type
        ####x error_list is str
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=test_msg):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] ==-1
            assert data["msg"] == test_msg
        ####x error_list is not str & error_list = True
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=True):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            assert res.status_code == status_code
            mock_previous_action.assert_called_with(
                activity_id="2",
                action_id=7,
                req=-1
            )
        #### error_list is not str & error_list = False
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
        ### not (_value and _type)
        url = url_for("weko_workflow.next_action",
                      activity_id="3", action_id=7)
        update_activity_order("3",7,5)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"]==0
        assert data["msg"] == "success"
    
        ## next_action_handler is None
        activity_action = ActivityAction.query.filter_by(
            activity_id="2",
            action_id=4,
            action_order=6
        ).first()
        activity_action.action_handler=None
        db.session.merge(activity_action)
        db.session.commit()
        url = url_for("weko_workflow.next_action",
                      activity_id="2",action_id=7)
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data=response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == "can not get next_action_handler"
        activity_action = ActivityAction.query.filter_by(
            activity_id="2",
            action_id=4,
            action_order=6
        ).first()
        activity_action.action_handler=-1
        db.session.merge(activity_action)
        db.session.commit()
    
        ## exist next_flow_action.action_roles
        flow_action_role = FlowActionRole(
>           flow_action_id=db_register_fullaction["flow_actions"][5].id,
            action_role=None,
            action_user=1
        )

tests/test_views.py:2857: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f7cd0e4fe48; FlowAction>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f7cb0609080>
attribute_names = {'action_condition', 'action_date', 'action_id', 'action_order', 'action_status', 'action_version', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <FlowAction at 0x7f7cb06098d0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1208 next_action: argument error
ERROR    flask.app:views.py:1216 next_action: can not get activity_detail
ERROR    flask.app:views.py:1224 next_action: can not get schema by action_id
ERROR    flask.app:views.py:1229 next_action: {'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}
ERROR    flask.app:views.py:1290 next_action: can not get pid_without_ver
ERROR    flask.app:views.py:1298 next_action: can not get record
ERROR    flask.app:views.py:1282 can not get PersistentIdentifier
ERROR    flask.app:views.py:1290 next_action: can not get pid_without_ver
ERROR    flask.app:api.py:91 Traceback (most recent call last):
  File "/code/modules/weko-handle/weko_handle/api.py", line 62, in register_handle
    self.credential_path)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/clientcredentials.py", line 54, in load_from_JSON
    jsonfilecontent = json.loads(open(json_filename, 'r').read())
TypeError: expected str, bytes or os.PathLike object, not NoneType

ERROR    flask.app:api.py:92 expected str, bytes or os.PathLike object, not NoneType
ERROR    flask.app:api.py:91 Traceback (most recent call last):
  File "/code/modules/weko-handle/weko_handle/api.py", line 62, in register_handle
    self.credential_path)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/clientcredentials.py", line 54, in load_from_JSON
    jsonfilecontent = json.loads(open(json_filename, 'r').read())
TypeError: expected str, bytes or os.PathLike object, not NoneType

ERROR    flask.app:api.py:92 expected str, bytes or os.PathLike object, not NoneType
ERROR    flask.app:utils.py:190 Identifier datas are empty!
ERROR    flask.app:utils.py:190 Identifier datas are empty!
ERROR    flask.app:utils.py:190 Identifier datas are empty!
ERROR    flask.app:views.py:1367 next_action: can not get next_action_handler
___________________________ test_next_action[2-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f7caca12940> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f7cc402bfd0>, None, ...)]
users_index = 2, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f7caca11320>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register_fullaction["activities"][0],None]):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get activity detail"
    
        # cannot get schema
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.get_schema_action",return_value=None):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == "can not get schema by action_id"
    
        # request_body error
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        update_activity_order("2",7,5)
        input = {
            "temporary_save":1,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
        }
        res = client.post(url,json=input)
        data = response_data(res)
        assert res.status_code==500
        assert data["code"] == -1
        assert data["msg"] == "{'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}"
    
        # action: start
        input = {}
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=1)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: end
        update_activity_order("2",2,7)
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=2)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
    
        # action: item register
        ## not exist pid_without_ver
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=3)
        update_activity_order("1",3,2)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 500
        assert data["code"] == -1
        assert data["msg"] == "can not get pid_without_ver"
        ## not exist record
        with patch("weko_workflow.views.WekoRecord.get_record_by_pid",return_value=None):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get record"
    
        with patch("weko_workflow.views.PersistentIdentifier.get_by_object",side_effect=PIDDoesNotExistError("recid","wrong value")):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get PersistentIdentifier"
        with patch("weko_workflow.views.WekoDeposit.get_record", return_value=None):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get pid_without_ver"
        ## template_save = 1
        ### not in journal
        update_activity_order("2",3,2)
        input = {"temporary_save":1}
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=3)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ## temporary_save=0
        ###x activity action update faild
        with patch("weko_workflow.views.WorkActivity.upt_activity_action",return_value=False):
            update_activity_order("2",3,2)
            input = {"temporary_save":0}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == ""
    
        # action: oa policy
        ## temporary_save = 1
        ### in journal
        update_activity_order("2",6,3)
        input = {"temporary_save":1,
                 "journal":{"issn":"test issn"}}
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=6)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ## temporary_save = 0
        update_activity_order("2",6,3)
        input = {"temporary_save":0,
                 "journal":{"issn":"test issn"}}
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=6)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: item link
        ## temporary_save = 0
        ### exist pid_without_ver, exist link_data
        update_activity_order("2",5,4)
        input = {
            "temporary_save":0,
            "link_data":[
                {"item_id":"1","item_title":"test item1","sele_id":"relateTo"}
            ]
        }
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=5)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
        ####x raise except
        update_activity_order("2",5,4)
        err_msg = "test update error"
        with patch("weko_workflow.views.ItemLink.update",return_value=err_msg):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == err_msg
        ## temporary_save = 1
        update_activity_order("2",5,4)
        input = {
            "temporary_save":1,
            "link_data":[]
        }
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: identifier grant
        ## exist identifier_select
        ###x temporary_save = 1
        update_activity_order("2",7,5)
        input = {
            "temporary_save":1,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
        ### temporary_save = 0
        #### select NotGrant
        input = {
            "temporary_save":0,
            "identifier_grant":"0",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        update_activity_order("2",7,5)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ###### not _old_v
        input = {
            "temporary_save":0,
            "identifier_grant":"0",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        with patch("weko_workflow.views.IdentifierHandle.get_idt_registration_data",return_value=(None, None)):
            update_activity_order("2",7,5)
            url = url_for("weko_workflow.next_action",
                    activity_id="2", action_id=7)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
    
        ###### _old_v & _old_v = _new_v
        update_activity_order("7",7,5)
        url = url_for("weko_workflow.next_action",
                activity_id="7", action_id=7)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
        ##### item_id == pid_without_ver
        ###### _value
        update_activity_order("6",7,5)
        url = url_for("weko_workflow.next_action",
                activity_id="6", action_id=7)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ###### not _value
        with patch("weko_workflow.views.IdentifierHandle.get_idt_registration_data",return_value=(None,None)):
            update_activity_order("6",7,5)
            url = url_for("weko_workflow.next_action",
                    activity_id="6", action_id=7)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
    
        #### select not Not_Grant
        #####x error_list is str
        input = {
            "temporary_save":0,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        test_msg = _('Cannot register selected DOI for current Item Type of this '
                     'item.')
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=test_msg):
            update_activity_order("2",7,5)
            res = client.post(url,json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == test_msg
    
        #####x error_list
        mock_previous_action = mocker.patch("weko_workflow.views.previous_action",return_value=make_response())
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=True):
            update_activity_order("2",7,5)
            res = client.post(url,json=input)
            assert res.status_code == status_code
            mock_previous_action.assert_called_with(
                activity_id="2",
                action_id=7,
                req=-1
            )
        ##### error_list is not str and error_list=False
        url = url_for("weko_workflow.next_action",
                activity_id="5", action_id=7)
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            update_activity_order("5",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
        ###### item_id
        ####### deposit and pid_without_ver and not recid
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
        ####### not (deposit and pid_without_ver and not recid)
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            url = url_for("weko_workflow.next_action",
                activity_id="5", action_id=7)
            update_activity_order("5",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
    
    
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        ## not exist identifier_select & not temporary_save
        input = {
            "temporary_save":0,
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        ### _value and _type
        ####x error_list is str
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=test_msg):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] ==-1
            assert data["msg"] == test_msg
        ####x error_list is not str & error_list = True
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=True):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            assert res.status_code == status_code
            mock_previous_action.assert_called_with(
                activity_id="2",
                action_id=7,
                req=-1
            )
        #### error_list is not str & error_list = False
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
        ### not (_value and _type)
        url = url_for("weko_workflow.next_action",
                      activity_id="3", action_id=7)
        update_activity_order("3",7,5)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"]==0
        assert data["msg"] == "success"
    
        ## next_action_handler is None
        activity_action = ActivityAction.query.filter_by(
            activity_id="2",
            action_id=4,
            action_order=6
        ).first()
        activity_action.action_handler=None
        db.session.merge(activity_action)
        db.session.commit()
        url = url_for("weko_workflow.next_action",
                      activity_id="2",action_id=7)
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data=response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == "can not get next_action_handler"
        activity_action = ActivityAction.query.filter_by(
            activity_id="2",
            action_id=4,
            action_order=6
        ).first()
        activity_action.action_handler=-1
        db.session.merge(activity_action)
        db.session.commit()
    
        ## exist next_flow_action.action_roles
        flow_action_role = FlowActionRole(
>           flow_action_id=db_register_fullaction["flow_actions"][5].id,
            action_role=None,
            action_user=1
        )

tests/test_views.py:2857: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f7cd0e4fe48; FlowAction>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f7cb04e0400>
attribute_names = {'action_condition', 'action_date', 'action_id', 'action_order', 'action_status', 'action_version', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <FlowAction at 0x7f7cb04e0b38> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1208 next_action: argument error
ERROR    flask.app:views.py:1216 next_action: can not get activity_detail
ERROR    flask.app:views.py:1224 next_action: can not get schema by action_id
ERROR    flask.app:views.py:1229 next_action: {'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}
ERROR    flask.app:views.py:1290 next_action: can not get pid_without_ver
ERROR    flask.app:views.py:1298 next_action: can not get record
ERROR    flask.app:views.py:1282 can not get PersistentIdentifier
ERROR    flask.app:views.py:1290 next_action: can not get pid_without_ver
ERROR    flask.app:api.py:91 Traceback (most recent call last):
  File "/code/modules/weko-handle/weko_handle/api.py", line 62, in register_handle
    self.credential_path)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/clientcredentials.py", line 54, in load_from_JSON
    jsonfilecontent = json.loads(open(json_filename, 'r').read())
TypeError: expected str, bytes or os.PathLike object, not NoneType

ERROR    flask.app:api.py:92 expected str, bytes or os.PathLike object, not NoneType
ERROR    flask.app:api.py:91 Traceback (most recent call last):
  File "/code/modules/weko-handle/weko_handle/api.py", line 62, in register_handle
    self.credential_path)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/clientcredentials.py", line 54, in load_from_JSON
    jsonfilecontent = json.loads(open(json_filename, 'r').read())
TypeError: expected str, bytes or os.PathLike object, not NoneType

ERROR    flask.app:api.py:92 expected str, bytes or os.PathLike object, not NoneType
ERROR    flask.app:utils.py:190 Identifier datas are empty!
ERROR    flask.app:utils.py:190 Identifier datas are empty!
ERROR    flask.app:utils.py:190 Identifier datas are empty!
ERROR    flask.app:views.py:1367 next_action: can not get next_action_handler
___________________________ test_next_action[3-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f7ccab8b668> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f7cb18885c0>, None, ...)]
users_index = 3, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f7cb5d7f9b0>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register_fullaction["activities"][0],None]):
>           res = client.post(url, json=input)

tests/test_views.py:2444: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1055: in decorated_function
    if check_authority_by_admin(activity_detail):
weko_workflow/utils.py:3675: in check_authority_by_admin
    if activity.activity_login_user in community_user_ids:
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f7cd0e0f860; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f7cb9b4c828>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7f7caf374240> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1208 next_action: argument error
___________________________ test_next_action[4-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f7cac610518> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f7cacbc8208>, None, ...)]
users_index = 4, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f7cb1478e10>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register_fullaction["activities"][0],None]):
>           res = client.post(url, json=input)

tests/test_views.py:2444: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1061: in decorated_function
    action_order=activity_detail.action_order
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f7cd0e0f860; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f7cb7d47dd8>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7f7cb7d47a90> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1208 next_action: argument error
___________________________ test_next_action[5-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f7cae235550> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f7cb1982b00>, None, ...)]
users_index = 5, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f7caec88978>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register_fullaction["activities"][0],None]):
>           res = client.post(url, json=input)

tests/test_views.py:2444: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1061: in decorated_function
    action_order=activity_detail.action_order
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f7cd0e0f860; Activity>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f7cb28ed358>
attribute_names = {'action_id', 'action_order', 'action_status', 'activity_community_id', 'activity_confirm_term_of_use', 'activity_end', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <Activity at 0x7f7cafc39cc0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1208 next_action: argument error
___________________________ test_next_action[6-200] ____________________________

client = <FlaskClient <Flask 'testapp'>>
db = <SQLAlchemy engine=sqlite:////code/modules/weko-workflow/test.db>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
db_records = [(<[DetachedInstanceError('Instance <PersistentIdentifier at 0x7f7caaa390f0> is not bound to a Session; attribute refr...ibute refresh operation cannot proceed',) raised in repr()] PersistentIdentifier object at 0x7f7cad82d6a0>, None, ...)]
users_index = 6, status_code = 200
mocker = <pytest_mock.plugin.MockerFixture object at 0x7f7caa8c40b8>

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_next_action(client, db, users, db_register_fullaction, db_records, users_index, status_code, mocker):
        def update_activity_order(activity_id, action_id, action_order):
            with db.session.begin_nested():
                activity=Activity.query.filter_by(activity_id=activity_id).one_or_none()
                activity.action_id=action_id
                activity.action_order=action_order
                db.session.merge(activity)
            db.session.commit()
        login(client=client, email=users[users_index]["email"])
        with client.session_transaction() as session:
            session['itemlogin_id'] = "test id"
            session['itemlogin_activity'] = "test activity"
            session['itemlogin_item'] = "test item"
            session['itemlogin_steps'] = "test steps"
            session['itemlogin_action_id'] = "test action_id"
            session['itemlogin_cur_step'] = "test cur_step"
            session['itemlogin_record'] = "test approval_record"
            session['itemlogin_histories'] = "test histories"
            session['itemlogin_res_check'] = "test res_check"
            session['itemlogin_pid'] = "test recid"
            session['itemlogin_community_id'] = "test community_id"
    
        mocker.patch("weko_workflow.views.IdentifierHandle.remove_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.IdentifierHandle.update_idt_registration_metadata",return_value=None)
        mocker.patch("weko_workflow.views.WekoDeposit.update_feedback_mail")
        mocker.patch("weko_workflow.views.FeedbackMailList.update_by_list_item_id")
        mocker.patch("weko_workflow.views.FeedbackMailList.delete_by_list_item_id")
        mock_signal = mocker.patch("weko_workflow.views.item_created.send")
        new_item = uuid.uuid4()
        mocker.patch("weko_workflow.views.handle_finish_workflow",return_value=new_item)
    
    
        # argument error
        with patch("weko_workflow.views.type_null_check",return_value=False):
            input = {}
            url = url_for("weko_workflow.next_action",
                          activity_id="1", action_id=1)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "argument error"
    
        # can not get activity_detail
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.WorkActivity.get_activity_by_id",side_effect=[db_register_fullaction["activities"][0],None]):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get activity detail"
    
        # cannot get schema
        url = url_for("weko_workflow.next_action",
                activity_id="1", action_id=1)
        with patch("weko_workflow.views.get_schema_action",return_value=None):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == "can not get schema by action_id"
    
        # request_body error
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        update_activity_order("2",7,5)
        input = {
            "temporary_save":1,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
        }
        res = client.post(url,json=input)
        data = response_data(res)
        assert res.status_code==500
        assert data["code"] == -1
        assert data["msg"] == "{'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}"
    
        # action: start
        input = {}
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=1)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: end
        update_activity_order("2",2,7)
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=2)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
    
        # action: item register
        ## not exist pid_without_ver
        url = url_for("weko_workflow.next_action",
                      activity_id="1", action_id=3)
        update_activity_order("1",3,2)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 500
        assert data["code"] == -1
        assert data["msg"] == "can not get pid_without_ver"
        ## not exist record
        with patch("weko_workflow.views.WekoRecord.get_record_by_pid",return_value=None):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get record"
    
        with patch("weko_workflow.views.PersistentIdentifier.get_by_object",side_effect=PIDDoesNotExistError("recid","wrong value")):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get PersistentIdentifier"
        with patch("weko_workflow.views.WekoDeposit.get_record", return_value=None):
            update_activity_order("2",3,2)
            input = {"temporary_save":1}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == "can not get pid_without_ver"
        ## template_save = 1
        ### not in journal
        update_activity_order("2",3,2)
        input = {"temporary_save":1}
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=3)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ## temporary_save=0
        ###x activity action update faild
        with patch("weko_workflow.views.WorkActivity.upt_activity_action",return_value=False):
            update_activity_order("2",3,2)
            input = {"temporary_save":0}
            url = url_for("weko_workflow.next_action",
                          activity_id="2", action_id=3)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == ""
    
        # action: oa policy
        ## temporary_save = 1
        ### in journal
        update_activity_order("2",6,3)
        input = {"temporary_save":1,
                 "journal":{"issn":"test issn"}}
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=6)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ## temporary_save = 0
        update_activity_order("2",6,3)
        input = {"temporary_save":0,
                 "journal":{"issn":"test issn"}}
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=6)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == 200
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: item link
        ## temporary_save = 0
        ### exist pid_without_ver, exist link_data
        update_activity_order("2",5,4)
        input = {
            "temporary_save":0,
            "link_data":[
                {"item_id":"1","item_title":"test item1","sele_id":"relateTo"}
            ]
        }
        url = url_for("weko_workflow.next_action",
                      activity_id="2", action_id=5)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
        ####x raise except
        update_activity_order("2",5,4)
        err_msg = "test update error"
        with patch("weko_workflow.views.ItemLink.update",return_value=err_msg):
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == err_msg
        ## temporary_save = 1
        update_activity_order("2",5,4)
        input = {
            "temporary_save":1,
            "link_data":[]
        }
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        # action: identifier grant
        ## exist identifier_select
        ###x temporary_save = 1
        update_activity_order("2",7,5)
        input = {
            "temporary_save":1,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
        ### temporary_save = 0
        #### select NotGrant
        input = {
            "temporary_save":0,
            "identifier_grant":"0",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        update_activity_order("2",7,5)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ###### not _old_v
        input = {
            "temporary_save":0,
            "identifier_grant":"0",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        with patch("weko_workflow.views.IdentifierHandle.get_idt_registration_data",return_value=(None, None)):
            update_activity_order("2",7,5)
            url = url_for("weko_workflow.next_action",
                    activity_id="2", action_id=7)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
    
        ###### _old_v & _old_v = _new_v
        update_activity_order("7",7,5)
        url = url_for("weko_workflow.next_action",
                activity_id="7", action_id=7)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
        ##### item_id == pid_without_ver
        ###### _value
        update_activity_order("6",7,5)
        url = url_for("weko_workflow.next_action",
                activity_id="6", action_id=7)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"] == 0
        assert data["msg"] == "success"
    
        ###### not _value
        with patch("weko_workflow.views.IdentifierHandle.get_idt_registration_data",return_value=(None,None)):
            update_activity_order("6",7,5)
            url = url_for("weko_workflow.next_action",
                    activity_id="6", action_id=7)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
    
        #### select not Not_Grant
        #####x error_list is str
        input = {
            "temporary_save":0,
            "identifier_grant":"1",
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        test_msg = _('Cannot register selected DOI for current Item Type of this '
                     'item.')
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=test_msg):
            update_activity_order("2",7,5)
            res = client.post(url,json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] == -1
            assert data["msg"] == test_msg
    
        #####x error_list
        mock_previous_action = mocker.patch("weko_workflow.views.previous_action",return_value=make_response())
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=True):
            update_activity_order("2",7,5)
            res = client.post(url,json=input)
            assert res.status_code == status_code
            mock_previous_action.assert_called_with(
                activity_id="2",
                action_id=7,
                req=-1
            )
        ##### error_list is not str and error_list=False
        url = url_for("weko_workflow.next_action",
                activity_id="5", action_id=7)
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            update_activity_order("5",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
        ###### item_id
        ####### deposit and pid_without_ver and not recid
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
        ####### not (deposit and pid_without_ver and not recid)
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            url = url_for("weko_workflow.next_action",
                activity_id="5", action_id=7)
            update_activity_order("5",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
    
    
        url = url_for("weko_workflow.next_action",
                activity_id="2", action_id=7)
        ## not exist identifier_select & not temporary_save
        input = {
            "temporary_save":0,
            "identifier_grant_jalc_doi_suffix":"",
            "identifier_grant_jalc_cr_doi_suffix":"",
            "identifier_grant_jalc_dc_doi_suffix":"",
            "identifier_grant_ndl_jalc_doi_suffix":""
        }
        ### _value and _type
        ####x error_list is str
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=test_msg):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == 500
            assert data["code"] ==-1
            assert data["msg"] == test_msg
        ####x error_list is not str & error_list = True
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=True):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            assert res.status_code == status_code
            mock_previous_action.assert_called_with(
                activity_id="2",
                action_id=7,
                req=-1
            )
        #### error_list is not str & error_list = False
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data = response_data(res)
            assert res.status_code == status_code
            assert data["code"] == 0
            assert data["msg"] == "success"
        ### not (_value and _type)
        url = url_for("weko_workflow.next_action",
                      activity_id="3", action_id=7)
        update_activity_order("3",7,5)
        res = client.post(url, json=input)
        data = response_data(res)
        assert res.status_code == status_code
        assert data["code"]==0
        assert data["msg"] == "success"
    
        ## next_action_handler is None
        activity_action = ActivityAction.query.filter_by(
            activity_id="2",
            action_id=4,
            action_order=6
        ).first()
        activity_action.action_handler=None
        db.session.merge(activity_action)
        db.session.commit()
        url = url_for("weko_workflow.next_action",
                      activity_id="2",action_id=7)
        with patch("weko_workflow.views.check_doi_validation_not_pass",return_value=False):
            update_activity_order("2",7,5)
            res = client.post(url, json=input)
            data=response_data(res)
            assert res.status_code == 500
            assert data["code"] == -2
            assert data["msg"] == "can not get next_action_handler"
        activity_action = ActivityAction.query.filter_by(
            activity_id="2",
            action_id=4,
            action_order=6
        ).first()
        activity_action.action_handler=-1
        db.session.merge(activity_action)
        db.session.commit()
    
        ## exist next_flow_action.action_roles
        flow_action_role = FlowActionRole(
>           flow_action_id=db_register_fullaction["flow_actions"][5].id,
            action_role=None,
            action_user=1
        )

tests/test_views.py:2857: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f7cd0e4fe48; FlowAction>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f7cb3930a90>
attribute_names = {'action_condition', 'action_date', 'action_id', 'action_order', 'action_status', 'action_version', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <FlowAction at 0x7f7cb3930b00> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:1208 next_action: argument error
ERROR    flask.app:views.py:1216 next_action: can not get activity_detail
ERROR    flask.app:views.py:1224 next_action: can not get schema by action_id
ERROR    flask.app:views.py:1229 next_action: {'identifier_grant_ndl_jalc_doi_suffix': ['Missing data for required field.']}
ERROR    flask.app:views.py:1290 next_action: can not get pid_without_ver
ERROR    flask.app:views.py:1298 next_action: can not get record
ERROR    flask.app:views.py:1282 can not get PersistentIdentifier
ERROR    flask.app:views.py:1290 next_action: can not get pid_without_ver
ERROR    flask.app:api.py:91 Traceback (most recent call last):
  File "/code/modules/weko-handle/weko_handle/api.py", line 62, in register_handle
    self.credential_path)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/clientcredentials.py", line 54, in load_from_JSON
    jsonfilecontent = json.loads(open(json_filename, 'r').read())
TypeError: expected str, bytes or os.PathLike object, not NoneType

ERROR    flask.app:api.py:92 expected str, bytes or os.PathLike object, not NoneType
ERROR    flask.app:api.py:91 Traceback (most recent call last):
  File "/code/modules/weko-handle/weko_handle/api.py", line 62, in register_handle
    self.credential_path)
  File "/code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/b2handle/clientcredentials.py", line 54, in load_from_JSON
    jsonfilecontent = json.loads(open(json_filename, 'r').read())
TypeError: expected str, bytes or os.PathLike object, not NoneType

ERROR    flask.app:api.py:92 expected str, bytes or os.PathLike object, not NoneType
ERROR    flask.app:utils.py:190 Identifier datas are empty!
ERROR    flask.app:utils.py:190 Identifier datas are empty!
ERROR    flask.app:utils.py:190 Identifier datas are empty!
ERROR    flask.app:views.py:1367 next_action: can not get next_action_handler
__________________________ test_lock_activity[0-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 0, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_lock_activity(client, users,db_register, users_index, status_code):
        """Test of lock activity."""
        login(client=client, email=users[users_index]['email'])
    
        #regular
        url = url_for('weko_workflow.lock_activity', activity_id='A-00000003-00000')
        input = {'locked_value': '1-1661748792565'}
    
        with patch('weko_workflow.views.get_cache_data', return_value="1-1661748792565"):
            with patch('weko_workflow.views.update_cache_data'):
                res = client.post(url, data=input)
>               assert res.status_code == status_code
E               assert 400 == 200
E                 +400
E                 -200

tests/test_views.py:3168: AssertionError
__________________________ test_lock_activity[1-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_lock_activity(client, users,db_register, users_index, status_code):
        """Test of lock activity."""
        login(client=client, email=users[users_index]['email'])
    
        #regular
        url = url_for('weko_workflow.lock_activity', activity_id='A-00000003-00000')
        input = {'locked_value': '1-1661748792565'}
    
        with patch('weko_workflow.views.get_cache_data', return_value="1-1661748792565"):
            with patch('weko_workflow.views.update_cache_data'):
                res = client.post(url, data=input)
>               assert res.status_code == status_code
E               assert 400 == 200
E                 +400
E                 -200

tests/test_views.py:3168: AssertionError
__________________________ test_lock_activity[2-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 2, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_lock_activity(client, users,db_register, users_index, status_code):
        """Test of lock activity."""
        login(client=client, email=users[users_index]['email'])
    
        #regular
        url = url_for('weko_workflow.lock_activity', activity_id='A-00000003-00000')
        input = {'locked_value': '1-1661748792565'}
    
        with patch('weko_workflow.views.get_cache_data', return_value="1-1661748792565"):
            with patch('weko_workflow.views.update_cache_data'):
                res = client.post(url, data=input)
>               assert res.status_code == status_code
E               assert 400 == 200
E                 +400
E                 -200

tests/test_views.py:3168: AssertionError
__________________________ test_lock_activity[3-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 3, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_lock_activity(client, users,db_register, users_index, status_code):
        """Test of lock activity."""
        login(client=client, email=users[users_index]['email'])
    
        #regular
        url = url_for('weko_workflow.lock_activity', activity_id='A-00000003-00000')
        input = {'locked_value': '1-1661748792565'}
    
        with patch('weko_workflow.views.get_cache_data', return_value="1-1661748792565"):
            with patch('weko_workflow.views.update_cache_data'):
                res = client.post(url, data=input)
>               assert res.status_code == status_code
E               assert 400 == 200
E                 +400
E                 -200

tests/test_views.py:3168: AssertionError
__________________________ test_lock_activity[4-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 4, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_lock_activity(client, users,db_register, users_index, status_code):
        """Test of lock activity."""
        login(client=client, email=users[users_index]['email'])
    
        #regular
        url = url_for('weko_workflow.lock_activity', activity_id='A-00000003-00000')
        input = {'locked_value': '1-1661748792565'}
    
        with patch('weko_workflow.views.get_cache_data', return_value="1-1661748792565"):
            with patch('weko_workflow.views.update_cache_data'):
                res = client.post(url, data=input)
>               assert res.status_code == status_code
E               assert 400 == 200
E                 +400
E                 -200

tests/test_views.py:3168: AssertionError
__________________________ test_lock_activity[5-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 5, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_lock_activity(client, users,db_register, users_index, status_code):
        """Test of lock activity."""
        login(client=client, email=users[users_index]['email'])
    
        #regular
        url = url_for('weko_workflow.lock_activity', activity_id='A-00000003-00000')
        input = {'locked_value': '1-1661748792565'}
    
        with patch('weko_workflow.views.get_cache_data', return_value="1-1661748792565"):
            with patch('weko_workflow.views.update_cache_data'):
                res = client.post(url, data=input)
>               assert res.status_code == status_code
E               assert 400 == 200
E                 +400
E                 -200

tests/test_views.py:3168: AssertionError
__________________________ test_lock_activity[6-200] ___________________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 6, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_lock_activity(client, users,db_register, users_index, status_code):
        """Test of lock activity."""
        login(client=client, email=users[users_index]['email'])
    
        #regular
        url = url_for('weko_workflow.lock_activity', activity_id='A-00000003-00000')
        input = {'locked_value': '1-1661748792565'}
    
        with patch('weko_workflow.views.get_cache_data', return_value="1-1661748792565"):
            with patch('weko_workflow.views.update_cache_data'):
                res = client.post(url, data=input)
>               assert res.status_code == status_code
E               assert 400 == 200
E                 +400
E                 -200

tests/test_views.py:3168: AssertionError
______________________ test_get_feedback_maillist[0-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 0, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:3481: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f7cd0dcc978; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f7ca01cfb00>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7f7ca01cfd30> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:2284 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[1-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:3481: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f7cd0dcc978; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f7ca1092be0>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7f7ca1092ef0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:2284 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[2-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 2, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:3481: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f7cd0dcc978; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f7ca1dc0be0>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7f7ca1dc0eb8> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:2284 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[3-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 3, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:3481: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f7cd0dcc978; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f7ca2132b38>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7f7ca21329e8> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:2284 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[4-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 4, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:3481: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f7cd0dcc978; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f7ca22c3f98>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7f7ca22c30f0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:2284 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[5-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 5, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:3481: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f7cd0dcc978; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f7ca23d1cc0>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7f7ca23d1be0> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:2284 get_feedback_maillist: argument error
______________________ test_get_feedback_maillist[6-200] _______________________

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users_index = 6, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 200),
        (1, 200),
        (2, 200),
        (3, 200),
        (4, 200),
        (5, 200),
        (6, 200),
    ])
    def test_get_feedback_maillist(client, users, db_register, users_index, status_code):
        login(client=client, email=users[users_index]['email'])
    
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        with patch('weko_workflow.views.type_null_check', return_value=False):
            res = client.get(url)
            data = response_data(res)
            assert res.status_code== 400
            assert data["code"] == -1
            assert data["msg"] == 'arguments error'
    
        #戻り値jsonify(code=0, msg=_('Empty!'))の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='1')
        res = client.get(url)
        data = response_data(res)
        assert res.status_code==status_code
        assert data['code'] == 0
        assert data['msg'] == 'Empty!'
    
        #戻り値jsonify(code=1,msg=_('Success'),data=mail_list)の分岐テスト
        url = url_for('weko_workflow.get_feedback_maillist', activity_id='4')
        res = client.get(url)
        data = response_data(res)
>       mail_list = db_register['action_feedback_mail'].feedback_maillist

tests/test_views.py:3481: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:275: in __get__
    return self.impl.get(instance_state(instance), dict_)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/attributes.py:669: in get
    value = state._load_expired(state, passive)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/state.py:632: in _load_expired
    self.manager.deferred_scalar_loader(self, toload)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

mapper = <Mapper at 0x7f7cd0dcc978; ActionFeedbackMail>
state = <sqlalchemy.orm.state.InstanceState object at 0x7f7cb03410f0>
attribute_names = {'action_id', 'activity_id', 'created', 'feedback_maillist', 'id', 'status', ...}

    def load_scalar_attributes(mapper, state, attribute_names):
        """initiate a column-based attribute refresh operation."""
    
        # assert mapper is _state_mapper(state)
        session = state.session
        if not session:
            raise orm_exc.DetachedInstanceError(
                "Instance %s is not bound to a Session; "
>               "attribute refresh operation cannot proceed" % (state_str(state))
            )
E           sqlalchemy.orm.exc.DetachedInstanceError: Instance <ActionFeedbackMail at 0x7f7cc64edba8> is not bound to a Session; attribute refresh operation cannot proceed (Background on this error at: http://sqlalche.me/e/bhk3)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/loading.py:913: DetachedInstanceError
------------------------------ Captured log call -------------------------------
ERROR    flask.app:views.py:2284 get_feedback_maillist: argument error
__ test_withdraw_confirm_exception2[0-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 0, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:3816: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1076: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2186: TypeError
__ test_withdraw_confirm_exception2[1-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 1, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:3816: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1056: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2186: TypeError
__ test_withdraw_confirm_exception2[2-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 2, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:3816: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1056: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2186: TypeError
__ test_withdraw_confirm_exception2[3-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 3, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:3816: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1076: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2186: TypeError
__ test_withdraw_confirm_exception2[4-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 4, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:3816: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1076: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2186: TypeError
__ test_withdraw_confirm_exception2[5-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 5, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:3816: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1076: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2186: TypeError
__ test_withdraw_confirm_exception2[6-input_data2-500--1-bad identifier data] __

client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
users_index = 6, status_code = 500, input_data = {'passwd': 'DELETE'}, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    @pytest.mark.parametrize('users_index', [0, 1, 2, 3, 4, 5, 6])
    def test_withdraw_confirm_exception2(client, users, db_register_fullaction, users_index, status_code, input_data, code, msg):
        """Test of withdraw confirm."""
        login(client=client, email=users[users_index]['email'])
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
            return_value=(roles, action_users)):
>               res = client.post(url, json=input)

tests/test_views.py:3816: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:148: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1056: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2186: TypeError
_ test_withdraw_confirm_exception2_guestlogin[input_data2-500--1-bad identifier data] _

guest = <FlaskClient <Flask 'testapp'>>
client = <FlaskClient <Flask 'testapp'>>
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
db_register_fullaction = {'activities': [<Activity 1>, <Activity 4>, <Activity 5>, <Activity 6>, <Activity 7>, <Activity 8>, ...], 'flow_actions': [<FlowAction 1>, <FlowAction 2>, <FlowAction 3>, <FlowAction 4>, <FlowAction 5>, <FlowAction 6>, ...]}
input_data = {'passwd': 'DELETE'}, status_code = 500, code = -1
msg = 'bad identifier data'

    @pytest.mark.parametrize('input_data, status_code, code, msg', input_data_list)
    def test_withdraw_confirm_exception2_guestlogin(guest, client, users, db_register_fullaction, input_data, status_code, code, msg):
        """Test of withdraw confirm."""
        url = url_for('weko_workflow.withdraw_confirm', activity_id='1',
                action_id=2)
        input = input_data
        roles = {
            'allow': [],
            'deny': []
        }
        action_users = {
            'allow': [],
            'deny': []
        }
    
        with patch('weko_workflow.views.IdentifierHandle'):
            with patch('weko_workflow.views.WorkActivity.get_activity_action_role',
                return_value=(roles, action_users)):
>               res = guest.post(url, json=input)

tests/test_views.py:3841: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1039: in post
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
../weko-accounts/weko_accounts/utils.py:146: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:1076: in decorated_function
    return func(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activity_id = '1', action_id = 2

    @workflow_blueprint.route(
        '/activity/detail/<string:activity_id>/<int:action_id>'
        '/withdraw',
        methods=['POST'])
    @login_required_customize
    @check_authority
    def withdraw_confirm(activity_id='0', action_id=0):
        """ユーザー情報を確認し、リダイレクト先のURLを返す。
        Args:
            activity_id (str, optional): 対象アクティビティID.パスパラメータから取得. Defaults to '0'.
            action_id (int, optional): 現在のアクションID.パスパラメータから取得. Defaults to 0.
    
        Returns:
            object: ユーザー情報の確認結果とリダイレクト先URLのjson dataをレスポンスボディにもつResponse. validated by ResponseMessageSchema
    
        Raises:
            marshmallow.exceptions.ValidationError: if ResponseMessageSchema is invalid.
    
        ---
        post:
            description: "withdraw confirm"
            security:
                - login_required_customize: []
                - check_authority: []
            requestBody:
                required: false
                content:
                    application/json:
                        schema:
                            PasswdSchema
                        example: {"passwd": "DELETE"}
            parameters:
                - in: path
                  name: activity_id
                  description: 対象のアクティビティID
                  schema:
                    type: string
                - in: path
                  name: action_id
                  description: 現在のアクションID
                  schema:
                    type: int
            responses:
                200:
                    description: "success"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": 0, "msg": "success", "data": {"redirect":"/workflow/activity/detail/1"}}
                500:
                    description: "server error"
                    content:
                        application/json:
                            schema:
                                ResponseMessageSchema
                            example:
                                {"code": -1, "msg": "argument error"}}
    
    
        """
        try:
            check_flg = type_null_check(activity_id, str)
            check_flg &= type_null_check(action_id, int)
            if not check_flg:
                current_app.logger.error("withdraw_confirm: argument error")
                res = ResponseMessageSchema().load({"code":-1, "msg":"argument error"})
                return jsonify(res.data), 500
    
            try:
                schema_load = PasswdSchema().load(request.get_json())
            except ValidationError as err:
                current_app.logger.error("withdraw_confirm: "+str(err))
                res = ResponseMessageSchema().load({"code":-1, "msg":str(err)})
                return jsonify(res.data), 500
            post_json = schema_load.data
    
            password = post_json.get('passwd', None)
            # wekouser = ShibUser()
            if password == 'DELETE':
                activity = WorkActivity()
                identifier_actionid = get_actionid('identifier_grant')
                identifier = activity.get_action_identifier_grant(
                    activity_id,
                    identifier_actionid)
                identifier['action_identifier_select'] = \
                    current_app.config.get(
>                       "WEKO_WORKFLOW_IDENTIFIER_GRANT_IS_WITHDRAWING", -2)
E                       TypeError: 'NoneType' object does not support item assignment

weko_workflow/views.py:2186: TypeError
______________________ test_download_activitylog_1[1-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 403),
        (1, 200),
        (2, 200),
        (3, 403),
        (4, 403),
        (5, 403),
        (6, 200),
    ])
    def test_download_activitylog_1(client, db_register , users, users_index, status_code):
        """Test of download_activitylog."""
        login(client=client, email=users[users_index]['email'])
    
        #1
        url = url_for('weko_workflow.download_activitylog',
                    activity_id='2')
>       res = client.get(url)

tests/test_views.py:3940: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2732: in download_activitylog
    make_activitylog_tsv(activities),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activities = [<Activity 4>]

    def make_activitylog_tsv(activities):
        """make tsv for activitiy_log
    
        Args:
            activities: activities for download as tsv.
        """
        import csv
        from io import StringIO
        file_output = StringIO()
    
        keys = current_app.config.get("WEKO_WORKFLOW_ACTIVITYLOG_XLS_COLUMNS")
    
        writer = csv.writer(file_output, delimiter="\t", lineterminator="\n")
        writer.writerow(keys)
        for item in activities:
            term = []
            for name in keys:
>               term.append(getattr(item,name))
E               AttributeError: 'Activity' object has no attribute 'StatusDesc'

weko_workflow/utils.py:4012: AttributeError
______________________ test_download_activitylog_1[2-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 2, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 403),
        (1, 200),
        (2, 200),
        (3, 403),
        (4, 403),
        (5, 403),
        (6, 200),
    ])
    def test_download_activitylog_1(client, db_register , users, users_index, status_code):
        """Test of download_activitylog."""
        login(client=client, email=users[users_index]['email'])
    
        #1
        url = url_for('weko_workflow.download_activitylog',
                    activity_id='2')
>       res = client.get(url)

tests/test_views.py:3940: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2732: in download_activitylog
    make_activitylog_tsv(activities),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activities = [<Activity 4>]

    def make_activitylog_tsv(activities):
        """make tsv for activitiy_log
    
        Args:
            activities: activities for download as tsv.
        """
        import csv
        from io import StringIO
        file_output = StringIO()
    
        keys = current_app.config.get("WEKO_WORKFLOW_ACTIVITYLOG_XLS_COLUMNS")
    
        writer = csv.writer(file_output, delimiter="\t", lineterminator="\n")
        writer.writerow(keys)
        for item in activities:
            term = []
            for name in keys:
>               term.append(getattr(item,name))
E               AttributeError: 'Activity' object has no attribute 'StatusDesc'

weko_workflow/utils.py:4012: AttributeError
______________________ test_download_activitylog_1[6-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 6, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (0, 403),
        (1, 200),
        (2, 200),
        (3, 403),
        (4, 403),
        (5, 403),
        (6, 200),
    ])
    def test_download_activitylog_1(client, db_register , users, users_index, status_code):
        """Test of download_activitylog."""
        login(client=client, email=users[users_index]['email'])
    
        #1
        url = url_for('weko_workflow.download_activitylog',
                    activity_id='2')
>       res = client.get(url)

tests/test_views.py:3940: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2732: in download_activitylog
    make_activitylog_tsv(activities),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activities = [<Activity 4>]

    def make_activitylog_tsv(activities):
        """make tsv for activitiy_log
    
        Args:
            activities: activities for download as tsv.
        """
        import csv
        from io import StringIO
        file_output = StringIO()
    
        keys = current_app.config.get("WEKO_WORKFLOW_ACTIVITYLOG_XLS_COLUMNS")
    
        writer = csv.writer(file_output, delimiter="\t", lineterminator="\n")
        writer.writerow(keys)
        for item in activities:
            term = []
            for name in keys:
>               term.append(getattr(item,name))
E               AttributeError: 'Activity' object has no attribute 'StatusDesc'

weko_workflow/utils.py:4012: AttributeError
______________________ test_download_activitylog_2[1-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 1, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (1, 200),
        (2, 200),
        (6, 200),
    ])
    def test_download_activitylog_2(client, db_register , users, users_index, status_code):
        """Test of download_activitylog."""
        login(client=client, email=users[users_index]['email'])
    
        #4
        url = url_for('weko_workflow.download_activitylog',
                    activity_id='2')
>       res = client.get(url)

tests/test_views.py:3966: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2732: in download_activitylog
    make_activitylog_tsv(activities),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activities = [<Activity 4>]

    def make_activitylog_tsv(activities):
        """make tsv for activitiy_log
    
        Args:
            activities: activities for download as tsv.
        """
        import csv
        from io import StringIO
        file_output = StringIO()
    
        keys = current_app.config.get("WEKO_WORKFLOW_ACTIVITYLOG_XLS_COLUMNS")
    
        writer = csv.writer(file_output, delimiter="\t", lineterminator="\n")
        writer.writerow(keys)
        for item in activities:
            term = []
            for name in keys:
>               term.append(getattr(item,name))
E               AttributeError: 'Activity' object has no attribute 'StatusDesc'

weko_workflow/utils.py:4012: AttributeError
______________________ test_download_activitylog_2[2-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 2, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (1, 200),
        (2, 200),
        (6, 200),
    ])
    def test_download_activitylog_2(client, db_register , users, users_index, status_code):
        """Test of download_activitylog."""
        login(client=client, email=users[users_index]['email'])
    
        #4
        url = url_for('weko_workflow.download_activitylog',
                    activity_id='2')
>       res = client.get(url)

tests/test_views.py:3966: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2732: in download_activitylog
    make_activitylog_tsv(activities),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activities = [<Activity 4>]

    def make_activitylog_tsv(activities):
        """make tsv for activitiy_log
    
        Args:
            activities: activities for download as tsv.
        """
        import csv
        from io import StringIO
        file_output = StringIO()
    
        keys = current_app.config.get("WEKO_WORKFLOW_ACTIVITYLOG_XLS_COLUMNS")
    
        writer = csv.writer(file_output, delimiter="\t", lineterminator="\n")
        writer.writerow(keys)
        for item in activities:
            term = []
            for name in keys:
>               term.append(getattr(item,name))
E               AttributeError: 'Activity' object has no attribute 'StatusDesc'

weko_workflow/utils.py:4012: AttributeError
______________________ test_download_activitylog_2[6-200] ______________________

client = <FlaskClient <Flask 'testapp'>>
db_register = {'action_feedback_mail': <ActionFeedbackMail 2>, 'action_feedback_mail1': <ActionFeedbackMail 3>, 'action_feedback_mail2': <ActionFeedbackMail 4>, 'action_feedback_mail3': <ActionFeedbackMail 5>, ...}
users = [{'email': 'contributor@test.org', 'id': 2, 'obj': <User 2>}, {'email': 'repoadmin@test.org', 'id': 4, 'obj': <User 4>...eneraluser@test.org', 'id': 6, 'obj': <User 6>}, {'email': 'originalroleuser@test.org', 'id': 7, 'obj': <User 7>}, ...]
users_index = 6, status_code = 200

    @pytest.mark.parametrize('users_index, status_code', [
        (1, 200),
        (2, 200),
        (6, 200),
    ])
    def test_download_activitylog_2(client, db_register , users, users_index, status_code):
        """Test of download_activitylog."""
        login(client=client, email=users[users_index]['email'])
    
        #4
        url = url_for('weko_workflow.download_activitylog',
                    activity_id='2')
>       res = client.get(url)

tests/test_views.py:3966: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1029: in get
    return self.open(*args, **kw)
.tox/c1/lib/python3.6/site-packages/flask/testing.py:196: in open
    follow_redirects=follow_redirects
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:993: in open
    response = self.run_wsgi_app(environ.copy(), buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:884: in run_wsgi_app
    rv = run_wsgi_app(self.application, environ, buffered=buffered)
.tox/c1/lib/python3.6/site-packages/werkzeug/test.py:1119: in run_wsgi_app
    app_rv = app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2334: in __call__
    return self.wsgi_app(environ, start_response)
.tox/c1/lib/python3.6/site-packages/flask/app.py:2320: in wsgi_app
    response = self.handle_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1766: in handle_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:2317: in wsgi_app
    response = self.full_dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1840: in full_dispatch_request
    rv = self.handle_user_exception(e)
.tox/c1/lib/python3.6/site-packages/flask/app.py:1743: in handle_user_exception
    reraise(exc_type, exc_value, tb)
.tox/c1/lib/python3.6/site-packages/flask/_compat.py:36: in reraise
    raise value
.tox/c1/lib/python3.6/site-packages/flask/app.py:1838: in full_dispatch_request
    rv = self.dispatch_request()
.tox/c1/lib/python3.6/site-packages/flask/app.py:1824: in dispatch_request
    return self.view_functions[rule.endpoint](**req.view_args)
.tox/c1/lib/python3.6/site-packages/flask_login/utils.py:261: in decorated_view
    return func(*args, **kwargs)
weko_workflow/views.py:2732: in download_activitylog
    make_activitylog_tsv(activities),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

activities = [<Activity 4>]

    def make_activitylog_tsv(activities):
        """make tsv for activitiy_log
    
        Args:
            activities: activities for download as tsv.
        """
        import csv
        from io import StringIO
        file_output = StringIO()
    
        keys = current_app.config.get("WEKO_WORKFLOW_ACTIVITYLOG_XLS_COLUMNS")
    
        writer = csv.writer(file_output, delimiter="\t", lineterminator="\n")
        writer.writerow(keys)
        for item in activities:
            term = []
            for name in keys:
>               term.append(getattr(item,name))
E               AttributeError: 'Activity' object has no attribute 'StatusDesc'

weko_workflow/utils.py:4012: AttributeError
=============================== warnings summary ===============================
../invenio-indexer/invenio_indexer/cli.py:108
  /code/modules/invenio-indexer/invenio_indexer/cli.py:108: DeprecationWarning: 'resultcallback' has been renamed to 'result_callback'. The old name will be removed in Click 8.1.
    @queue.resultcallback()

.tox/c1/lib/python3.6/site-packages/flask_oauthlib/contrib/cache.py:3
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/flask_oauthlib/contrib/cache.py:3: DeprecationWarning: 'werkzeug.contrib.cache' is deprecated as of version 0.15 and will be removed in version 1.0. It has moved to https://github.com/pallets/cachelib.
    from werkzeug.contrib.cache import NullCache, SimpleCache, FileSystemCache

.tox/c1/lib/python3.6/site-packages/past/translation/__init__.py:35
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/past/translation/__init__.py:35: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
    import imp

tests/test_admin.py: 572 warnings
tests/test_api.py: 156 warnings
tests/test_cli.py: 52 warnings
tests/test_romeo.py: 78 warnings
tests/test_sessions.py: 26 warnings
tests/test_tasks.py: 26 warnings
tests/test_utils.py: 2782 warnings
tests/test_views.py: 7306 warnings
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/invenio_admin/ext.py:73: PendingDeprecationWarning: Usage of model and modelview kwargs are deprecated in favor of view_class, args and kwargs.
    PendingDeprecationWarning

tests/test_admin.py: 22 warnings
tests/test_api.py: 6 warnings
tests/test_cli.py: 2 warnings
tests/test_romeo.py: 3 warnings
tests/test_sessions.py: 1 warning
tests/test_tasks.py: 1 warning
tests/test_utils.py: 107 warnings
tests/test_views.py: 281 warnings
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/flask_admin/model/base.py:1416: UserWarning: Fields missing from ruleset: created_userId,created_date,updated_userId,updated_date
    warnings.warn(text)

tests/test_admin.py: 22 warnings
tests/test_api.py: 6 warnings
tests/test_cli.py: 2 warnings
tests/test_romeo.py: 3 warnings
tests/test_sessions.py: 1 warning
tests/test_tasks.py: 1 warning
tests/test_utils.py: 107 warnings
tests/test_views.py: 281 warnings
  /code/modules/invenio-oaiserver/invenio_oaiserver/ext.py:138: UserWarning: Please specify the OAISERVER_ID_PREFIX configuration.default value is: oai:63ee5d1d2822:recid/
    app.config.get('OAISERVER_ID_PREFIX')))

tests/test_admin.py: 15 warnings
tests/test_api.py: 5 warnings
tests/test_cli.py: 1 warning
tests/test_sessions.py: 1 warning
tests/test_utils.py: 43 warnings
tests/test_views.py: 261 warnings
  /code/modules/weko-workflow/.tox/c1/lib/python3.6/site-packages/sqlalchemy/orm/session.py:2455: SAWarning: Usage of the 'Session.add()' operation is not currently supported within the execution stage of the flush process. Results may not be consistent.  Consider using alternative event listeners or connection-level operations instead.
    "event listeners or connection-level operations instead." % method

-- Docs: https://docs.pytest.org/en/stable/warnings.html

---------- coverage: platform linux, python 3.6.15-final-0 -----------
Name                                  Stmts   Miss Branch BrPart  Cover
-----------------------------------------------------------------------
weko_workflow/__init__.py                 4      0      0      0   100%
weko_workflow/admin.py                  223    101     72      8    52%
weko_workflow/api.py                   1215    383    414     89    66%
weko_workflow/bundles.py                 14      0      0      0   100%
weko_workflow/cli.py                    109     22     42     15    74%
weko_workflow/config.py                  90      0      0      0   100%
weko_workflow/errors.py                  18      0     10      0   100%
weko_workflow/ext.py                     21      0     10      2    94%
weko_workflow/models.py                 310     16     76      9    93%
weko_workflow/romeo.py                   22      0      0      0   100%
weko_workflow/schema/marshmallow.py      87      0     56      0   100%
weko_workflow/schema/utils.py            22      3     14      3    83%
weko_workflow/scopes.py                   6      0      0      0   100%
weko_workflow/sessions.py                13      5      4      1    53%
weko_workflow/tasks.py                    7      0      0      0   100%
weko_workflow/utils.py                 1855    302    812     63    81%
weko_workflow/version.py                  2      0      0      0   100%
weko_workflow/views.py                 1278    234    456     23    81%
-----------------------------------------------------------------------
TOTAL                                  5296   1066   1966    213    78%
Coverage HTML written to dir htmlcov

=========================== short test summary info ============================
FAILED tests/test_admin.py::TestFlowSettingView::test_flow_detail_acl[1-200]
FAILED tests/test_admin.py::TestFlowSettingView::test_update_flow - Attribute...
FAILED tests/test_admin.py::TestFlowSettingView::test_new_flow - AttributeErr...
FAILED tests/test_admin.py::TestFlowSettingView::test_del_flow - AttributeErr...
FAILED tests/test_admin.py::TestFlowSettingView::test_get_actions - Assertion...
FAILED tests/test_admin.py::TestFlowSettingView::test_upt_flow_action - Attri...
FAILED tests/test_admin.py::TestWorkFlowSettingView::test_index_acl[1-200] - ...
FAILED tests/test_admin.py::TestWorkFlowSettingView::test_update_workflow_acl[1-200]
FAILED tests/test_admin.py::TestWorkFlowSettingView::test_save_workflow_role
FAILED tests/test_admin.py::TestWorkFlowSettingView::test_get_language_workflows
FAILED tests/test_cli.py::test_init_workflow_tables - assert ("(sqlite3.Integ...
FAILED tests/test_utils.py::test_item_metadata_validation - sqlalchemy.exc.St...
FAILED tests/test_utils.py::test_handle_check_required_pattern_and_either - N...
FAILED tests/test_utils.py::test_delete_bucket - sqlalchemy.exc.IntegrityErro...
FAILED tests/test_utils.py::test_set_bucket_default_size - AttributeError: 'R...
FAILED tests/test_utils.py::test_prepare_edit_workflow - sqlalchemy.exc.State...
FAILED tests/test_utils.py::test_handle_finish_workflow - ModuleNotFoundError...
FAILED tests/test_utils.py::test_modify_item_metadata - AssertionError: asser...
FAILED tests/test_utils.py::test_send_usage_application_mail_for_guest_user
FAILED tests/test_utils.py::test___init_activity_detail_data_for_guest - Asse...
FAILED tests/test_utils.py::test_get_index_id - BaseException
FAILED tests/test_utils.py::test_make_activitylog_tsv - AttributeError: 'Base...
FAILED tests/test_views.py::test_index_acl[0-True] - FileNotFoundError: [Errn...
FAILED tests/test_views.py::test_index_acl[1-True] - FileNotFoundError: [Errn...
FAILED tests/test_views.py::test_index_acl[2-True] - FileNotFoundError: [Errn...
FAILED tests/test_views.py::test_index_acl[3-True] - FileNotFoundError: [Errn...
FAILED tests/test_views.py::test_index_acl[4-True] - FileNotFoundError: [Errn...
FAILED tests/test_views.py::test_index_acl[5-True] - FileNotFoundError: [Errn...
FAILED tests/test_views.py::test_index_acl[6-True] - FileNotFoundError: [Errn...
FAILED tests/test_views.py::test_next_action[0-200] - sqlalchemy.orm.exc.Deta...
FAILED tests/test_views.py::test_next_action[1-200] - sqlalchemy.orm.exc.Deta...
FAILED tests/test_views.py::test_next_action[2-200] - sqlalchemy.orm.exc.Deta...
FAILED tests/test_views.py::test_next_action[3-200] - sqlalchemy.orm.exc.Deta...
FAILED tests/test_views.py::test_next_action[4-200] - sqlalchemy.orm.exc.Deta...
FAILED tests/test_views.py::test_next_action[5-200] - sqlalchemy.orm.exc.Deta...
FAILED tests/test_views.py::test_next_action[6-200] - sqlalchemy.orm.exc.Deta...
FAILED tests/test_views.py::test_lock_activity[0-200] - assert 400 == 200
FAILED tests/test_views.py::test_lock_activity[1-200] - assert 400 == 200
FAILED tests/test_views.py::test_lock_activity[2-200] - assert 400 == 200
FAILED tests/test_views.py::test_lock_activity[3-200] - assert 400 == 200
FAILED tests/test_views.py::test_lock_activity[4-200] - assert 400 == 200
FAILED tests/test_views.py::test_lock_activity[5-200] - assert 400 == 200
FAILED tests/test_views.py::test_lock_activity[6-200] - assert 400 == 200
FAILED tests/test_views.py::test_get_feedback_maillist[0-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[1-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[2-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[3-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[4-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[5-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_get_feedback_maillist[6-200] - sqlalchemy.or...
FAILED tests/test_views.py::test_withdraw_confirm_exception2[0-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[1-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[2-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[3-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[4-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[5-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2[6-input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_withdraw_confirm_exception2_guestlogin[input_data2-500--1-bad identifier data]
FAILED tests/test_views.py::test_download_activitylog_1[1-200] - AttributeErr...
FAILED tests/test_views.py::test_download_activitylog_1[2-200] - AttributeErr...
FAILED tests/test_views.py::test_download_activitylog_1[6-200] - AttributeErr...
FAILED tests/test_views.py::test_download_activitylog_2[1-200] - AttributeErr...
FAILED tests/test_views.py::test_download_activitylog_2[2-200] - AttributeErr...
FAILED tests/test_views.py::test_download_activitylog_2[6-200] - AttributeErr...
==== 64 failed, 381 passed, 1 skipped, 12173 warnings in 7280.32s (2:01:20) ====
ERROR: InvocationError for command /code/modules/weko-workflow/.tox/c1/bin/pytest --cov=weko_workflow tests -v -s -vv --cov-branch --cov-report=term --cov-report=html --cov-config=tox.ini --basetemp=/code/modules/weko-workflow/.tox/c1/tmp (exited with code 1)
___________________________________ summary ____________________________________
ERROR:   c1: commands failed
