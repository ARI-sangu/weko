GLOB sdist-make: /code/modules/invenio-oauth2server/setup.py
c1 inst-nodeps: /code/modules/invenio-oauth2server/.tox/.tmp/package/1/invenio-oauth2server-1.0.0.zip
c1 installed: alabaster==0.7.13,alembic==0.9.6,amqp==2.6.0,angular-gettext-babel==0.3,aniso8601==8.0.0,arrow==0.12.1,asn1crypto==0.23.0,atomicwrites==1.4.1,attrs==17.4.0,b2handle==1.1.2,Babel==2.5.1,bagit==1.7.0,beautifulsoup4==4.9.3,bibtexparser==1.0.1,billiard==3.6.3.0,binaryornot==0.4.4,bleach==3.1.0,blinker==1.4,boto3==1.7.84,botocore==1.10.84,cachelib==0.1,cachetools==4.2.4,cchardet==2.1.1,celery==4.4.4,certifi==2017.11.5,cffi==1.11.2,chardet==3.0.4,citeproc-py==0.5.1,citeproc-py-styles==0.1.2,click==6.7,cookiecutter==1.6.0,counter-robots==2018.6,coverage==6.2,cryptography==2.1.4,datacite==1.0.1,DateTime==4.9,decorator==4.1.2,defusedxml==0.5.0,dictdiffer==0.7.0,distlib==0.3.6,dnspython==2.2.1,docutils==0.18.1,dojson==1.3.2,elasticsearch==6.1.1,elasticsearch-dsl==6.4.0,elementpath==1.0.6,email-validator==1.0.5,entrypoints==0.2.3,feedgen==0.7.0,filelock==3.4.1,Flask==1.1.0,Flask-Admin==1.5.3,Flask-Alembic==2.0.1,Flask-Assets==0.12,Flask-BabelEx==0.9.4,Flask-Breadcrumbs==0.5.0,Flask-Caching==1.10.1,Flask-CeleryExt==0.3.4,Flask-Collect==1.2.2,Flask-Cors==3.0.3,Flask-DebugToolbar==0.13.1,Flask-IIIF==0.6.1,Flask-KVSession==0.6.2,Flask-Limiter==1.1.0,Flask-Login==0.4.1,Flask-Mail==0.9.1,flask-marshmallow==0.14.0,Flask-Menu==0.6.0,-e git+https://github.com/RCOSDP/flask-oauthlib.git@83148ee01e9da37a8a1134febe83bc32b95bac6e#egg=Flask_OAuthlib,Flask-Plugins==1.6.1,Flask-Principal==0.4.0,Flask-RESTful==0.3.8,Flask-Security==3.0.0,flask-shell-ipython==0.4.1,Flask-Sitemap==0.4.0,Flask-SQLAlchemy==2.3.2,flask-talisman==0.4.1,Flask-WTF==0.14.3,-e git+https://github.com/RCOSDP/pyfpdf.git@f9b032148283d535cabc7789858081c80de36fef#egg=fpdf,frozendict==2.3.8,fs==0.5.4,ftfy==4.4.3,future==0.16.0,github3.py==1.1.0,html5lib==1.0.1,idna==2.6,iiif-prezi==0.3.0,imagesize==1.4.1,importlib-metadata==4.8.3,importlib-resources==5.4.0,infinity==1.4,intervals==0.8.0,invenio-access==1.1.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_accounts&subdirectory=modules/invenio-accounts,invenio-admin==1.1.2,invenio-app==1.1.0,invenio-assets==1.0.0,invenio-base==1.0.2,invenio-cache==1.0.0,invenio-celery==1.1.3,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_communities&subdirectory=modules/invenio-communities,invenio-config==1.0.0,invenio-csl-rest==1.0.0a1,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_db&subdirectory=modules/invenio-db,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_deposit&subdirectory=modules/invenio-deposit,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_files_rest&subdirectory=modules/invenio-files-rest,invenio-formatter==1.0.0b3,invenio-i18n==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_iiif&subdirectory=modules/invenio-iiif,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_indexer&subdirectory=modules/invenio-indexer,invenio-jsonschemas==1.0.0,invenio-logging==1.0.0b3,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_mail&subdirectory=modules/invenio-mail,invenio-marc21==1.0.0a8,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_oaiharvester&subdirectory=modules/invenio-oaiharvester,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_oaiserver&subdirectory=modules/invenio-oaiserver,invenio-oauth2server @ file:///code/modules/invenio-oauth2server/.tox/.tmp/package/1/invenio-oauth2server-1.0.0.zip,invenio-oauthclient==1.0.0,invenio-pidrelations==1.0.0a4,invenio-pidstore==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_previewer&subdirectory=modules/invenio-previewer,invenio-query-parser==0.6.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_queues&subdirectory=modules/invenio-queues,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_records&subdirectory=modules/invenio-records,invenio-records-files==1.0.0a10,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_records_rest&subdirectory=modules/invenio-records-rest,invenio-records-ui==1.0.0,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_resourcesyncclient&subdirectory=modules/invenio-resourcesyncclient,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_resourcesyncserver&subdirectory=modules/invenio-resourcesyncserver,invenio-rest==1.1.2,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_s3&subdirectory=modules/invenio-s3,-e git+https://github.com/RCOSDP/invenio-search.git@cff9744c5dc651893a9c51672c5b8da9adc21e16#egg=invenio_search,-e git+https://github.com/RCOSDP/invenio-search-ui.git@74bd3b2990ff27b39e01b6b31be9a0b5fda3dd0f#egg=invenio_search_ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=invenio_stats&subdirectory=modules/invenio-stats,invenio-theme==1.0.0b4,ipaddress==1.0.19,ipython==6.2.1,ipython-genutils==0.2.0,itsdangerous==0.24,jedi==0.11.0,Jinja2==2.10.1,jinja2-cli==0.6.0,jinja2-time==0.2.0,jmespath==0.10.0,jsmin==2.2.2,jsonpatch==1.21,jsonpath-ng==1.5.2,jsonpointer==1.14,jsonref==0.1,jsonresolver==0.2.1,jsonschema==2.6.0,jupyter-client==5.2.2,jupyter-core==4.4.0,-e git+https://github.com/RCOSDP/kombu.git@f204fdf078d5e94393c86693f545e2d011f620f5#egg=kombu,limits==1.2.1,lxml==4.1.1,Mako==1.0.7,MarkupSafe==1.1.1,marshmallow==2.20.1,marshmallow-sqlalchemy==0.23.1,maxminddb==1.5.2,maxminddb-geolite2==2017.803,mistune==0.8.3,mock==5.0.2,more-itertools==8.10.0,msgpack==0.6.2,nbconvert==5.3.1,nbformat==4.4.0,netaddr==0.8.0,node-semver==0.1.1,numpy==1.16.1,oauthlib==2.1.0,ordereddict==1.1,packaging==21.3,pandocfilters==1.4.2,parso==0.1.0,passlib==1.7.1,pbr==5.11.1,pexpect==4.3.0,pickleshare==0.7.4,Pillow==5.4.1,platformdirs==2.4.0,pluggy==0.13.1,ply==3.11,poyo==0.4.1,prompt-toolkit==1.0.15,psycopg2==2.7.3.2,ptyprocess==0.5.2,py==1.11.0,pycparser==2.18,Pygments==2.2.0,PyJWT==1.5.3,PyLD==2.0.3,pyparsing==3.1.0,-e git+https://github.com/RCOSDP/PyPDF2.git@fefc684a3a74aff6f99e5dff24f9b4dd1c95169d#egg=PyPDF2,pyPEG2==2.15.2,pytest==4.2.0,pytest-cov==2.9.0,python-dateutil==2.6.1,python-editor==1.0.3,python-geoip==1.2,pytz==2017.3,pyzmq==17.0.0,redis==2.10.6,requests==2.18.4,requests-oauthlib==1.1.0,resync==1.0.9,s3fs==0.1.6,s3transfer==0.1.13,selenium==3.141.0,Sickle==0.6.4,simplegeneric==0.8.1,simplejson==3.12.0,simplekv==0.11.2,six==1.16.0,snowballstemmer==2.2.0,soupsieve==2.3.2.post1,speaklater==1.3,Sphinx==1.8.4,sphinxcontrib-serializinghtml==1.1.5,sphinxcontrib-websupport==1.2.4,SQLAlchemy==1.2.19,SQLAlchemy-Continuum==1.3.6,SQLAlchemy-Utils==0.35.0,stevedore==3.5.2,sword3common==0.1.1,testpath==0.3.1,toml==0.10.2,tornado==4.5.3,tox==3.28.0,traitlets==4.3.2,typing_extensions==4.1.1,ua-parser==0.7.3,uritemplate==4.1.1,uritools==2.1.0,urllib3==1.22,uWSGI==2.0.21,uwsgitop==0.11,validators==0.12.0,vine==1.3.0,virtualenv==20.17.1,virtualenv-clone==0.5.7,virtualenvwrapper==4.8.4,Wand==0.6.1,wcwidth==0.1.7,webargs==5.5.2,webassets==0.12.1,webencodings==0.5.1,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_accounts&subdirectory=modules/weko-accounts,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_admin&subdirectory=modules/weko-admin,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_authors&subdirectory=modules/weko-authors,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_bulkupdate&subdirectory=modules/weko-bulkupdate,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_deposit&subdirectory=modules/weko-deposit,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_gridlayout&subdirectory=modules/weko-gridlayout,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_groups&subdirectory=modules/weko-groups,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_handle&subdirectory=modules/weko-handle,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_index_tree&subdirectory=modules/weko-index-tree,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_indextree_journal&subdirectory=modules/weko-indextree-journal,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_items_autofill&subdirectory=modules/weko-items-autofill,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_items_ui&subdirectory=modules/weko-items-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_itemtypes_ui&subdirectory=modules/weko-itemtypes-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_logging&subdirectory=modules/weko-logging,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_records&subdirectory=modules/weko-records,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_records_ui&subdirectory=modules/weko-records-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_redis&subdirectory=modules/weko-redis,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_schema_ui&subdirectory=modules/weko-schema-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_search_ui&subdirectory=modules/weko-search-ui,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_sitemap&subdirectory=modules/weko-sitemap,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_swordserver&subdirectory=modules/weko-swordserver,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_theme&subdirectory=modules/weko-theme,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_user_profiles&subdirectory=modules/weko-user-profiles,-e git+https://mhaya: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@github.com/RCOSDP/weko.git@4354c223a93c57314dba6d9a94c9eb42aa72c458#egg=weko_workflow&subdirectory=modules/weko-workflow,Werkzeug==0.15.2,whichcraft==0.4.1,WTForms==2.1,WTForms-Alchemy==0.16.5,WTForms-Components==0.10.3,xmlschema==0.9.30,xmltodict==0.12.0,zipp==3.6.0,zope.interface==5.5.2
c1 run-test-pre: PYTHONHASHSEED='26099259'
c1 run-test: commands[0] | pytest --cov=invenio_oauth2server tests -v --cov-branch --cov-report=term --cov-report=xml --basetemp=/code/modules/invenio-oauth2server/.tox/c1/tmp
============================= test session starts ==============================
platform linux -- Python 3.6.15, pytest-4.2.0, py-1.11.0, pluggy-0.13.1 -- /code/modules/invenio-oauth2server/.tox/c1/bin/python
cachedir: .tox/c1/.pytest_cache
rootdir: /code/modules/invenio-oauth2server, inifile:
plugins: celery-4.4.4, cov-2.9.0
collecting ... collected 59 items

tests/test_admin.py::test_admin ERROR                                    [  1%]
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue ERROR [  3%]
tests/test_decorators.py::test_require_api_auth_test1 ERROR              [  5%]
tests/test_decorators.py::test_require_api_auth_test2 ERROR              [  6%]
tests/test_decorators.py::test_require_oauth_scopes_test1 ERROR          [  8%]
tests/test_decorators.py::test_require_oauth_scopes_test2 ERROR          [ 10%]
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous ERROR [ 11%]
tests/test_decorators.py::test_rest_extension ERROR                      [ 13%]
tests/test_decorators.py::test_access_login_required ERROR               [ 15%]
tests/test_decorators.py::test_jwt_client ERROR                          [ 16%]
tests/test_invenio_oauth2server.py::test_version PASSED                  [ 18%]
tests/test_invenio_oauth2server.py::test_init SKIPPED                    [ 20%]
tests/test_invenio_oauth2server.py::test_init_rest PASSED                [ 22%]
tests/test_invenio_oauth2server.py::test_init_rest_with_oauthlib_monkeypatch PASSED [ 23%]
tests/test_models.py::test_empty_redirect_uri_and_scope ERROR            [ 25%]
tests/test_models.py::test_token_scopes ERROR                            [ 27%]
tests/test_models.py::test_registering_invalid_scope ERROR               [ 28%]
tests/test_models.py::test_deletion_of_consumer_resource_owner ERROR     [ 30%]
tests/test_models.py::test_deletion_of_resource_owner_consumer ERROR     [ 32%]
tests/test_models.py::test_deletion_of_client1 ERROR                     [ 33%]
tests/test_models.py::test_deletion_of_token1 ERROR                      [ 35%]
tests/test_models.py::test_deletion_of_token2 ERROR                      [ 37%]
tests/test_provider.py::test_client_salt ERROR                           [ 38%]
tests/test_provider.py::test_invalid_authorize_requests ERROR            [ 40%]
tests/test_provider.py::test_refresh_flow ERROR                          [ 42%]
tests/test_provider.py::test_implicit_flow ERROR                         [ 44%]
tests/test_provider.py::test_client_flow ERROR                           [ 45%]
tests/test_provider.py::test_auth_flow_denied ERROR                      [ 47%]
tests/test_provider.py::test_personal_access_token ERROR                 [ 49%]
tests/test_provider.py::test_resource_auth_methods ERROR                 [ 50%]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True] ERROR [ 52%]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True] ERROR [ 54%]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True] ERROR [ 55%]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True] ERROR [ 57%]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True] ERROR [ 59%]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False] ERROR [ 61%]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False] ERROR [ 62%]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False] ERROR [ 64%]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False] ERROR [ 66%]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False] ERROR [ 67%]
tests/test_provider.py::test_oauthlib_monkeypatch ERROR                  [ 69%]
tests/test_provider.py::test_settings_index ERROR                        [ 71%]
tests/test_provider.py::test_info_not_accessible_in_production ERROR     [ 72%]
tests/test_provider.py::test_expired_refresh_flow ERROR                  [ 74%]
tests/test_provider.py::test_not_allowed_public_refresh_flow ERROR       [ 76%]
tests/test_provider.py::test_password_grant_type ERROR                   [ 77%]
tests/test_provider.py::test_email_scope ERROR                           [ 79%]
tests/test_server.py::test_user_identity_init ERROR                      [ 81%]
tests/test_settings.py::test_personal_token_management ERROR             [ 83%]
tests/test_settings.py::test_authorized_app_revocation ERROR             [ 84%]
tests/test_settings.py::test_client_management ERROR                     [ 86%]
tests/test_utils.py::test_rebuilding_access_tokens ERROR                 [ 88%]
tests/test_validators.py::test_validate_redirect_uri[example.org/-expected0] PASSED [ 89%]
tests/test_validators.py::test_validate_redirect_uri[http://-expected1] PASSED [ 91%]
tests/test_validators.py::test_validate_redirect_uri[http://example.org/-expected2] PASSED [ 93%]
tests/test_validators.py::test_validate_redirect_uri[https://example.org/-None] PASSED [ 94%]
tests/test_validators.py::test_validate_redirect_uri[https://localhost/-None] PASSED [ 96%]
tests/test_validators.py::test_validate_redirect_uri[https://127.0.0.1-None] PASSED [ 98%]
tests/test_validators.py::test_url_validator ERROR                       [100%]

==================================== ERRORS ====================================
_________________________ ERROR at setup of test_admin _________________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bfacf7b8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bfacf7f0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bfacf7b8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bfa74dd8>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bfa74dd8>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bfacf7b8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bfacf7b8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bfacf7b8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bfa74dd8>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bfacf7b8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_admin>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bfacf7b8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_______ ERROR at setup of test_require_api_auth_oauthlib_urldecode_issue _______

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4c00b67b8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bfacfa20>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4c00b67b8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bfae22e8>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bfae22e8>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4c00b67b8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4c00b67b8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4c00b67b8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bfae22e8>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4c00b67b8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_require_api_auth_oauthlib_urldecode_issue>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4c00b67b8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
________________ ERROR at setup of test_require_api_auth_test1 _________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bfa77a20>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bf20c240>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bfa77a20>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf9892e8>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf9892e8>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bfa77a20>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bfa77a20>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bfa77a20>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf9892e8>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bfa77a20>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_require_api_auth_test1>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bfa77a20>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
________________ ERROR at setup of test_require_api_auth_test2 _________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf913dd8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bf913ef0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf913dd8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf91e160>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf91e160>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf913dd8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf913dd8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf913dd8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf91e160>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf913dd8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_require_api_auth_test2>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf913dd8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
______________ ERROR at setup of test_require_oauth_scopes_test1 _______________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf227d68>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bf2274e0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf227d68>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf526e10>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf526e10>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf227d68>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf227d68>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf227d68>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf526e10>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf227d68>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_require_oauth_scopes_test1>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf227d68>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
______________ ERROR at setup of test_require_oauth_scopes_test2 _______________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf580f60>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bf5a2f60>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf580f60>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf5a71d0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf5a71d0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf580f60>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf580f60>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf580f60>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf5a71d0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf580f60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_require_oauth_scopes_test2>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf580f60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________ ERROR at setup of test_require_oauth_scopes_allow_anonymous __________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf306dd8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bf306f60>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf306dd8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf077588>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf077588>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf306dd8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf306dd8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf306dd8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf077588>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf306dd8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_require_oauth_scopes_allow_anonymous>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf306dd8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
____________________ ERROR at setup of test_rest_extension _____________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf4025c0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bf402da0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf4025c0>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf402d68>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf402d68>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf4025c0>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf4025c0>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf4025c0>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf402d68>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf4025c0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_rest_extension>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf4025c0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_access_login_required _________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf7e9fd0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bf7ebef0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf7e9fd0>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf7af710>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf7af710>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf7e9fd0>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf7e9fd0>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf7e9fd0>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf7af710>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf7e9fd0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_access_login_required>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf7e9fd0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
______________________ ERROR at setup of test_jwt_client _______________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf7eb630>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bf81ef98>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf7eb630>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf829b00>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf829b00>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf7eb630>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf7eb630>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf7eb630>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf829b00>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf7eb630>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_jwt_client>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf7eb630>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_____________ ERROR at setup of test_empty_redirect_uri_and_scope ______________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bec8f9e8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4beb73f60>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bec8f9e8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4beb94b00>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4beb94b00>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bec8f9e8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bec8f9e8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bec8f9e8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4beb94b00>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bec8f9e8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_empty_redirect_uri_and_scope>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bec8f9e8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_____________________ ERROR at setup of test_token_scopes ______________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bfa06f98>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bfa0add8>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bfa06f98>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bfa0bc88>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bfa0bc88>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bfa06f98>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bfa06f98>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bfa06f98>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bfa0bc88>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bfa06f98>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_token_scopes>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bfa06f98>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_______________ ERROR at setup of test_registering_invalid_scope _______________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf8d3fd0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bf8d9f28>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf8d3fd0>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf8b0048>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf8b0048>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf8d3fd0>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf8d3fd0>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf8d3fd0>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf8b0048>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf8d3fd0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_registering_invalid_scope>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf8d3fd0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
__________ ERROR at setup of test_deletion_of_consumer_resource_owner __________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bedbf518>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4beea6f28>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bedbf518>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bee6d978>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bee6d978>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bedbf518>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bedbf518>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bedbf518>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bee6d978>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bedbf518>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_deletion_of_consumer_resource_owner>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bedbf518>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
__________ ERROR at setup of test_deletion_of_resource_owner_consumer __________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bead6cf8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4beac18d0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bead6cf8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4beada8d0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4beada8d0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bead6cf8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bead6cf8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bead6cf8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4beada8d0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bead6cf8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_deletion_of_resource_owner_consumer>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bead6cf8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
__________________ ERROR at setup of test_deletion_of_client1 __________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be94ff98>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4be94fef0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be94ff98>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be938c88>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be938c88>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be94ff98>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be94ff98>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be94ff98>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be938c88>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be94ff98>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_deletion_of_client1>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be94ff98>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
__________________ ERROR at setup of test_deletion_of_token1 ___________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf2a9f60>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bf2a2fd0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf2a9f60>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf28d978>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf28d978>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf2a9f60>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf2a9f60>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf2a9f60>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf28d978>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf2a9f60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_deletion_of_token1>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf2a9f60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
__________________ ERROR at setup of test_deletion_of_token2 ___________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf1dbf98>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bf1dbef0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf1dbf98>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf1c0c88>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf1c0c88>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf1dbf98>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf1dbf98>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf1dbf98>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf1c0c88>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf1dbf98>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_deletion_of_token2>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf1dbf98>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
______________________ ERROR at setup of test_client_salt ______________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be99e630>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bebc4dd8>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be99e630>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be99eb38>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be99eb38>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be99e630>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be99e630>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be99e630>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be99eb38>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be99e630>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_client_salt>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be99e630>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
______________ ERROR at setup of test_invalid_authorize_requests _______________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be7c4b70>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4be7b4048>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be7c4b70>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be7e9080>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be7e9080>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be7c4b70>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be7c4b70>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be7c4b70>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be7e9080>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be7c4b70>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_invalid_authorize_requests>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be7c4b70>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_____________________ ERROR at setup of test_refresh_flow ______________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bef46358>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bef46668>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bef46358>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bef58e80>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bef58e80>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bef46358>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bef46358>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bef46358>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bef58e80>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bef46358>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_refresh_flow>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bef46358>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_____________________ ERROR at setup of test_implicit_flow _____________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf627fd0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4be4c7780>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf627fd0>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf622048>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf622048>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf627fd0>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf627fd0>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf627fd0>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf622048>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf627fd0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_implicit_flow>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf627fd0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
______________________ ERROR at setup of test_client_flow ______________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4beb4ff60>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4beb4ee80>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4beb4ff60>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be91de48>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be91de48>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4beb4ff60>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4beb4ff60>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4beb4ff60>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be91de48>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4beb4ff60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_client_flow>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4beb4ff60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
___________________ ERROR at setup of test_auth_flow_denied ____________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf8a4048>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bf8a4208>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf8a4048>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf89ca20>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf89ca20>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf8a4048>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf8a4048>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf8a4048>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf89ca20>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf8a4048>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_auth_flow_denied>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf8a4048>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_personal_access_token _________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be6ddf60>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4be6bdb70>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be6ddf60>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be6e4b70>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be6e4b70>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be6ddf60>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be6ddf60>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be6ddf60>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be6e4b70>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be6ddf60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_personal_access_token>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be6ddf60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_resource_auth_methods _________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be088dd8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4be088ef0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be088dd8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be0894a8>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be0894a8>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be088dd8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be088dd8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be088dd8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be0894a8>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be088dd8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_resource_auth_methods>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be088dd8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_____ ERROR at setup of test_oauthlib_urldecoding_issue[q=RegularArg-True] _____

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf1a2e80>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bf1a2940>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf1a2e80>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf19b828>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf19b828>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf1a2e80>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf1a2e80>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf1a2e80>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bf19b828>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf1a2e80>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_urldecoding_issue[q=RegularArg-True]>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bf1a2e80>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_____ ERROR at setup of test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True] ______

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdd6c5c0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bdd6ce10>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdd6c5c0>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bdd6cbe0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bdd6cbe0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdd6c5c0>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdd6c5c0>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdd6c5c0>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bdd6cbe0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdd6c5c0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdd6c5c0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
__ ERROR at setup of test_oauthlib_urldecoding_issue[q=text+with+spaces-True] __

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdf01240>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bdf10dd8>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdf01240>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bdf01748>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bdf01748>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdf01240>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdf01240>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdf01240>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bdf01748>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdf01240>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_urldecoding_issue[q=text+with+spaces-True]>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdf01240>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
___ ERROR at setup of test_oauthlib_urldecoding_issue[q=title:TheTitle-True] ___

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be288b38>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bdf29eb8>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be288b38>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be613208>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be613208>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be288b38>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be288b38>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be288b38>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be613208>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be288b38>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_urldecoding_issue[q=title:TheTitle-True]>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be288b38>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_ ERROR at setup of test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True] _

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdf29da0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4be818dd8>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdf29da0>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bddbe5f8>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bddbe5f8>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdf29da0>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdf29da0>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdf29da0>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bddbe5f8>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdf29da0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdf29da0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
____ ERROR at setup of test_oauthlib_urldecoding_issue[$type=search-False] _____

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bee1abe0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bd9b0f28>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bee1abe0>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bd9aecc0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bd9aecc0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bee1abe0>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bee1abe0>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bee1abe0>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bd9aecc0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bee1abe0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_urldecoding_issue[$type=search-False]>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bee1abe0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
____ ERROR at setup of test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False] _____

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be0ea320>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4be0c6f60>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be0ea320>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be0b4b00>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be0b4b00>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be0ea320>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be0ea320>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be0ea320>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be0b4b00>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be0ea320>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4be0ea320>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_ ERROR at setup of test_oauthlib_urldecoding_issue[with regular spaces-False] _

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdd05f28>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bdd05e10>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdd05f28>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bdd14f28>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bdd14f28>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdd05f28>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdd05f28>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdd05f28>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bdd14f28>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdd05f28>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_urldecoding_issue[with regular spaces-False]>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdd05f28>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
__ ERROR at setup of test_oauthlib_urldecoding_issue[json_data={a: 42}-False] __

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd780dd8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bd780ef0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd780dd8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bd78e898>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bd78e898>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd780dd8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd780dd8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd780dd8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bd78e898>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd780dd8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_urldecoding_issue[json_data={a: 42}-False]>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd780dd8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
___ ERROR at setup of test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False] ___

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd7e8f60>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bd7dcda0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd7e8f60>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bd7aeda0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bd7aeda0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd7e8f60>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd7e8f60>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd7e8f60>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bd7aeda0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd7e8f60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd7e8f60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_oauthlib_monkeypatch __________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdc92dd8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bdc92ef0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdc92dd8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bdc782b0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bdc782b0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdc92dd8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdc92dd8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdc92dd8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bdc782b0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdc92dd8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_oauthlib_monkeypatch>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdc92dd8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
____________________ ERROR at setup of test_settings_index _____________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd3e2f28>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4be36cf60>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd3e2f28>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be357438>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be357438>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd3e2f28>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd3e2f28>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd3e2f28>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4be357438>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd3e2f28>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_settings_index>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd3e2f28>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
___________ ERROR at setup of test_info_not_accessible_in_production ___________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdfaa4e0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bdf83dd8>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdfaa4e0>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bdfaa438>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bdfaa438>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdfaa4e0>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdfaa4e0>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdfaa4e0>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bdfaa438>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdfaa4e0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_info_not_accessible_in_production>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bdfaa4e0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_________________ ERROR at setup of test_expired_refresh_flow __________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd8c0048>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bd8c01d0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd8c0048>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bd8da978>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bd8da978>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd8c0048>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd8c0048>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd8c0048>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bd8da978>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd8c0048>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_expired_refresh_flow>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd8c0048>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
____________ ERROR at setup of test_not_allowed_public_refresh_flow ____________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd040dd8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bd09cf28>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd040dd8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bd09f2e8>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bd09f2e8>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd040dd8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd040dd8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd040dd8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bd09f2e8>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd040dd8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_not_allowed_public_refresh_flow>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd040dd8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
__________________ ERROR at setup of test_password_grant_type __________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd6bcf60>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bd6b1588>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd6bcf60>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bd6d3160>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bd6d3160>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd6bcf60>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd6bcf60>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd6bcf60>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bd6d3160>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd6bcf60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_password_grant_type>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd6bcf60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
______________________ ERROR at setup of test_email_scope ______________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd486f98>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bd00bf28>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd486f98>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bcffb4e0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bcffb4e0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd486f98>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd486f98>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd486f98>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bcffb4e0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd486f98>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_email_scope>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd486f98>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
__________________ ERROR at setup of test_user_identity_init ___________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd390390>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bced26d8>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd390390>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bcedcba8>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bcedcba8>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd390390>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd390390>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd390390>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bcedcba8>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd390390>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_user_identity_init>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd390390>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_______________ ERROR at setup of test_personal_token_management _______________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bca66e80>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bca66208>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bca66e80>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bca6bd30>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bca6bd30>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bca66e80>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bca66e80>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bca66e80>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bca6bd30>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bca66e80>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_personal_token_management>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bca66e80>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_______________ ERROR at setup of test_authorized_app_revocation _______________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd12bf60>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bd12cf60>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd12bf60>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bc920278>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bc920278>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd12bf60>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd12bf60>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd12bf60>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bc920278>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd12bf60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_authorized_app_revocation>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd12bf60>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
___________________ ERROR at setup of test_client_management ___________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd237dd8>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bd237f28>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd237dd8>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bc960be0>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bc960be0>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd237dd8>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd237dd8>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd237dd8>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bc960be0>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd237dd8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_client_management>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bd237dd8>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_______________ ERROR at setup of test_rebuilding_access_tokens ________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bcfa4da0>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bcfa4ef0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bcfa4da0>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bcfa6a90>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bcfa6a90>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bcfa4da0>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bcfa4da0>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bcfa4da0>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bcfa6a90>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bcfa4da0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_rebuilding_access_tokens>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bcfa4da0>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
_____________________ ERROR at setup of test_url_validator _____________________

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bca70b00>
create = <sqlalchemy.sql.ddl.CreateTable object at 0x7fa4bca8d0f0>

    def visit_create_table(self, create):
        table = create.element
        preparer = self.preparer
    
        text = "\nCREATE "
        if table._prefixes:
            text += " ".join(table._prefixes) + " "
        text += "TABLE " + preparer.format_table(table) + " "
    
        create_table_suffix = self.create_table_suffix(table)
        if create_table_suffix:
            text += create_table_suffix + " "
    
        text += "("
    
        separator = "\n"
    
        # if only one primary key, specify it along with the column
        first_pk = False
        for create_column in create.columns:
            column = create_column.element
            try:
                processed = self.process(
>                   create_column, first_pk=column.primary_key and not first_pk
                )

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bca70b00>
obj = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bca72e80>
kwargs = {'first_pk': False}

    def process(self, obj, **kwargs):
>       return obj._compiler_dispatch(self, **kwargs)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bca72e80>
visitor = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bca70b00>
kw = {'first_pk': False}
meth = <bound method DDLCompiler.visit_create_column of <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bca70b00>>

    def _compiler_dispatch(self, visitor, **kw):
        try:
            meth = getter(visitor)
        except AttributeError:
            raise exc.UnsupportedCompilationError(visitor, cls)
        else:
>           return meth(self, **kw)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bca70b00>
create = <sqlalchemy.sql.ddl.CreateColumn object at 0x7fa4bca72e80>
first_pk = False

    def visit_create_column(self, create, first_pk=False):
        column = create.element
    
        if column.system:
            return None
    
>       text = self.get_column_specification(column, first_pk=first_pk)

.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bca70b00>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError

The above exception was the direct cause of the following exception:

request = <SubRequest 'app' for <Function test_url_validator>>

    @pytest.fixture()
    def app(request):
        """Flask application fixture."""
        instance_path = tempfile.mkdtemp()
    
        def init_app(app):
            app.config.update(
                LOGIN_DISABLED=False,
                MAIL_SUPPRESS_SEND=True,
                OAUTH2_CACHE_TYPE='simple',
                OAUTHLIB_INSECURE_TRANSPORT=True,
                SECRET_KEY='CHANGE_ME',
                SECURITY_DEPRECATED_PASSWORD_SCHEMES=[],
                SECURITY_PASSWORD_HASH='plaintext',
                SECURITY_PASSWORD_SALT='CHANGE_ME_ALSO',
                SECURITY_PASSWORD_SCHEMES=['plaintext'],
                SQLALCHEMY_DATABASE_URI=os.getenv('SQLALCHEMY_DATABASE_URI',
                                                  'sqlite:///test.db'),
                SQLALCHEMY_TRACK_MODIFICATIONS=True,
                TESTING=True,
                WTF_CSRF_ENABLED=False,
            )
            Babel(app)
            Mail(app)
            Menu(app)
            Breadcrumbs(app)
            InvenioDB(app)
            InvenioOAuth2Server(app)
    
        api_app = Flask('testapiapp', instance_path=instance_path)
        api_app.config.update(
            APPLICATION_ROOT='/api',
            ACCOUNTS_REGISTER_BLUEPRINT=True
        )
        init_app(api_app)
        InvenioAccountsREST(api_app)
        InvenioOAuth2ServerREST(api_app)
    
        app = Flask('testapp', instance_path=instance_path)
        init_app(app)
        InvenioAccountsUI(app)
        app.register_blueprint(accounts_blueprint)
        app.register_blueprint(server_blueprint)
        app.register_blueprint(settings_blueprint)
    
        app.wsgi_app = DispatcherMiddleware(app.wsgi_app, {
            '/api': api_app.wsgi_app
        })
    
        with app.app_context():
            if str(db.engine.url) != 'sqlite://' and \
               not database_exists(str(db.engine.url)):
                create_database(str(db.engine.url))
>           db.create_all()

tests/conftest.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:963: in create_all
    self._execute_for_all_tables(app, bind, 'create_all')
.tox/c1/lib/python3.6/site-packages/flask_sqlalchemy/__init__.py:955: in _execute_for_all_tables
    op(bind=self.get_engine(app, bind), **extra)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/schema.py:4200: in create_all
    ddl.SchemaGenerator, self, checkfirst=checkfirst, tables=tables
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:2011: in _run_visitor
    conn._run_visitor(visitorcallable, element, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1599: in _run_visitor
    visitorcallable(self.dialect, self, **kwargs).traverse_single(element)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:779: in visit_metadata
    _is_metadata_operation=True,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:130: in traverse_single
    return meth(obj, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:824: in visit_table
    include_foreign_key_constraints,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:980: in execute
    return meth(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:72: in _execute_on_connection
    return connection._execute_ddl(self, multiparams, params)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/engine/base.py:1035: in _execute_ddl
    else None,
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/elements.py:448: in compile
    return self._compiler(dialect, bind=bind, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/ddl.py:29: in _compiler
    return dialect.ddl_compiler(dialect, self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:310: in __init__
    self.string = self.process(self.statement, **compile_kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2812: in visit_create_table
    % (table.description, column.name, ce.args[0])
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:296: in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb, cause=cause)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/util/compat.py:276: in reraise
    raise value.with_traceback(tb)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2800: in visit_create_table
    create_column, first_pk=column.primary_key and not first_pk
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:341: in process
    return obj._compiler_dispatch(self, **kwargs)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/visitors.py:90: in _compiler_dispatch
    return meth(self, **kw)
.tox/c1/lib/python3.6/site-packages/sqlalchemy/sql/compiler.py:2832: in visit_create_column
    text = self.get_column_specification(column, first_pk=first_pk)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <sqlalchemy.dialects.sqlite.base.SQLiteDDLCompiler object at 0x7fa4bca70b00>
column = Column('organization_no', Integer(), table=<sitelicense_ip_address>, primary_key=True, nullable=False)
kwargs = {'first_pk': False}, coltype = 'INTEGER'
colspec = 'organization_no INTEGER NOT NULL', default = None

    def get_column_specification(self, column, **kwargs):
        coltype = self.dialect.type_compiler.process(
            column.type, type_expression=column
        )
        colspec = self.preparer.format_column(column) + " " + coltype
        default = self.get_column_default_string(column)
        if default is not None:
            if isinstance(column.server_default.arg, ColumnElement):
                default = "(" + default + ")"
            colspec += " DEFAULT " + default
    
        if not column.nullable:
            colspec += " NOT NULL"
    
        if column.primary_key:
            if (
                column.autoincrement is True
                and len(column.table.primary_key.columns) != 1
            ):
                raise exc.CompileError(
>                   "SQLite does not support autoincrement for "
                    "composite primary keys"
                )
E               sqlalchemy.exc.CompileError: (in table 'sitelicense_ip_address', column 'organization_no'): SQLite does not support autoincrement for composite primary keys

.tox/c1/lib/python3.6/site-packages/sqlalchemy/dialects/sqlite/base.py:925: CompileError
=============================== warnings summary ===============================
tests/test_admin.py::test_admin
  /code/modules/invenio-oauth2server/.tox/c1/lib/python3.6/site-packages/pkg_resources/_vendor/packaging/specifiers.py:276: DeprecationWarning: Creating a LegacyVersion has been deprecated and will be removed in the next major release
    DeprecationWarning,

tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_admin.py::test_admin
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_decorators.py::test_jwt_client
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_token_scopes
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_models.py::test_deletion_of_token2
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_provider.py::test_email_scope
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_server.py::test_user_identity_init
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_settings.py::test_client_management
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
tests/test_validators.py::test_url_validator
  /code/modules/invenio-oauth2server/.tox/c1/lib/python3.6/site-packages/pkg_resources/_vendor/packaging/version.py:114: DeprecationWarning: Creating a LegacyVersion has been deprecated and will be removed in the next major release
    DeprecationWarning,

tests/test_admin.py::test_admin
tests/test_decorators.py::test_require_api_auth_oauthlib_urldecode_issue
tests/test_decorators.py::test_require_api_auth_test1
tests/test_decorators.py::test_require_api_auth_test2
tests/test_decorators.py::test_require_oauth_scopes_test1
tests/test_decorators.py::test_require_oauth_scopes_test2
tests/test_decorators.py::test_require_oauth_scopes_allow_anonymous
tests/test_decorators.py::test_rest_extension
tests/test_decorators.py::test_access_login_required
tests/test_decorators.py::test_jwt_client
tests/test_models.py::test_empty_redirect_uri_and_scope
tests/test_models.py::test_token_scopes
tests/test_models.py::test_registering_invalid_scope
tests/test_models.py::test_deletion_of_consumer_resource_owner
tests/test_models.py::test_deletion_of_resource_owner_consumer
tests/test_models.py::test_deletion_of_client1
tests/test_models.py::test_deletion_of_token1
tests/test_models.py::test_deletion_of_token2
tests/test_provider.py::test_client_salt
tests/test_provider.py::test_invalid_authorize_requests
tests/test_provider.py::test_refresh_flow
tests/test_provider.py::test_implicit_flow
tests/test_provider.py::test_client_flow
tests/test_provider.py::test_auth_flow_denied
tests/test_provider.py::test_personal_access_token
tests/test_provider.py::test_resource_auth_methods
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=RegularArg-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[a=1&b=2&c=3-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=text+with+spaces-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=title:TheTitle-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=properly%20encoded%24-True]
tests/test_provider.py::test_oauthlib_urldecoding_issue[$type=search-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[q=Joan+D'Arc-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[with regular spaces-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[json_data={a: 42}-False]
tests/test_provider.py::test_oauthlib_urldecoding_issue[array=[1, 2, 3]-False]
tests/test_provider.py::test_oauthlib_monkeypatch
tests/test_provider.py::test_settings_index
tests/test_provider.py::test_info_not_accessible_in_production
tests/test_provider.py::test_expired_refresh_flow
tests/test_provider.py::test_not_allowed_public_refresh_flow
tests/test_provider.py::test_password_grant_type
tests/test_provider.py::test_email_scope
tests/test_server.py::test_user_identity_init
tests/test_settings.py::test_personal_token_management
tests/test_settings.py::test_authorized_app_revocation
tests/test_settings.py::test_client_management
tests/test_utils.py::test_rebuilding_access_tokens
tests/test_validators.py::test_url_validator
  /code/modules/invenio-oauth2server/tests/conftest.py:89: DeprecationWarning: 'werkzeug.wsgi.DispatcherMiddleware' has moved to 'werkzeug.middleware.dispatcher.DispatcherMiddleware'. This import is deprecated as of version 0.15 and will be removed in version 1.0.
    '/api': api_app.wsgi_app

tests/test_models.py::test_empty_redirect_uri_and_scope
  /code/modules/invenio-oauth2server/invenio_oauth2server/ext.py:285: RuntimeWarning: You are overriding the default OAuthlib "URL encoded" set of valid characters. Make sure that the characters defined in oauthlib.common.urlencoded are indeed limitting your needs.
    RuntimeWarning

-- Docs: https://docs.pytest.org/en/latest/warnings.html

---------- coverage: platform linux, python 3.6.15-final-0 -----------
Name                                     Stmts   Miss Branch BrPart  Cover
--------------------------------------------------------------------------
invenio_oauth2server/__init__.py             7      0      0      0   100%
invenio_oauth2server/admin.py               24      0      4      0   100%
invenio_oauth2server/config.py              15      0      0      0   100%
invenio_oauth2server/decorators.py          35     14     12      0    45%
invenio_oauth2server/errors.py              40     12     22      0    71%
invenio_oauth2server/ext.py                110     36     54      7    59%
invenio_oauth2server/forms.py               55     28     26      0    48%
invenio_oauth2server/models.py             141     60     30      0    53%
invenio_oauth2server/provider.py            46     29     18      1    28%
invenio_oauth2server/proxies.py              5      0      2      0   100%
invenio_oauth2server/scopes.py               6      0      0      0   100%
invenio_oauth2server/utils.py               31     19     10      0    29%
invenio_oauth2server/validators.py          28      9     16      2    61%
invenio_oauth2server/version.py              3      0      0      0   100%
invenio_oauth2server/views/__init__.py       5      0      0      0   100%
invenio_oauth2server/views/server.py        84     51     20      0    32%
invenio_oauth2server/views/settings.py     126     75     32      1    33%
--------------------------------------------------------------------------
TOTAL                                      761    333    246     11    50%
Coverage XML written to file coverage.xml

======== 9 passed, 1 skipped, 5539 warnings, 49 error in 92.51 seconds =========
ERROR: InvocationError for command /code/modules/invenio-oauth2server/.tox/c1/bin/pytest --cov=invenio_oauth2server tests -v --cov-branch --cov-report=term --cov-report=xml --basetemp=/code/modules/invenio-oauth2server/.tox/c1/tmp (exited with code 1)
___________________________________ summary ____________________________________
ERROR:   c1: commands failed
